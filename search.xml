<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>tar</title>
      <link href="/2025/02/07/work/Tools/tar/"/>
      <url>/2025/02/07/work/Tools/tar/</url>
      
        <content type="html"><![CDATA[<p>.tar.xz<br>tar xvJf  ***.tar.xz</p><p>解压 tar zxvf 文件名.tar.gz<br>压缩 tar zcvf 文件名.tar.gz 待压缩的文件名</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux文件传输</title>
      <link href="/2025/02/07/work/Tools/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
      <url>/2025/02/07/work/Tools/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<p>nc传输文件；<br>nc $ip 8000 &lt; file<br>nc -l 8000 &gt; file</p><p>用python开启一个简单的服务器：<br>python -m SimpleHTTPServer 8080<br>wget <a href="http://ip:8080/file.txt">http://ip:8080/file.txt</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cp软链接</title>
      <link href="/2025/02/07/work/Tools/cp%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
      <url>/2025/02/07/work/Tools/cp%E8%BD%AF%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>若要cp软链接对应的真实文件，cp -L </p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PDF因为有密码无法打印</title>
      <link href="/2025/02/07/work/Tools/pdf%E6%96%87%E4%BB%B6%E8%A7%A3%E5%AF%86/"/>
      <url>/2025/02/07/work/Tools/pdf%E6%96%87%E4%BB%B6%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>PDF因为有密码无法打印：<br><a href="https://www.ilovepdf.com/zh-cn/unlock_pdf">https://www.ilovepdf.com/zh-cn/unlock_pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode_markdown_paste_config</title>
      <link href="/2025/02/07/odnwo/Skills/vscode_markdown_paste_config/"/>
      <url>/2025/02/07/odnwo/Skills/vscode_markdown_paste_config/</url>
      
        <content type="html"><![CDATA[<p>editor.experimental.pasteActions.enabled<br>markdown.experimental.copyFiles.destination</p><p>**&#x2F;*:&#x2F;images_pasted&#x2F;${documentFileName}&#x2F;</p><p>hexo, 图片路径中不能包含下划线，否则不能显示</p>]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> Skills </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo_blog</title>
      <link href="/2025/02/07/odnwo/Skills/blog/"/>
      <url>/2025/02/07/odnwo/Skills/blog/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password" data-whm="wrong check result">  <script id="hbeData" type="hbeData" data-hmacdigest="cba2e7c13bdba0ff5e61f6b8ae73a3c1a1353ef63c132de47b08d4a775a79e0f">1c4f476f3e7125f5cf24ac6b2eb4579363f22681d3bcff5baca7ac4a1aa0f77aaca0fc2320bde30333f99f6fccdfd97858918a7c1ce86b53acab3f29b242a9ba597378a190df45ebe9b79b08bea49df6e73bd5fc9771eacecd581e7fb68e8cdb45e5adf6ed6f9223242a9ed092260269a84f54abe6abad515284f0d03bec2c419fb2b1ac51b8e5239b97b05cdf8914f2a349f03961bc4ce7ad0aa6d19ff980e9f6f544ea0ae147fae8e7023a3f71c0e0b60bb1d123c9b9a705f3b3f1e27cfca691bfa9570c8353a0b1b81ad747419d81f077761e6351508b9779cced8c33139960c312049a258c0bb8fde627138ce1cea33e0de6db5223678cabd508d085fe37d71cf29dcf0f8dd03a4ec5dae7d2172ef9594ccb3dc934a90cb01b509b2a15979fd9a33ed8cd8af99228194200cba56e2ea79640b27a4a0ae45b20c5426020079cef49876001fcf7b0c6a2f47ad479cc</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">The blog is private</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typingclub</title>
      <link href="/2025/02/07/odnwo/Skills/typing/"/>
      <url>/2025/02/07/odnwo/Skills/typing/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password" data-whm="wrong check result">  <script id="hbeData" type="hbeData" data-hmacdigest="1c5e2515388ae10a26858897b98a39b42f56f338f5a549052e11f52b001467ca">1c4f476f3e7125f5cf24ac6b2eb457935cf95778e2714f3e2214fe91ce8db16d47c6437d929f6ecc0ee5a03fedf2930a15098e8268c1db45062102df1e272b880b026f8b97fdb7bbb906f2a0f8fa713d04b155ed94ef511ae32acf5ade0915688096a55fc639d8f2e01c86b67556d40b55b612e3541501f1a80ed22cab02918d6ca38d386390bc4acdef8aa0b51a09a6ff7eff4cca3d9d73f2efa0715ae1cabbac516a9292a73e4aeaaeb788fd5020d13f4bfabc243ab9b4d5d8a8edc85c468952b37d74851ed3cd4c3cc171a9ca5f85d5c433ae2982bdff5ef445cd920c27f6e01f8fe05f97a638a18d3a08becb6d906d1d7f02c26ba9f98d64b31ae9654074188fb0a003688b0fa9baa4227362d1e784230e213f09895ca8a3e13a5b08b0db2cc0450ac3e2ef0f7ec89ad33c43ebbd75bd0a70535a5d46396917bb239ca751ed54b0a59ad83c7dc875e56ba24764cbc33bbf0550cdb7bf5cfd61510a7660ca0bdd633fc6b163794d605a6362d41d2592a3a6cc5bd675565743bc5ff7b739f97fe14237e37831a1e1eaf6883e58409aea8ff6beb332de75fc57ecea29c76846ae76bf7cc79ea706409f5c43710e584935331a69c47c21be53cc944d73616efe33af7b21a53d336a671e1fc73a269d7854e6c5a4ed61f205d0d1c05c19cdfd6527b6cc9d0efa6ae05c8f016bf13dcce8b97d9945702bee5b9ce74968fb524d14f47427c9180abb481e82cee9f42340ba3e7b4bc7af6e904a8288c600b336ab1cc35b458723ea8f3bcc885e17eb154e2a247299eb0d2fb504386db6ab767b578c8a10ac2983f25ad9618be8389882f7b7d19c2d1dce8bd5a9b1ff214743943861</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">The blog is private</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>revolut</title>
      <link href="/2025/02/07/odnwo/Money/revolut/"/>
      <url>/2025/02/07/odnwo/Money/revolut/</url>
      
        <content type="html"><![CDATA[<p>revolut可以创建虚拟卡，用于付款，防止被盗刷<br>metamask用apple pay一直付款失败，用revolut的虚拟卡可以成功付款</p>]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> Money </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>猎罪图鉴</title>
      <link href="/2025/02/07/odnwo/ME/PRIVATE/%E7%8C%8E%E7%BD%AA%E5%9B%BE%E9%89%B4/"/>
      <url>/2025/02/07/odnwo/ME/PRIVATE/%E7%8C%8E%E7%BD%AA%E5%9B%BE%E9%89%B4/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password" data-whm="wrong check result">  <script id="hbeData" type="hbeData" data-hmacdigest="030eb6dd6c52520c82f141fa322c5247e989217a5409737c9da64cc55f026d1c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">The blog is private</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> ME </category>
          
          <category> PRIVATE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沈翊</title>
      <link href="/2025/02/07/odnwo/ME/PRIVATE/%E6%B2%88%E7%BF%8A/"/>
      <url>/2025/02/07/odnwo/ME/PRIVATE/%E6%B2%88%E7%BF%8A/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password" data-whm="wrong check result">  <script id="hbeData" type="hbeData" data-hmacdigest="5d7f8f62e00f73b69f5dc1430ec6bf8480ca3b8701d98557c47d7c6b72ae59a9">1c4f476f3e7125f5cf24ac6b2eb457936d649b4d9da5204981a971041ff25a851236707f5ca517153abf348fb9b1aa3f1709146e30e72911c5820c626eaa8a3cbcc59b0a1f307187d8a9a5d30f4c788b45f7926c7d4ad71634dc18ca36cc4290aec32d8878d12b907a28e7648315264054efc2b58ceccbcc9568cffde6ad537765c4f8da45cb7ccbcf9e4243d129b5ad8b2c5c16f93439ea0c425cbb7694cbdbc353cf94478e70c78795f0e1a77530abee9da1e6cba0ffe1a1fa5ffa62fcfab8e93c58f3a2fb25ad3865c2555d48c0a7129703998940d068afb9269c4247885b436555ab9e6b9de3a1a9d11dd82d021f5e99ed255c99a71b9591bec2d2923d7f84f3d73cefb81ed05f2e11366b5e10b517b699d944b05ed14751d9cb19ce73e5470994bd61bb5383da32cd2eadedb0ade30ba6f5ce7442a7ad0e1cefcf969ede831a8eded339b9cfa2d1889c05f7faa83133c7a4ceec4e535ecf9d6d191866bcf6b4dcbb802191f80cdaf740df1c7d94eeb8a2b8b44f09c294d4ede509cf15ed7383d8ecde950c2fd9b8d5ddaa6129dc482c7fe44c6cc7664fcc0fe466b0c031cd0463739c2ebaa3e6d5d845bebf3d5414b8476505fff16e4e32a68b59257b5e0d517ebdf6bf196d6b4d1f34d6f4e687a04537224445103eab14e321bd4ceb639a69557aec054d2ecb5407412e2e1c48</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">The blog is private</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> ME </category>
          
          <category> PRIVATE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lifepath</title>
      <link href="/2025/02/07/odnwo/ME/PRIVATE/lifepath/"/>
      <url>/2025/02/07/odnwo/ME/PRIVATE/lifepath/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password" data-whm="wrong check result">  <script id="hbeData" type="hbeData" data-hmacdigest="8e0e1c6e8209056bb261fb5910ad0c2e0d24b02587c56455ae37cddb1658dd2f">1c4f476f3e7125f5cf24ac6b2eb4579305e3b16948ffe5cc6205c2b1ac9d07c488e926ed34677e3d1134b4d182bae2196fcc41d86977258013d21fb6076dcbf0878062044c1827fab774fffd5322b7280ea0fa24637d2ed68093e928688f5c9d715f61ec822b1cb71a2b2db503bbca6ebe92331cfd047fe0e8b8d12ca2858cb6b1717722522436ae6c2ea3b97ec630bc88f275348eb658d53bec64a1115ed876b89ee494e0ca54b627a303b518390a50bef683d2b4e45a19a64f724cffcbc02c1c334866600cbd6fb4ca7f3b52db04b7e5e8e5141b1bee7db2198c8503510b70e95145310ce610ea682304480b75a55794ca93fda993d469c31a6a8b69ebeaec28519bda8311b273433c27da771e0e06bf76cfc5a3d6081ccde23d1f420115b9ca0fe271c593a54782f385783f4fea3ab21ead96b8b994009b50fe67d52cd838c29f781dd76d3c8f8a8522964e77178b1a23e57c1fbbaece15f39b9706dc14ae8d2a1bd13a5c4beda1a77e5563909e2c99d6556dffa58c2430543e341b669a5f34b99830914564f3d6a27c4515359e323ad5f59e7d80433c931740f75973f088e60839cccd928be68f6b705299a9dd3f4b28f2347e2263a9ae218afbd07056595a4c3a33a3dff102dc321724f4fda9bd67a638ce7b3cca7192a72dd7e87e866d625911b0c8364d57c4682556a3fa0ccdd546e074c412ec5cac3d7497dac672cf8b88793a2d0a3d97e1130bcc1962e8afc6d9a2eedbe42f8b037724d72ee8a45f7dc76a828378cb71ad9324d78221c88f12fc6a6b5c7e405f5951881df99c466fa6c32c972245aaf15e0ab963a0b75edf1ffc22a0fd966e3b4ff75c492991e8393b2df94e1fd0c5add61cb2f60284da236b10e629b6c4cf64d397677fa847cc4daf3261df7458f1b383add04b99237593c9c478b34191512031d1e8a61b0d882cc242a0644857b29bfef04e89aaff98fe9b828c56f282c0087d58d3474f9d584b80c07a72f9a9bb6ece4df684a5c3175ccdfa9a076fb71a7a5afb3d15d7364d0add2ba2bfe968a00f9bb8672077b54525d7b306c5f9600233817434be1301c87d1fbe917ce61ab2b186c8e202ee1b4b5fb2047dfa8fa3f7dfa27724d80311ccee</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">The blog is private</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> ME </category>
          
          <category> PRIVATE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朝夕</title>
      <link href="/2025/02/07/odnwo/Entertainment/%E6%9C%9D%E5%A4%95%20-%20%E6%AA%80%E5%81%A5%E6%AC%A1/"/>
      <url>/2025/02/07/odnwo/Entertainment/%E6%9C%9D%E5%A4%95%20-%20%E6%AA%80%E5%81%A5%E6%AC%A1/</url>
      
        <content type="html"><![CDATA[<p>朝夕<br>檀健次</p><p>千万个朝夕从何说起<br>描摹一笔山前雨天外星<br>一点一滴勾勒出昨日今夕<br>和眉眼如画的你共同写意</p><p>漫过山峰的雨雾津津<br>似是看不厌走不倦的曾经<br>这一路千里共繁星 我共你走下去<br>百年与共一朝一夕</p><p>如同 云低时天下雨 你低唱的时候我动了心<br>从此 耳畔一更星三更雨 千万种声音中听见你<br>千万种声音都枯寂 听见你独白句<br>说我很想很想你<br>如读懂一幅画外音 读懂你的悲喜<br>一遍遍日久生情<br>千万场人声鼎沸里 听出你的声音<br>说我很想很想你<br>情缠绵千万个朝夕 吻犹如倾城雨<br>轻落在梦外梦里 此生有你</p><p>如同 云低时天下雨 你低唱的时候我动了心<br>从此 耳畔一更星三更雨 千万种声音中听见你<br>千万种声音都枯寂 听见你独白句<br>说我很想很想你<br>如读懂一幅画外音 读懂你的悲喜<br>一遍遍日久生情</p><p>千万场人声鼎沸里 听出你的声音<br>说我很想很想你<br>爱是在千万个朝夕 你轻唤我名字<br>我第一千零一次作出回应</p><p>千万种声音都枯寂 听见你独白句<br>说我很想很想你<br>像看懂一首曲中意 看懂你眼角情<br>一遍遍历久弥新<br>千万场人声鼎沸里 听出你的声音<br>说我很想很想你<br>漫山遍野有满天星 我满世界是你<br>慢慢地和你共度 一朝一夕</p>]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> Entertainment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>繁花落岸</title>
      <link href="/2025/02/07/odnwo/Entertainment/%E7%B9%81%E8%8A%B1%E8%90%BD%E5%B2%B8/"/>
      <url>/2025/02/07/odnwo/Entertainment/%E7%B9%81%E8%8A%B1%E8%90%BD%E5%B2%B8/</url>
      
        <content type="html"><![CDATA[<p><img src="/../../../images_pasted/%E7%B9%81%E8%8A%B1%E8%90%BD%E5%B2%B8.md/image.png" alt="alt text"></p><p>樹梢有葉不捨摘<br>情語有愧不願白<br>你看我眼睛<br>深邃的未來<br>手心密語留你猜<br>留念深夜裡輾轉<br>記憶清晨里煥然<br>忽而十餘載<br>你我再聚此海<br>翻越山脈人脈<br>只為聽見你跳動的心脈<br>你我似繁花流水<br>似塵埃落歸<br>情深一吻做點綴<br>願此生不再舉杯送誰<br>景好人美<br>指教餘生做結尾<br>你我在喧囂走散<br>在漂泊牽絆<br>千辛才重回美滿<br>大雨撒碎成鑽<br>落地匯湖畔<br>從此今生一條船<br>唯你我岸<br>樹梢有葉不捨摘<br>情語有愧不願白<br>你看我眼睛<br>深邃的未來<br>手心密語留你猜<br>留念深夜裡輾轉<br>記憶清晨里煥然<br>忽而十餘載<br>你我再聚此海<br>翻越山脈人脈<br>只為聽見你跳動的心脈<br>你我似繁花流水<br>似塵埃落歸<br>情深一吻做點綴<br>願此生不再舉杯送誰<br>景好人美<br>指教餘生做結尾<br>你我在喧囂走散<br>在漂泊牽絆<br>千辛才重回美滿<br>大雨撒碎成鑽<br>落地匯湖畔<br>從此今生一條船<br>唯你我岸<br>來年接袂成帷的街道<br>平淡中的美好<br>彼此囅然而笑<br>叩首圓緣敬天賜良宵<br>你我似繁花流水<br>似塵埃落歸<br>情深一吻做點綴<br>願此生不再舉杯送誰<br>景好人美<br>指教餘生做結尾<br>你我登蜃樓遠看<br>曾經的遺憾<br>日出到來全消散<br>驚覺一生所愛<br>其實很簡單<br>只為你我一條船<br>四海為岸</p>]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> Entertainment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>寻</title>
      <link href="/2025/02/07/odnwo/Entertainment/%E5%AF%BB%20-%20%E5%BC%A0%E7%A3%8A/"/>
      <url>/2025/02/07/odnwo/Entertainment/%E5%AF%BB%20-%20%E5%BC%A0%E7%A3%8A/</url>
      
        <content type="html"><![CDATA[<p>寻<br>张磊</p><p>尋一處小橋流水寧靜故鄉<br>讓那些疲憊的夢可以安放<br>不去想那些世俗人來人往<br>就這樣數著落葉來日方長<br>尋一件平淡無奇舒適衣裳<br>來換下越積越厚沉重的妝<br>看得到走街過巷他人眼光<br>看不到自己背上多少的傷<br>世上的路被詩人寫作山高水深<br>世上的人被追問想要怎樣一生<br>未免過分要每人都能擁有慧根<br>要麼愚笨 要麼轉身<br>黑色的夜在區分誰比誰更認真<br>黑色的眼太單純霓虹燈中圍困<br>只是停頓了一瞬很多便不可能<br>一點悔恨 一點深沉<br>尋一碗欣喜往事熬成的湯<br>來溫暖空空蕩蕩滿腹愁腸<br>撞過了年輕氣盛無數南牆<br>才發覺勇敢不敵時間一晃<br>尋一扇有人等候敞開的窗<br>結束那無休止的獨自流浪<br>曾嚮往天涯海角看看遠方<br>到最後心比世界更加空曠<br>世上的路被詩人寫作山高水深<br>世上的人被追問想要怎樣一生<br>未免過分要每人都能擁有慧根<br>要麼愚笨 要麼轉身<br>黑色的夜在區分誰比誰更認真<br>黑色的眼太單純霓虹燈中圍困<br>只是停頓了一瞬很多便不可能<br>一點悔恨 一點深沉<br>尋一把未曆滄桑的土壤<br>讓愛能夠繼續生長</p>]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> Entertainment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剧</title>
      <link href="/2025/02/07/odnwo/Entertainment/%E5%89%A7/"/>
      <url>/2025/02/07/odnwo/Entertainment/%E5%89%A7/</url>
      
        <content type="html"><![CDATA[<p>人间烟火花小厨<br>猎罪图鉴</p>]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> Entertainment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>随记</title>
      <link href="/2025/02/07/Life/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0/"/>
      <url>/2025/02/07/Life/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> 随记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>希望，永远都在</title>
      <link href="/2025/02/07/Life/Reading/%E5%B8%8C%E6%9C%9B%E6%B0%B8%E8%BF%9C%E9%83%BD%E5%9C%A8/"/>
      <url>/2025/02/07/Life/Reading/%E5%B8%8C%E6%9C%9B%E6%B0%B8%E8%BF%9C%E9%83%BD%E5%9C%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> Reading </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>希望，永远都在</title>
      <link href="/2025/02/07/Life/Reading/%E9%9A%8F%E6%9C%BA%E6%BC%AB%E6%AD%A5%E7%9A%84%E5%82%BB%E7%93%9C/"/>
      <url>/2025/02/07/Life/Reading/%E9%9A%8F%E6%9C%BA%E6%BC%AB%E6%AD%A5%E7%9A%84%E5%82%BB%E7%93%9C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> Reading </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>台湾签证</title>
      <link href="/2025/02/07/Life/Trip/%E5%8F%B0%E6%B9%BE%E7%AD%BE%E8%AF%81/"/>
      <url>/2025/02/07/Life/Trip/%E5%8F%B0%E6%B9%BE%E7%AD%BE%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>还没有办，有点小麻烦。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> Trip </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>量化交易</title>
      <link href="/2025/02/07/Invest/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
      <url>/2025/02/07/Invest/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password" data-whm="wrong check result">  <script id="hbeData" type="hbeData" data-hmacdigest="82c7e1756e92deb7f51b0b26355f6803b633b912b0f258151bee1775fad2409a">1c4f476f3e7125f5cf24ac6b2eb45793c2810bbd0529d7a6b0a585ea1805f325789dcf97df5fd4bfa53fbfa50ac501bb8846e25a974de763f3e1e6b7a296576f3852e98cf8703128e676c5897c85749ed35c6e5d2d5d010da40e687ea30bb9dae7c873a1b161972d303a5d866807d21c77067c462de13c7ee943963d7b9f204f1f0d463b383fce445c98d5fb219e8257640d111ef17d98a19c7cd49473756fa38d84ad47e80b90552e21732e5cf5a24de455cd9213c25b645082ee67bd604d52d57607b8decd072c4de19016da25976a8fa3dc8bc3e1d3c52d45454907e6063d18f546d9aab62fbd64b30f045e539fff598623ae579791c0fcf1793138b99868e342129c7448cddd02f74c5846f5df79e2e3a3b0199b8d904e91e1cfe3eb6a6e7a4f7b586d39aa5d2b3d985db9e80c9b657a94f2107fc9fbaea4bb80228a80ffef8ad3b62905cb1516de2134ac2f72ac16259bce5c4c24744f07e455cc680755a586a953f37340d7c8a22d9b38c4b426c8e435aabc13fc63ec8c65ada6f8bbe59c0d265e61285e484bd995be71aa7e94b16748e7b92d83a6ca8810746db1746d39ed3b6953dfc89701c3cbc25a8dffd0360cec8f1830a46a0c1d313c0801d90931213b85ae2c900878e561d29e3bed84eccefc8d922670f76bac12936f0cf4427e06994d87950cc6a4621c14645a8c238e9a20b8289d1fe655f059c73fb25ff17f12cd325561b65ae0274fc0a999ca3b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">The blog is private</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Invest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大国大城</title>
      <link href="/2025/02/07/Life/Reading/%E5%A4%A7%E5%9B%BD%E5%A4%A7%E5%9F%8E/"/>
      <url>/2025/02/07/Life/Reading/%E5%A4%A7%E5%9B%BD%E5%A4%A7%E5%9F%8E/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> Reading </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode schedule</title>
      <link href="/2025/01/13/work/Leetcode/schedule/"/>
      <url>/2025/01/13/work/Leetcode/schedule/</url>
      
        <content type="html"><![CDATA[<p>看看时间对不对，自定义时间是2025-01-13 10:30:00<br>可以，是生效的，非常满意</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>virtio</title>
      <link href="/2024/05/30/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/QUMU/virtio/"/>
      <url>/2024/05/30/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/QUMU/virtio/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/virtio-1.jpg" alt="Image"><br><img src="/images/virtio-2.jpg" alt="Image"><br>vring 包含三个成员：<br>vring_desc 指向分配的内存块，用于存放客户机和 qemu 之间传输的数据。<br>avail-&gt;ring[]是发送端维护的环形队列，指向需要接收端处理的 vring_desc。<br>used-&gt;ring[]是接收端维护的环形队列，指向自己已经处理过了的 vring_desc。</p><p>这个过程中有拷贝吗？没有<br><img src="/images/virtio-3.jpg" alt="Image"></p><p><img src="/../../../../images_pasted/virtio.md/image-1.png" alt="alt text"></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> QUMU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>singapore_trip</title>
      <link href="/2024/05/30/Life/Trip/singapore_trip/"/>
      <url>/2024/05/30/Life/Trip/singapore_trip/</url>
      
        <content type="html"><![CDATA[<p><strong>Day1:</strong><br>上午：樟宜机场（大瀑布，镜子迷宫，星空花园）<br>下午：<br>滨海湾花园<br>鱼尾狮<br>super tree灯光秀（7:45，8.45），极光（每周六周日9.00-9.30，每周一：8.00-8.30）<br>赌场<br><strong>Day2:</strong><br>圣淘沙<br>上午：海洋馆<br>下午：圣淘沙（海滩），环球影城（待定）<br><strong>Day3:</strong><br>上午+下午：植物园<br>晚上：夜间动物园<br><strong>Day4:</strong><br>新加坡国立大 or 南阳理工大学<br><strong>Day5:</strong> 东海岸骑行<br><strong>Day6:</strong> 新加坡博物馆，国家美术馆<br><strong>Day7:</strong> 乌节路逛街，克拉克码头游船</p><p>还有一些其他的：牛车水，小印度，圣安德烈大教堂，福康宁公园</p><p>吃的：Polute，田鸡粥，肉骨茶，榴莲，辣椒螃蟹，莆田福建菜，珍宝海鲜，亚坤（连锁早餐店，经典套餐是：咖啡&#x2F;椰浆三明治&#x2F;水波蛋），了凡油鸡饭</p><p>景点介绍：<br>黑色线下面是新加坡。红色标注出来的是要逛的景点，具体在上面文字里（图片展示太拥挤）。<br>把每天大概的活动区域圈出来了。</p><p><img src="/../../../../images_pasted/singapore_trip.md/image.jpeg" alt="alt text"></p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> Trip </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>systemctl</title>
      <link href="/2024/04/01/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/systmd/systemctl/"/>
      <url>/2024/04/01/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/systmd/systemctl/</url>
      
        <content type="html"><![CDATA[<p>systemctl –user list-unit-files –type&#x3D;service</p><p>systemctl –user start xxx.service<br>systemctl –user stop xxx.service</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> systmd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>blog目录结构</title>
      <link href="/2024/03/31/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/2024/03/31/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<ul><li>随记</li><li>Work<ul><li>项目相关<ul><li>brpc</li><li>rdma</li><li>service mesh</li><li>用户态协议栈</li></ul></li><li>技术学习<ul><li>编程语言<ul><li>C++</li><li>golang</li><li>rust</li></ul></li><li>linux性能优化</li><li>Tools<ul><li>git</li><li>vim</li></ul></li><li>Thinking</li></ul></li></ul></li><li>Vision<ul><li>web3.0<ul><li>revolut</li><li>web3.0怎么赚钱</li><li>web3.0项目分析</li></ul></li></ul></li><li>Invest</li><li>Language</li><li>Life<ul><li>Trip</li><li>Reading</li><li>Thinking</li></ul></li><li>odnwo<ul><li>Tools</li><li>Typingclub</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络时间量级</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4%E9%87%8F%E7%BA%A7/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4%E9%87%8F%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>ping 8.8.8.8，约为45-50ms<br>ping 114.114.114.114，约为15-20ms</p><p>内存访问时间：<br><img src="/images/memory-latency-2.png" alt="Image"></p><p>存储器的顶层是 CPU 中的寄存器，它们用和 CPU 一样的材料制成，所以和 CPU 一样快。<br>高速缓存命中通常需要花费两个时钟周期。缓存未命中需要从内存中提取，这会消耗大量的时间。高速缓存行会限制容量的大小因为它的造价非常昂贵。有一些机器会有两个或者三个高速缓存级别，每一级高速缓存比前一级慢且容量更大。</p><p>控制器<br>驱动程序<br>设备</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>遇到内存泄露问题怎么处理</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E9%81%87%E5%88%B0%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E9%81%87%E5%88%B0%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ol><li><p>vmstat查看内存变化<br>从输出中你可以看到，内存的 free 列在不停的变化，并且是下降趋势；而 buffer 和 cache 基本保持不变。未使用内存在逐渐减小，而 buffer 和 cache 基本不变，这说明，系统中使用的内存一直在升高。<br>但这并不能说明有内存泄漏，因为应用程序运行中需要的内存也可能会增大。比如说，程序中如果用了一个动态增长的数组来缓存计算结果，占用内存自然会增长。<br>你应该想到了用 top 或 ps 来观察进程的内存使用情况，然后找出内存使用一直增长的进程，最后再通过 pmap 查看进程的内存分布。<br>这里，我介绍一个专门用来检测内存泄漏的工具，memleak。memleak 可以跟踪系统或指定进程的内存分配、释放请求，然后定期输出一个未释放内存和相应调用栈的汇总情况（默认 5 秒）。</p></li><li><p>gperftools 工具</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高性能做了什么事情</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E9%AB%98%E6%80%A7%E8%83%BD%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%E4%BA%8B%E6%83%85/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E9%AB%98%E6%80%A7%E8%83%BD%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%E4%BA%8B%E6%83%85/</url>
      
        <content type="html"><![CDATA[<p>1.零拷贝<br>优化前内核协议栈的拷贝情况：<br>发送方向：1. 从用户态拷贝到内核态；<br>接收方向：1. 从内核态拷贝到用户态；<br>目前这两次拷贝可以省略，IOBuf</p><ul><li>Block分配托管，利用thread local缓存降低分配开销</li><li>Block释放托管，利用自动引用计数省去上层手动释放的复杂度</li><li>零拷贝，IOBuf之间的数据append操作只需在链表中增加节点即可<br>2.线程切换：一个连接的所有逻辑都在一个core上处理，减少了线程切换带来的开销；<br>为什么线程切换会带来性能损耗？<br>3.cache命中率：一个连接的所有逻辑都在一个core上处理，提高了缓存命中率</li></ul><ol><li>cpu硬件预读取，尽量写出内存连续的代码<br>for (int i<br>for (int j<br>数组利用了cacheline的连续加载特性，对缓存更友好，性能会更好<br>4.无锁：一个连接的所有逻辑都在一个core上处理，不需要加锁<br>加锁每次能拿到锁 vs 不加锁，性能差异在哪里？</li></ol><p>5.cacheline对齐<br>Cache Line 是 CPU 和主存之间数据传输的最小单位。<br>因为CPU始终都是根据字长来访问内存，如果不进行内存对齐，那么很可能增加CPU访问内存的次数。</p><ol><li>在x86平台，cacheline的大小都是64 byte；<br>为什么是64byte，总线位宽的原因，如果读的比较少，会有点浪费总线位宽</li><li>cacheline对齐怎么做</li><li>cache伪共享<br>perf可以发现伪共享：如何发现参考<a href="https://biz.51cto.com/art/201901/590602.htm">https://biz.51cto.com/art/201901/590602.htm</a><br>6.Timer<br>最小堆实现的定时器→时间轮定时器<br>7.超线程<br>超线程的实现<br>8.池化：内存池；连接池；<br>内存池：ABA问题<br>ABA问题解决方法：<br>9.无锁数据结构<br>dpdk ring：实现原理<br>brpc里面有没有什么无锁数据结构或者逻辑<br>10.thread local变量<br>IOBuf<br>bvar<br>11.编译器优化<br>O0→O2<br>12.大页内存<br>1.为什么需要大页内存<br>减少页表项的大小<br>页表项缓存失效<br>13.NUMA<br>使用的cpu不能跨numa</li></ol><p>不同存储介质的时延：<br><img src="/images/disk-latency.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高性能队列的实现思路</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/xiekun/p/14922241.html">https://www.cnblogs.com/xiekun/p/14922241.html</a></p><p>数组 vs 链表<br>数组可以利用cacheline的连续加载，对缓存比较友好。但是扩充麻烦<br>链表，扩充简单，但是使用完之后要释放所占用的内存，频繁GC会让cpu飙升</p><p>环形数组，取余太expensive，位运算，所以，环形数组的大小为2^n<br>这样即对缓存友好，也不会频繁GC；另外，CAS无锁<br>要注意伪共享问题，此问题使用缓存行填充法解决。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>各级存储时间</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E5%90%84%E7%BA%A7%E5%AD%98%E5%82%A8%E6%97%B6%E9%97%B4/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E5%90%84%E7%BA%A7%E5%AD%98%E5%82%A8%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>CPU缓存是分为多级的，原因是热点数据太大了！最快的缓存一定离CPU核心最近，因为体积小所以容量也最小，不能满足以MB计算的热点数据。最终发展出了三级缓存，分别称为L1、L2、L3级缓存。这三级缓存的访问速度各不相同，但都远大于访问主存的速度（访问时间更小），如下图所示：</p><p><img src="/images/memory-latency.png" alt="Image"></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程编程</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>缓存<br>预处理<br>池化（内存池-dpdk的rte_mempool&#x2F;线程池&#x2F;连接池）<br>同步➡️异步<br>零拷贝<br>无锁化（Wait-free、Lock-free）<br>序列化</p><p>编译优化</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何写出高性能代码</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E9%AB%98%E6%80%A7%E8%83%BD%E4%BB%A3%E7%A0%81/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E9%AB%98%E6%80%A7%E8%83%BD%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1736392">https://cloud.tencent.com/developer/article/1736392</a><br><a href="https://cloud.tencent.com/developer/article/1736392?from=article.detail.1748429">https://cloud.tencent.com/developer/article/1736392?from=article.detail.1748429</a></p><p>ij&#x2F;ji<br>排序和遍历，哪一个先<br>C++ likely unlikely<br>多核命中率：绑核</p><p>除了对齐你的结构和字段外，如果你的结构分配了堆，你可能想要使用支持对齐分配的分配器;像_aligned_malloc（sizeof（DATA），SYSTEM_CACHE_LINE_SIZE）;否则你可能会随意虚假分享;请记住，在Windows中，默认堆具有16字节对齐。</p><p>i++和++i<br>对于基本类型比如int等，两者性能没有区别。<br>对于复合对象比如类、结构体等，++i的性能优于i++。<br>原因是i++会产生临时对象，生成一个拷贝，若拷贝对象的内容较多，则会增加很多开销。</p><p>底层实现：<br>i++的运算过程如下：<br>int temp &#x3D; i ;<br>i &#x3D; i + 1 ;<br>return temp ;<br>++i的运算过程如下：<br>return i+1;</p><p>10^47，后，才能看出性能差异</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何排查程序的性能瓶颈</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/</url>
      
        <content type="html"><![CDATA[<p>工具 &amp; 方法：火焰图<br>性能观察有两个工具：</p><ol><li>systemtap</li><li>perf</li></ol><p>perf使用比较方便，perf record生成数据，FlameGraph工具先使用脚本对数据进行分析，然后生成图片进行分析。</p><p>实例解析：<br>内存池的池化<br>发送队列：发送新数据队列和重传队列分离，可显著优化协议栈发送数据的性能<br>定时器<br>锁（每次能拿到 vs 无锁）<br>CDS元数据缓存：</p><p>发送队列：发送新数据队列和重传队列分离，可显著优化协议栈发送数据的性能<br>发送队列是一个IOBUF对象：base::IOBuf _sendbuf;</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无锁队列</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>CAS<br>ABA问题</p><p><a href="https://cloud.tencent.com/developer/article/1706184">https://cloud.tencent.com/developer/article/1706184</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>火焰图</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E7%81%AB%E7%84%B0%E5%9B%BE/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E7%81%AB%E7%84%B0%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>性能观察有两个工具：</p><ol><li>systemtap</li><li>perf</li></ol><p>perf使用比较方便，perf record生成数据，FlameGraph工具先使用脚本对数据进行分析，然后生成图片进行分析。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用户态协议栈的选择</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88%E7%9A%84%E9%80%89%E6%8B%A9/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88%E7%9A%84%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<p>mtcp<br>优点：简单<br>缺点：</p><ol><li>代码bug较多</li><li>性能：数据拷贝，收发各两次；锁；协议栈部分加锁混乱</li><li>协议栈功能仍有一定欠缺，不支持sack</li><li>拥塞控制算法揉在了tcp协议中，没有预留接口<br>稳定：NO<br>高性能：没有做到极致</li></ol><p>freebsd<br>只移植了tcp协议栈和CC算法<br>优点：稳定性好，功能全面<br>缺点：</p><ol><li>大量无关代码，也引入了大量的不可控风险，一旦出问题很难追查</li><li>太过复杂，不利于做二次开发</li><li>数据拷贝：接收一次，发送三次（发送：socket拷贝到发送队列；发送队列拷贝到实际发送的内存；再次拷贝到dpdk的rte_mbuf；接收：从接收队列拷贝到用户缓存）</li><li>锁：沿用了freebsd的设计，用到锁的地方非常多<br>fstack不支持tso gro</li></ol>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>性能测试中的一些环境查看</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%8E%AF%E5%A2%83%E6%9F%A5%E7%9C%8B/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%8E%AF%E5%A2%83%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<p>查看cpu信息：<br>cat &#x2F;proc&#x2F;cpuinfo | grep name | cut -f2 -d: | uniq -c<br>输出：56  Intel(R) Xeon(R) Gold 5117 CPU @ 2.00GHz</p><p>查看网卡在哪些cpu上：<br>cat &#x2F;sys&#x2F;class&#x2F;net&#x2F;xgbe3&#x2F;device&#x2F;local_cpulist</p><p>查看numa的cpu占用：<br>numactl —hardware</p><p>查看网卡流量：<br>sar -n DEV 1</p><p>查看端口占用情况：<br>netstat -nat|grep -i “8080”</p><p>查看cpu占用情况：<br>perf top -p 25878</p><p>配置大页内存<br>echo 8192&gt; &#x2F;sys&#x2F;kernel&#x2F;mm&#x2F;hugepages&#x2F;hugepages-2048kB&#x2F;nr_hugepages<br>mkdir &#x2F;mnt&#x2F;huge<br>mount -t hugetlbfs nodev &#x2F;mnt&#x2F;huge</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spdk处理逻辑梳理</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/spdk%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%E6%A2%B3%E7%90%86/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/spdk%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> spdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>rte_ring_create内存分配卡住问题</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/rte_ring_create%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/rte_ring_create%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近调试代码的时候发现，rte_ring_create函数中会卡住<br>具体逻辑如下：</p><p><img src="/images/spdk-rte_ring_create-block.jpg" alt="Image"></p><p>控制变量法分析后，结论如下：</p><p>假设dpdk初始化使用的网卡，该网卡所在的核为：c10-c20 c30-c48<br>并且c10-c13核被isolate</p><p>那么如果给dpdk的初始化参数中传入的cpu核为c10-c13中的两个核，如果在程序中使用pthread_create创建线程，并且在线程中分配大页内存，就会卡住<br>当给dpdk的初始化参数中传入的cpu核为c30-c48中的两个核，在程序中使用pthread_create创建线程，并且在线程中分配大页内存，就没有问题</p><p>也就是：<br>如果将isolate的核作为dpdk的参数传入，那么在程序中新创建的pthread如果不affinitize到isolate的核上，那么就不能在其上分配大页内存。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> spdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spdk无锁链表</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/spdk%E6%97%A0%E9%94%81%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/spdk%E6%97%A0%E9%94%81%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> spdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spdk plugin的使用</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/spdk%20plugin%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/spdk%20plugin%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>LD_PRELOAD&#x3D;&#x2F;home&#x2F;users&#x2F;dujing05&#x2F;SPDK&#x2F;spdk-20.04.1&#x2F;examples&#x2F;nvme&#x2F;fio_plugin&#x2F;fio_plugin fio config.fio ‘–filename&#x3D;trtype&#x3D;RDMA adrfam&#x3D;IPv4 traddr&#x3D;127.0.0.1 trsvcid&#x3D;5260 ns&#x3D;1’</p><p>[global]<br>ioengine&#x3D;spdk<br>thread&#x3D;1<br>group_reporting&#x3D;1<br>direct&#x3D;1<br>runtime&#x3D;2<br>iodepth&#x3D;128<br>rw&#x3D;randwrite<br>bs&#x3D;4k<br>size&#x3D;4k<br>norandommap&#x3D;1</p><p>[test]<br>numjobs&#x3D;1</p><p>[global]<br>ioengine&#x3D;spdk_bdev<br>spdk_conf&#x3D;&#x2F;home&#x2F;users&#x2F;dujing05&#x2F;SPDK&#x2F;spdk-20.04.1&#x2F;examples&#x2F;bdev&#x2F;fio_plugin&#x2F;bdev.conf.in<br>thread&#x3D;1<br>group_reporting&#x3D;1<br>direct&#x3D;1<br>runtime&#x3D;2<br>iodepth&#x3D;128<br>rw&#x3D;randwrite<br>bs&#x3D;4k<br>size&#x3D;4k<br>norandommap&#x3D;1</p><p>[test]<br>numjobs&#x3D;1</p><p>spdk-20.04.1&#x2F;examples&#x2F;bdev&#x2F;fio_plugin&#x2F;bdev.conf.in</p><p>[Malloc]<br>  NumberOfLuns 1<br>  LunSizeInMB 128<br>[Nvme]<br>  TransportID “trtype:RDMA adrfam&#x3D;IPv4 traddr&#x3D;127.0.0.1 trsvcid&#x3D;5260 hostaddr&#x3D;127.0.0.1 subnqn:xxx” Nvme1<br>  RetryCount 4<br>  TimeoutUsec 0<br>  AcctionOnTimeout None<br>  AdminPollRate 100000</p><p>（最终用下面的测试成功）<br>spdk-20.04.1&#x2F;examples&#x2F;nvme&#x2F;perf<br>.&#x2F;perf -c 0x3C0000000000 -q 128 -t 20 -w randread -o 4096 -r ‘trtype:RDMA adrfam:IPv4 traddr:127.0.0.1 trsvcid:5260 subnqn:xxx’</p><p>spdk编译<br>.&#x2F;configure –with-fio&#x3D;xxx&#x2F;FIO&#x2F;fio-fio-3.26 –with-dpdk&#x3D;xxx&#x2F;DPDK&#x2F;dpdk-stable-19.11.5&#x2F;x86_64-native-linuxapp-gcc –with-rdma –without-vhost</p><p>DPDK编译加如下项：<br>EXTRA_CFLAGS&#x3D;-fPIC</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> spdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spdk编译</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/spdk%E7%BC%96%E8%AF%91/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/spdk%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>解压：<br>unzip spdk-20.04.1.zip</p><p>编译：<br>指定dpdk路径和rdma选项<br>查看编译选项：.&#x2F;configure -h<br>命令：<br>.&#x2F;configure –with-dpdk&#x3D;xxx&#x2F;dpdk-stable-19.11.5&#x2F;x86_64-native-linuxapp-gcc —with-rdma</p><p>make -j</p><p>报错1：<br>error: wrong number of arguments specified for ‘deprecated’ attribute<br>与dpdk相同，设置PATH路径为编译器bin目录</p><p>报错2：<br> error: unknown type name ‘u16’<br>指定内核C_INCLUDE_PATH为inlcude目录</p><p>报错3：<br>fatal error: infiniband&#x2F;verbs.h: No such file or directory<br>C_INCLUDE_PATH环境变量加上&#x2F;usr&#x2F;include&#x2F;目录<br>至此，编译命令为：<br>PATH&#x3D;编译器bin目录:$PATH C_INCLUDE_PATH&#x3D;内核include目录:&#x2F;usr&#x2F;include&#x2F; LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib64 make -j</p><p>报错4：<br>error: storage size of ‘g_spdk_extern_vhost_ops’ isn’t known<br>查看上下文发现报错与vhost有关，在编译选项中disable掉vhost模块<br>.&#x2F;configure –with-dpdk&#x3D;&#x2F;home&#x2F;users&#x2F;dujing05&#x2F;DPDK&#x2F;dpdk-stable-19.11.5&#x2F;x86_64-native-linuxapp-gcc –with-rdma –without-vhost</p><p>报错5：<br>fatal error: libaio.h: No such file or directory<br>安装对应的库：<br>yum install libaio.x86_64 libaio-devel.x86_64</p><p>报错6：<br>CUnit&#x2F;Basic.h: No such file or directory<br>需要安装CUnit-devel<br>CUnit-devel安装步骤：<br>在网上下载：CUnit-2.1.3-13.el6.src.rpm</p><p>解压:<br>rpm2cpio CUnit-2.1.3-13.el6.src.rpm | cpio -idv<br>ls &#x2F;&#x2F; CUnit-2.1.3-13.el6.src.rpm  CUnit-2.1-3.tar.bz2  CUnit.spec<br>tar -jxvf CUnit-2.1-3.tar.bz2<br>cd CUnit-2.1-3</p><p>开始安装：<br>.&#x2F;bootstrap</p><p>报错1：<br>很多，不详细记录了<br>设置相关路径重新运行：<br>PATH&#x3D;编译器bin目录:$PATH C_INCLUDE_PATH&#x3D;内核include目录:&#x2F;usr&#x2F;include&#x2F; LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib64 .&#x2F;bootstrap</p><p>报错2：<br>仍然有很多错：<br>LIBTOOL libtool.m4 RANLIB 等<br>首先解决libtool的问题：google此错误原因为，需要安装libtool</p><ol><li>下载libtool-2.4.6.tar.gz</li><li>解压：tar -xzf libtool-2.4.6.tar.gz<br>cd libtool-2.4.6</li><li>安装<br>M4&#x3D;&#x2F;usr&#x2F;share&#x2F;aclocal .&#x2F;configure –prefix&#x3D;&#x2F;usr<br>make<br>make install<br>至此，libtool安装成功<br>上面M4环境变量是为了解决如下错误：<br>error: library used but ‘RANLIB’ is undefined<br>libtoolize:   <code>/usr/share/aclocal/libtool.m4&#39; libtoolize:   </code>&#x2F;usr&#x2F;share&#x2F;aclocal&#x2F;ltoptions.m4’<br>libtoolize:   <code>/usr/share/aclocal/ltversion.m4&#39; libtoolize:   </code>&#x2F;usr&#x2F;share&#x2F;aclocal&#x2F;ltsugar.m4’<br>libtoolize:   &#96;&#x2F;usr&#x2F;share&#x2F;aclocal&#x2F;lt~obsolete.m4’</li></ol><p>继续安装CUnit-devel<br>仍然有很多报错，还有关于libtool的<br>which libtool &#x2F;&#x2F; &#x2F;usr&#x2F;bin&#x2F;libtool<br>将&#x2F;usr&#x2F;bin&#x2F;添加为PATH的路径</p><p>至此，CUnit-devel的安装路径为：<br>PATH&#x3D;编译器bin目录:&#x2F;usr&#x2F;bin:$PATH C_INCLUDE_PATH&#x3D;内核include目录:&#x2F;usr&#x2F;include&#x2F; LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib64 .&#x2F;bootstrap</p><p>PATH&#x3D;编译器bin目录:&#x2F;usr&#x2F;bin:$PATH C_INCLUDE_PATH&#x3D;内核include目录:&#x2F;usr&#x2F;include&#x2F; LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib64 .&#x2F;configure<br>PATH&#x3D;编译器bin目录:&#x2F;usr&#x2F;bin:$PATH C_INCLUDE_PATH&#x3D;内核include目录:&#x2F;usr&#x2F;include&#x2F; LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib64 make<br>PATH&#x3D;编译器bin目录:&#x2F;usr&#x2F;bin:$PATH C_INCLUDE_PATH&#x3D;内核include目录:&#x2F;usr&#x2F;include&#x2F; LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib64 make install</p><p>这个时候查找</p><p>继续安装spdk<br>PATH&#x3D;编译器bin目录:$PATH C_INCLUDE_PATH&#x3D;内核include目录:&#x2F;usr&#x2F;include&#x2F; LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib64 make -j</p><p>报错7：<br>fatal error: CUnit&#x2F;Basic.h: No such file or directory<br>寻找缺失头文件：<br>find ..&#x2F;CUnit&#x2F; -name Basic.h     &#x2F;&#x2F; xx&#x2F;CUnit&#x2F;CUnit-2.1-3&#x2F;CUnit&#x2F;Headers&#x2F;Basic.h<br>加入此目录，仍然报错<br>返回重新安装CUnit-devel<br>发现问题是，只执行了.&#x2F;bootstrap；执行.&#x2F;configure make make install的时候没有加前面的路径<br>重新安装后，查找Basic.h头文件，find &#x2F;usr&#x2F; -name Basic.h<br>正确的输出包含如下路径：<br>&#x2F;usr&#x2F;local&#x2F;include&#x2F;CUnit&#x2F;Basic.h</p><p>步骤8：<br>在C_INCLUDE_PATH环境变量中加入如下路径：<br>&#x2F;usr&#x2F;local&#x2F;include</p><p>步骤9：<br>PATH&#x3D;编译器bin目录:$PATH C_INCLUDE_PATH&#x3D;内核include目录:&#x2F;usr&#x2F;include&#x2F;:&#x2F;usr&#x2F;local&#x2F;include LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib64 make -j</p><p>报错10：<br>cannot find -lcunit<br>在LIBRARY_PATH环境变量中添加如下路径：&#x2F;usr&#x2F;local&#x2F;lib64<br>或&#x2F;usr&#x2F;local&#x2F;include（两个路径都可以解决问题，也是奇怪）</p><p>步骤11：<br>PATH&#x3D;编译器bin目录:$PATH C_INCLUDE_PATH&#x3D;内核include目录:&#x2F;usr&#x2F;include&#x2F;:&#x2F;usr&#x2F;local&#x2F;include LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib64:&#x2F;usr&#x2F;local&#x2F;lib64 make -j</p><p>至此，spdk编译成功<br>.&#x2F;configure –with-dpdk&#x3D;&#x2F;home&#x2F;users&#x2F;dujing05&#x2F;DPDK&#x2F;dpdk-stable-19.11.5-normal&#x2F;x86_64-native-linuxapp-gcc –with-rdma –without-vhost<br>PATH&#x3D;&#x2F;opt&#x2F;compiler&#x2F;gcc-8.2&#x2F;bin&#x2F;:$PATH C_INCLUDE_PATH&#x3D;&#x2F;home&#x2F;users&#x2F;dujing05&#x2F;KERNEL-4.14&#x2F;KERNEL_4.14-36&#x2F;baidu&#x2F;kernel&#x2F;linux-4-14&#x2F;usr&#x2F;include:&#x2F;usr&#x2F;include&#x2F;:&#x2F;usr&#x2F;local&#x2F;include&#x2F; LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib64&#x2F;:&#x2F;usr&#x2F;local&#x2F;lib64 make -j</p><p>扩展：<br>–enable-debug<br>.&#x2F;configure –enable-debug –with-dpdk&#x3D;xxx&#x2F;dpdk-stable-19.11.5&#x2F;x86_64-native-linuxapp-gcc –with-rdma –without-vhost</p><p>编译后库文件目录：<br>.a文件目录：build&#x2F;lib&#x2F;<br>.h文件目录：include&#x2F;spdk&#x2F;<br>拷贝需要：cp -L</p><p>.&#x2F;configure –with-dpdk&#x3D;&#x2F;home&#x2F;users&#x2F;dujing05&#x2F;DPDK&#x2F;dpdk-stable-19.11.5&#x2F;x86_64-native-linuxapp-gcc –with-rdma –without-vhost</p><p>PATH&#x3D;&#x2F;opt&#x2F;compiler&#x2F;gcc-8.2&#x2F;bin&#x2F;:$PATH C_INCLUDE_PATH&#x3D;&#x2F;home&#x2F;users&#x2F;dujing05&#x2F;KERNEL-4.14&#x2F;KERNEL_4.14-36&#x2F;baidu&#x2F;kernel&#x2F;linux-4-14&#x2F;usr&#x2F;include:&#x2F;usr&#x2F;include&#x2F;:&#x2F;usr&#x2F;local&#x2F;include&#x2F; LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib64&#x2F;:&#x2F;usr&#x2F;local&#x2F;lib64 make -j</p><p>strings -f .&#x2F;lib&#x2F;*.a | grep “SPDK_NVMF_TRANSPORT_REGISTER”</p><p>yes | cp -L &#x2F;home&#x2F;users&#x2F;dujing05&#x2F;SPDK&#x2F;spdk-20.04.1&#x2F;include&#x2F;spdk&#x2F;<em>.h include&#x2F;spdk&#x2F;<br>yes | cp -L &#x2F;home&#x2F;users&#x2F;dujing05&#x2F;SPDK&#x2F;spdk-20.04.1&#x2F;build&#x2F;lib&#x2F;</em>.a .&#x2F;lib&#x2F;</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> spdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cpu为性能所做的</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/cpu%E4%B8%BA%E6%80%A7%E8%83%BD%E6%89%80%E5%81%9A%E7%9A%84/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/cpu%E4%B8%BA%E6%80%A7%E8%83%BD%E6%89%80%E5%81%9A%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1606993?from=article.detail.1449440">https://cloud.tencent.com/developer/article/1606993?from=article.detail.1449440</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用cpu缓存实现高性能程序</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E5%88%A9%E7%94%A8cpu%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E7%A8%8B%E5%BA%8F/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E5%88%A9%E7%94%A8cpu%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1449440">https://cloud.tencent.com/developer/article/1449440</a><br>怎么判断CPU缓存命中率现在是多少呢？在linux下可以通过perf命令轻松实现（centos下通过yum install perf安装），如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@zldfwq103 test]# perf stat -B -e cache-references,cache-misses ./test5 64</span><br><span class="line">time cost: 12283832us</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Performance counter stats for &#x27;./test5 64&#x27;:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           440,366      cache-references                                            </span><br><span class="line">           157,177      cache-misses              #   35.692 % of all cache refs    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      12.290852528 seconds time elapsed</span><br></pre></td></tr></table></figure><p>当然，perf支持很多事件，包括进程上下文切换等，上面的cache-references,cache-misses两个事件分别代表缓存命中和未命中。perf支持的事件很多，如下表所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">branch-instructions OR branches                    [Hardware event]</span><br><span class="line">  branch-misses                                      [Hardware event]</span><br><span class="line">  bus-cycles                                         [Hardware event]</span><br><span class="line">  cache-misses                                       [Hardware event]</span><br><span class="line">  cache-references                                   [Hardware event]</span><br><span class="line">  cpu-cycles OR cycles                               [Hardware event]</span><br><span class="line">  instructions                                       [Hardware event]</span><br><span class="line">  ref-cycles                                         [Hardware event]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  alignment-faults                                   [Software event]</span><br><span class="line">  context-switches OR cs                             [Software event]</span><br><span class="line">  cpu-clock                                          [Software event]</span><br><span class="line">  cpu-migrations OR migrations                       [Software event]</span><br><span class="line">  dummy                                              [Software event]</span><br><span class="line">  emulation-faults                                   [Software event]</span><br><span class="line">  major-faults                                       [Software event]</span><br><span class="line">  minor-faults                                       [Software event]</span><br><span class="line">  page-faults OR faults                              [Software event]</span><br><span class="line">  task-clock                                         [Software event]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  L1-dcache-load-misses                              [Hardware cache event]</span><br><span class="line">  L1-dcache-loads                                    [Hardware cache event]</span><br><span class="line">  L1-dcache-stores                                   [Hardware cache event]</span><br><span class="line">  L1-icache-load-misses                              [Hardware cache event]</span><br><span class="line">  LLC-load-misses                                    [Hardware cache event]</span><br><span class="line">  LLC-loads                                          [Hardware cache event]</span><br><span class="line">  LLC-store-misses                                   [Hardware cache event]</span><br><span class="line">  LLC-stores                                         [Hardware cache event]</span><br><span class="line">  branch-load-misses                                 [Hardware cache event]</span><br><span class="line">  branch-loads                                       [Hardware cache event]</span><br><span class="line">  dTLB-load-misses                                   [Hardware cache event]</span><br><span class="line">  dTLB-loads                                         [Hardware cache event]</span><br><span class="line">  dTLB-store-misses                                  [Hardware cache event]</span><br><span class="line">  dTLB-stores                                        [Hardware cache event]</span><br><span class="line">  iTLB-load-misses                                   [Hardware cache event]</span><br><span class="line">  iTLB-loads                                         [Hardware cache event]</span><br><span class="line">  node-load-misses                                   [Hardware cache event]</span><br><span class="line">  node-loads                                         [Hardware cache event]</span><br><span class="line">  node-store-misses                                  [Hardware cache event]</span><br><span class="line">  node-stores                                        [Hardware cache event]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原子操作和流水线</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%92%8C%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%92%8C%E6%B5%81%E6%B0%B4%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>总线锁：cpu和内存之间<br>缓存锁：MESI协议<br>有两种情况下处理器不会使用缓存锁定<br>1.当操作的数据不能被缓存在处理器内部，或操作的数据跨多个缓存行（cache line）时，则处理器会调用总线锁定；2.有些处理器不支持缓存锁定</p><p>处理器如何实现原子操作：32位IA-32处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。</p><p>CAS存在的问题</p><ol><li>ABA问题</li><li>循环时间长开销大</li><li>只能保证一个共享变量的原子操作<br>ABA问题<br> 解决思路：在变量前面追加版本号每次变量更新的时候把版本号加1，那么A-&gt;B-&gt;C变成1A-&gt;2B-3A。</li></ol><p>原子变量、锁、内存屏障，写得非常好！</p><p><a href="https://www.huaweicloud.com/articles/0f109d8c8bfc384562d7c8498392de5d.html">https://www.huaweicloud.com/articles/0f109d8c8bfc384562d7c8498392de5d.html</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> 用户态协议栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些疑问</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/%E4%B8%80%E4%BA%9B%E7%96%91%E9%97%AE/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/%E4%B8%80%E4%BA%9B%E7%96%91%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>nvme0n1这个dev是如何来的，真实存在在服务器上？<br>attach_volume<br>直接调用spdk_thread_send_msg发送消息到admin进程</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> spdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>debian SoftRoce使用</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/rdma/debian%20SoftRoce%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/rdma/debian%20SoftRoce%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>apt-get install libibverbs-dev librdmacm-dev rdma-core</p><p>modprobe rdma_rxe</p><p>modinfo rdma_rxe</p><p><a href="https://github.com/SoftRoCE/librxe-dev">https://github.com/SoftRoCE/librxe-dev</a><br>rxe_cfg start<br>rxe_cfg add eth0<br>rxe_cfg status<br>ibv_devices        &#x2F;&#x2F; apt-get install rdmacm-utils, apt-get install ibverbs-utils<br>ibv_devinfo<br>ibv_devinfo -v -d rxe0<br>rping -s -a ip -v -C 10<br>&#x2F;&#x2F; 上面的命令如果报错: rdma_create_event_channel: No such device<br>apt-get install librxe-dev</p><p>rping: command not found<br>apt-get install rdmacm-utils</p><p>测试：<br>rping -c -a ip -v -C 10<br>rping -s -a ip -v -C 10</p><p>.&#x2F;build&#x2F;bin&#x2F;ibv_rc_pingpong -d rxe0 -g 0<br>.&#x2F;build&#x2F;bin&#x2F;ibv_rc_pingpong -d rxe0 -g 0 server_ip</p><p>ib_send_bw -n 10000 -d rxe0 -i 1  -F —report_gbits<br>ib_send_bw -n 10000 -d rxe0 -i 1 -F –report_gbits server_ip</p><p>rping -h<br>rping -s [-vVd] [-S size] [-C count] [-a addr] [-p port]<br>rping -c [-vVd] [-S size] [-C count] -a addr [-p port]<br>    -c        client side<br>    -s        server side.  To bind to any address with IPv6 use -a ::0<br>    -v        display ping data to stdout<br>    -V        validate ping data<br>    -d        debug printfs<br>    -S size     ping data size<br>    -C count    ping count times<br>    -a addr        address<br>    -p port        port<br>    -P        persistent server mode allowing multiple connections</p><p>whereis gcc</p><p>ln -s 目标文件 要创建的软链<br>ln -snf </p><p>rping编译:<br>gcc编译多个.h .c <a href="https://www.jianshu.com/p/e5c6a255076b">https://www.jianshu.com/p/e5c6a255076b</a><br>git clone <a href="https://github.com/linux-rdma/rdma-core.git">https://github.com/linux-rdma/rdma-core.git</a><br>gcc -c common.c -o common.o<br>gcc -W -libverbs -lrdmacm -lpthread rping.c -o rping -I include&#x2F; include&#x2F;common.c    </p><p>ll &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;librdmacm.so*<br>lrwxrwxrwx 1 root root     47 Mar 22 18:11 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;librdmacm.so -&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;librdmacm.so.1.3.34.0<br>lrwxrwxrwx 1 root root     47 Mar 22 18:18 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;librdmacm.so.1 -&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;librdmacm.so.1.3.34.0<br>-rw-r–r– 1 root root  88224 Mar 22 18:10 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;librdmacm.so.1.0.0<br>-rwxr-xr-x 1 root root 473264 Mar 22 18:10 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;librdmacm.so.1.3.34.0</p><p>ll &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libibverbs*<br>-rw-r–r– 1 root root 112350 Mar 22 18:10 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libibverbs.a<br>lrwxrwxrwx 1 root root     49 Mar 22 18:14 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libibverbs.so -&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libibverbs.so.1.12.34.0<br>lrwxrwxrwx 1 root root     49 Mar 22 18:19 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libibverbs.so.1 -&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libibverbs.so.1.12.34.0<br>-rw-r–r– 1 root root  75768 Mar 22 18:10 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libibverbs.so.1.0.0<br>-rwxr-xr-x 1 root root 982160 Mar 22 18:13 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libibverbs.so.1.12.34.0</p><p>.&#x2F;rping: &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;librdmacm.so.1: version &#96;RDMACM_1.2’ not found (required by .&#x2F;rping)<br>报错，用如下方法修复<br>LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:&#x2F;data00&#x2F;XXX&#x2F;rdma-core&#x2F;build&#x2F;lib .&#x2F;rping -s -a ip -p 8888-v -C 1 -d -P</p><p>ibstat调试</p><p>ibstat<br>apt-get install infiniband-diags</p><p>docker exec -it a4b6e1809538 &#x2F;bin&#x2F;bash</p><p>docker stats –format “table \t\t“</p><p>apt-get install libnl-route-3-200</p><p>ibwarn: [4638] umad_init: can’t read ABI version from &#x2F;sys&#x2F;class&#x2F;infiniband_mad&#x2F;abi_version (No such file or directory): is ib_umad module loaded?<br>ibpanic: [4638] main: can’t init UMAD library: No such file or directory</p><p>modprobe ib_umad</p><p>apt-get install -y libunwind-dev</p><p>dpkg -i –force-overwrite &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archive</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> rdma </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>envoy和io_uring</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/service%20mesh/envoy%E5%92%8Cio_uring/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/service%20mesh/envoy%E5%92%8Cio_uring/</url>
      
        <content type="html"><![CDATA[<p>io_uring用户态，无锁，环形队列</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> service mesh </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>rdma硬件操作的一些命令</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/rdma/rdma%E7%A1%AC%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/rdma/rdma%E7%A1%AC%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>1.查看是否支持rdma网卡<br>lspci -v | grep Mellanox</p><p>如果这个没有信息输出，大概率是不支持的，可以在看一下目前普通网卡的情况</p><p>lspci -v | grep Network</p><p>2.确定pci地址对应的哪个网卡<br>ethtool -i eth0<br>3.用mlxconfig查看更详细的信息<br>mlxconfig -d pci_info q</p><p>找到ConnectX-6硬件的MST(Mellanox Software Tools)编号<br>mst status -v</p><p>4.查看mlx序号<br>mst status -v</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> rdma </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>epoll事件机制</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/service%20mesh/epoll%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/service%20mesh/epoll%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>Envoy和Nginx一样都是基于事件驱动的架构，这种架构的核心就是事件循环(EventLoop)。业界目前典型的几种事件循环实现主要有Libevent、Libev、Libuv、Boost.Asio等，也可以完全基于Linux系统调用epoll来实现。Envoy选择在Libevent的基础上进行了封装，实现了自己的事件循环机制，在Envoy中被称为<code>Dispatcher</code></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> service mesh </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些问题</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/service%20mesh/%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/service%20mesh/%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>RPC本身具备服务治理能力，mesh也是做服务治理的，是否功能重合？<br>dubbo正在解决此问题<br>长远来看，对于 Dubbo 这种包含服务治理能力的 RPC 协议来说无侵入方案一定不是终态。原因在于，Dubbo SDK 需要有能力感知自己是否应工作于 Servcie Mesh 模式，在这种模式下将服务治理等职责下放给 Sidecar 去完成，从而省去 SDK 在这方面的内存和 CPU 开销。</p><p>mesh是否需要序列化、反序列化消息，这一块开销很大，dubbo已经解决此问题<br>协议头采用基于 gRPC 实现的 Triple 协议。通过将 Sidecar 需要感知或变更的内容放到协议头中，完全规避需要对消息体做反序列化和序列化的动作，消息体采用什么序列化协议对于 Sidecar 完全无感。</p><p>mesh的性能开销<br>具备因 Service Mesh 出现故障的容灾能力。Dubbo 3.0 SDK 具备 Thin 和 Fat 两种模式，分别对应于工作于 Service Mesh 和非传统模式。Thin SDK 下 CPU 和内存的开销将降到最低，所节省下来的开销腾出来给 Sidecar 使用。Fat SDK 模式下则具备全面的路由治理能力，当 Service Mesh 出现故障时由 SDK 负责完成服务调用路由。</p><p>流量可视化</p><p>用户态协议栈、RDMA<br>参考：<a href="https://www.kubernetes.org.cn/9177.html">https://www.kubernetes.org.cn/9177.html</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> service mesh </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于mesh的一些思考</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/service%20mesh/%E5%85%B3%E4%BA%8Emesh%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/service%20mesh/%E5%85%B3%E4%BA%8Emesh%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>mesh的罪与罚<br>资源消耗，性能损耗<br><a href="https://zhuanlan.zhihu.com/p/68955219">https://zhuanlan.zhihu.com/p/68955219</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> service mesh </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NVME</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/NVME/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/NVME/</url>
      
        <content type="html"><![CDATA[<p><a href="https://community.mellanox.com/s/article/howto-configure-nvme-over-fabrics">https://community.mellanox.com/s/article/howto-configure-nvme-over-fabrics</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> spdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>fio plugin</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/fio%20plugin/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/fio%20plugin/</url>
      
        <content type="html"><![CDATA[<p><a href="https://open.tech2real.com/info_detail_page?id=18642#index">https://open.tech2real.com/info_detail_page?id=18642#index</a></p><p>sudo HUGEMEM&#x3D;32768 .&#x2F;scripts&#x2F;setup.sh</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> spdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>qpair</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/qpair/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/spdk/qpair/</url>
      
        <content type="html"><![CDATA[<p>每个TCP连接(TCP connection)对应于一个NVMe的qpair。在SPDK的实现中,我们依然采用group polling的方法来管理所有的TCP连接。每一个SPDK thread上运行一个TCP相关的polling group,每一个TCP连接只会被加入一个TCP polling group中,由这个polling group处理后续的所有事件,那么这个TCP连接将会被唯一的CPU core处理,这样就不会存在CPU的竞争情况</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> spdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>watch原理</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/watch%E5%8E%9F%E7%90%86/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/watch%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>问题：watch性能和连接数</p><p>多路复用：etcd v3版本就是使用grpc stream模式来处理watch的<br>watch gateway</p><p>etcd v3 API 采用了 gRPC ，而 gRPC 又利用了 HTTP&#x2F;2 TCP 链接多路复用（ multiple stream per tcp connection ），这样同一个 Client 的不同 watch 可以共享同一个 TCP 连接。</p><p>每一个watcher占用一个tcp连接<br>推断：watcher的数量首先会受到tcp连接数的限制<br>那么问题是：是一台机器tcp连接数的限制，还是乘以etcd集群节点的数量呢？<br>推断：<br>根据负载均衡的机制，watcher的数量应该是：65535*etcd集群节点数量</p><p><a href="https://www.jianshu.com/p/0c1c462c19d0">https://www.jianshu.com/p/0c1c462c19d0</a><br><a href="https://www.lixueduan.com/post/etcd/03-v3-analyze/">https://www.lixueduan.com/post/etcd/03-v3-analyze/</a><br><a href="https://www.lixueduan.com/post/etcd/05-watch/">https://www.lixueduan.com/post/etcd/05-watch/</a></p><p>当你请求 Watch 的版本号已被 etcd 压缩后，etcd 就会取消这个 watcher，这时你需要重建 watcher，才能继续监听到最新数据变化事件。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> etcd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁 茅台超卖</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%20%E8%8C%85%E5%8F%B0%E8%B6%85%E5%8D%96/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%20%E8%8C%85%E5%8F%B0%E8%B6%85%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6854573212831842311">https://juejin.cn/post/6854573212831842311</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> etcd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>架构认识</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/%E6%9E%B6%E6%9E%84%E8%AE%A4%E8%AF%86/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/%E6%9E%B6%E6%9E%84%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/etcd-arch.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> etcd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>接口负载均衡</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/%E6%8E%A5%E5%8F%A3%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/%E6%8E%A5%E5%8F%A3%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<p>重点：<br>负载均衡和Watch</p><p>接口：<br>v2提供了restful接口<br>v3提供了http(curl)和grpc接口(etcd client)；v3则也可以通过部署一个grpc-gateway实现rest访问。<br>k8s api-server也是封装了etcd client</p><p>v3版本：<br>client和server之间通过grpc通信，grpc提供了一个banlancer接口，etcd client扩展了这个接口实现了自己的负载均衡。<br>具体策略：<br>etcd定义了一个simpleBalancer结构实现了这个接口，实现了自己的负载均衡逻辑。简单地说，etcd的负载均衡策略是：类似于client v2的pinned地址的功能，即集群中去找一个能连接的节点连接上，一旦连接上，就会把另外尝试建立的长连接给关掉，只留下一个地址的连接，这个地址也就是pinAddr。然后就用这个长连接发请求，除非连接出现问题，否则会一直维持这个长连接不变。它在第一次通知grpc地址列表的时候没有打乱顺序，传入的地址发起连接是并发的过程，所以谁先建立连接，就会一直用这个连接，直到把它用坏了为止。 做成这样一个策略，应该是为了节省TCP连接考虑。<br>grpc本身有错误重试功能，如果你调用grpc的时候传入failFast是false，它就会对错误进行重试，重试的方式策略是：只有连接类型的错误才会去重试。重试就是去load balancer重新拿一个地址再次重试，但是我们在刚才负载均衡的策略中看到etcd client实现的load balancer并不适合直接拿连接，它是没有一个连接池在那里的。<br>etcd client的retry不是通过grpc自身的重试来实现的，而是它自己用一个装饰器把etcd的client包装成retry的client.<br>这里要强调的是，因为这种错误重试机制，使用etcd的client发起rpc请求时，建议在context中配置好超时时间，不然一直重试的请求会将程序阻塞不能往下运行。<br>参考链接：<a href="https://bbs.huaweicloud.com/blogs/100128">https://bbs.huaweicloud.com/blogs/100128</a></p><p>相对于 v2，v3 的主要改动点为：<br>使用grpc进行peer之间和与客户端之间通信<br>v2的store是在内存中的一棵树，v3采用抽象了一个kvstore，支持不同的后端存储数据库。增强了事务能力。<br><a href="https://www.infoq.cn/article/xe1jr8algujmppfb8abt">https://www.infoq.cn/article/xe1jr8algujmppfb8abt</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> etcd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>踩坑</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/%E8%B8%A9%E5%9D%91/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>腾讯k8s：<br><a href="https://www.jiqizhixin.com/articles/2020-07-21-17">https://www.jiqizhixin.com/articles/2020-07-21-17</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> etcd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GLIBC_2.27 not found</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/rdma/GLIBC_2.27%20not%20found/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/rdma/GLIBC_2.27%20not%20found/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6: version &#96;GLIBC_2.27’ not found问题解决方法：</p><p>strings &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 | grep GLIBC_</p><p>目前最新的版本，可以看到没有2.27</p><p>apt-cache policy libc6</p><p>误删libc<br>LD_PRELOAD&#x3D;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6.bak ln -sf &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.24.so &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> rdma </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RDMA一些库的区别</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/rdma/RDMA%E4%B8%80%E4%BA%9B%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/rdma/RDMA%E4%B8%80%E4%BA%9B%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>rdma_core<br>ibverbs<br>rdmacm</p><p><a href="https://blog.csdn.net/u013743253/article/details/120439085">https://blog.csdn.net/u013743253/article/details/120439085</a><br>rdma_cores用户态的软件协议栈<br>ibverbs依赖rdma_core<br>rdmacm连接管理，依赖ibverbs</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> rdma </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RDMA优缺点</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/rdma/RDMA%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/rdma/RDMA%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<ol><li>回退N帧，对丢包比较敏感</li><li>需要交换机配合</li><li>两端都需要是RDMA</li><li>QP太多时，因为硬件资源的限制，性能会下降</li></ol><p>用户态协议栈</p><ol><li><p>进程推出后，资源的释放问题</p></li><li><p>实体时什么</p></li><li><p>需要拷贝吗</p></li><li><p>拥塞控制</p></li></ol><p><a href="http://m.bubuko.com/infodetail-3771339.html">http://m.bubuko.com/infodetail-3771339.html</a></p><p>如图所示，发送方发送的每个数据包将由接收方确认。在从发送器到接收器的数据包传播过程中，沿路径的每个交换机利用其INT功能来插入一些数据，这些数据报告了包括时间戳（ts），队列长度（qLen），发送字节数（tx字节）和链路带宽容量（B）的信息。当接收方获取数据包时，它会将记录的所有元数据复制到ACK消息中发送回发送方。每次收到带有网络负载信息的ACK时，发送方决定如何调整其流速。<br>显然：HPCC的思路仍然是全网更紧密的配合，以达到“网络不丢包”的目的，HPCC的交换机与网卡的耦合加深了。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> rdma </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RDMA知乎专栏</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/rdma/RDMA%E7%9F%A5%E4%B9%8E%E4%B8%93%E6%A0%8F/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/rdma/RDMA%E7%9F%A5%E4%B9%8E%E4%B8%93%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/449189540">https://zhuanlan.zhihu.com/p/449189540</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> rdma </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dpdk无锁队列</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/dpdk%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/dpdk%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>生产者消费者模型</p><ul><li>The Ring Manager is a fixed-size queue, implemented as a table of</li><li>pointers. Head and tail pointers are modified atomically, allowing</li><li>concurrent access to it. It has the following features:</li><li></li><li><ul><li>FIFO (First In First Out)</li></ul></li><li><ul><li>Maximum size is fixed; the pointers are stored in a table.</li></ul></li><li><ul><li>Lockless implementation.</li></ul></li><li><ul><li>Multi- or single-consumer dequeue.</li></ul></li><li><ul><li>Multi- or single-producer enqueue.</li></ul></li><li><ul><li>Bulk dequeue.</li></ul></li><li><ul><li>Bulk enqueue.</li></ul></li><li><ul><li>Ability to select different sync modes for producer&#x2F;consumer.</li></ul></li><li><ul><li>Dequeue start&#x2F;finish (depending on consumer sync modes).</li></ul></li><li><ul><li>Enqueue start&#x2F;finish (depending on producer sync mode).</li></ul></li><li></li><li>Note: the ring implementation is not preemptible. Refer to Programmer’s</li><li>guide&#x2F;Environment Abstraction Layer&#x2F;Multiple pthread&#x2F;Known Issues&#x2F;rte_ring</li><li>for more information.</li><li></li></ul><p>参考：<br>最近被问起一个问题：dpdk无锁队列是怎么实现的？如何能支持多消费者、多生产者？CAS内部的实现原理是什么？<br>这几个问题彼此关联，层层递进。想要回答清楚，还真不容易。看了一些资料后，说说我对这几个问题的理解。<br>1、不管是多生产者写入，还是多消费者读取，在dpdk的实现中，都会经过以下三个步骤：</p><ul><li>先偏移头指针，说白了就是抢位置，这步主要是为了应对多生产者和多消费者的情况</li><li>抢到位置后写入数据或者读取数据</li><li>写入或读取完毕后，更新尾指针，让消费者可以消费刚写入的数据，或者让生产者可以写入刚消费过的空间<br>2、不管是入队列，还是出队列，都是抢先改变头节点的位置，<br>假设是入队列，则</li><li>抢先更新头指针，此时头指针被更新为下一次入队列的起始位置，此时另外一个进程也是可以同时入队列的，只是要排队修改尾指针</li><li>然后放入数据</li><li>然后更新尾指针，其他进程排队更新尾指针<br>假设是出队列，则</li><li>抢先更新头指针，此时头指针被更新为下一次出队列的起始位置，此时另外一个进程也是可以同时出队列的，只是要排队修改尾指针</li><li>然后取出数据</li><li>然后更新尾指针，其他进程排队更新尾指针<br>3、CAS: 是一个原子操作，由cpu的指令集提供该功能，它需要处理器锁住它的指令流水线来保证原子性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> dpdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dpdk绑核之后为什么操作系统就不会分配其它线程到此core</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/dpdk%E7%BB%91%E6%A0%B8%E4%B9%8B%E5%90%8E%E4%B8%BA%E4%BB%80%E4%B9%88%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B0%B1%E4%B8%8D%E4%BC%9A%E5%88%86%E9%85%8D%E5%85%B6%E5%AE%83%E7%BA%BF%E7%A8%8B%E5%88%B0%E6%AD%A4core/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/dpdk%E7%BB%91%E6%A0%B8%E4%B9%8B%E5%90%8E%E4%B8%BA%E4%BB%80%E4%B9%88%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B0%B1%E4%B8%8D%E4%BC%9A%E5%88%86%E9%85%8D%E5%85%B6%E5%AE%83%E7%BA%BF%E7%A8%8B%E5%88%B0%E6%AD%A4core/</url>
      
        <content type="html"><![CDATA[<p>时间片调度？（亲和性支持）<br>因为没有别地进程与dpdk争抢？（不是，从调度层面改变了）<br>两个dpdk进程可以绑定同一个core吗？（不确定，应该可以）</p><p>dpdk设置了线程地亲和性，Linux对此功能是有支持的</p><ul><li>Linux对线程的亲和性是有支持的，在Linux内核中，所有线程都有一个相关的数据结构，称为task_count，这个结构中和亲和性有关的是cpus_allowed位掩码，这个位掩码由n位组成，n代码逻辑核心的个数。</li><li>使用亲和性的原因是将线程和CPU绑定可以提高CPU cache的命中率，从而减少内存访问损耗，提高程序的速度。多核体系的CPU，物理核上的线程来回切换，会导致L1&#x2F;L2 cache命中率的下降，如果将线程和核心绑定的话，线程会一直在指定的核心上跑，不会被操作系统调度到别的核上，线程之间互相不干扰完成工作，节省了操作系统来回调度的时间。同时NUMA架构下，如果操作系统调度线程的时候，跨越了NUMA节点，将会导致大量的L3 cache的丢失。这样NUMA使用CPU绑定的时候，每个核心可以更专注的处理一件事情，资源被充分的利用了。</li><li>DPDK通过把线程绑定到逻辑核的方法来避免跨核任务中的切换开销，但是对于绑定运行的当前逻辑核，仍可能发生线程切换，若进一步减少其他任务对于某个特定任务的影响，在亲和性的基础上更进一步，可以采用把逻辑核从内核调度系统剥离的方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> dpdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dpdk编译</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/dpdk%E7%BC%96%E8%AF%91/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/dpdk%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>wget <a href="http://static.dpdk.org/rel/dpdk-19.11.tar.gz">http://static.dpdk.org/rel/dpdk-19.11.tar.gz</a><br>解压：<br>tar -xvf dpdk-19.11.5.tar.xz<br>修改配置文件：<br>vim config&#x2F;common_base<br>CONFIG_RTE_LIBRTE_MLX5_PMD&#x3D;y<br>make -j</p><p>报错1：<br>dpdk error: wrong number of arguments specified for ‘deprecated’ attribute<br>设置PATH路径为gcc-8.2的路径（why? TODO）</p><p>报错2：<br>numa.h numaif.h等文件找不到<br>解决这个问题的思路是：找到机器上对应的文件，然后拷贝到编译器的include目录中<br>但是机器上不一定有这两个文件<br>通过运行下面的命令安装：<br>yum install numactl-devel*x86_64<br>安装后就可以在&#x2F;usr&#x2F;include&#x2F;下面找到这两个文件了</p><p>报错3：<br>error: unknown type name ‘u16’<br>这个是内核的原因，内核下载headers就可以了<br>我们下载编译好的内核，并将C_INCLUDE_PATH路径指到其include目录中<br>需要配置的路径有：(括号表示可以不要)<br>PATH: 编译器的bin目录:$PATH<br>C_INCLUDE_PATH: 内核的include目录:(编译器的include目录):&#x2F;usr&#x2F;include&#x2F;<br>备注：内核的include目录为在【内核路径&#x2F;usr&#x2F;inlcude】<br>LIBRARY_PATH: (编译器的lib目录):&#x2F;usr&#x2F;lib64</p><p>执行命令为：<br>PATH&#x3D;xxx C_INCLUDE_PATH&#x3D;xxx LIBRARY_PATH&#x3D;xxx make -j install T&#x3D;x86_64-native-linuxapp-gcc</p><p>更细节的一些说明：<br>infiniband&#x2F;verbs.h头文件在&#x2F;usr&#x2F;include&#x2F;目录下，所以C_INCLUDE_PATH必须有&#x2F;usr&#x2F;include&#x2F;路径<br> error: wrong number of arguments specified for ‘deprecated’ attribute，此错误是因为PATH的bin目录问题</p><p>报错4：<br>fatal error: linux&#x2F;compiler-gcc8.h: No such file or directory<br>查看报错信息的上下文发现，报错出现在kni模块和igb_uio模块，我们设置其不编译<br>vim config&#x2F;defconfig_x86_64-native-linux-gcc<br>添加下面两行：<br>CONFIG_RTE_EAL_IGB_UIO&#x3D;n<br>CONFIG_RTE_KNI_KMOD&#x3D;n</p><p>知识补充：<br>#添加.so搜索路径<br>export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:&#x2F;path&#x2F;to&#x2F;lib</p><p>#添加.a搜索路径<br>LIBRARY_PATH&#x3D;$LIBRARY_PATH:&#x2F;path&#x2F;to&#x2F;lib</p><p>#添加bin搜索路径<br>export PATH&#x3D;$PATH:&#x2F;path&#x2F;to&#x2F;bin</p><p>#添加GCC的include文件搜索路径<br>export C_INCLUDE_PATH&#x3D;$C_INCLUDE_PATH:&#x2F;path&#x2F;to&#x2F;include</p><p>#添加G++的include文件搜索路径<br>export CPLUS_INCLUDE_PATH&#x3D;$CPLUS_INCLUDE_PATH:&#x2F;path&#x2F;to&#x2F;include</p><p>当环境变量和命令行选项被同时使用时，编译器按下面的次序搜索目录：</p><ol><li>从左到右搜索由命令行「-I」和「-L」指定的目录；</li><li>由环境变量，比如「C_INCLUDE_PATH」、「CPLUS_INCLUDE_PATH」和「LIBRARY_PATH」指定的目录；</li><li>默认的系统目录。</li></ol><p>参考链接：<br><a href="https://ixyzero.com/blog/archives/2840.html">https://ixyzero.com/blog/archives/2840.html</a></p><p>PATH&#x3D;&#x2F;opt&#x2F;compiler&#x2F;gcc-8.2&#x2F;bin&#x2F;:$PATH C_INCLUDE_PATH&#x3D;&#x2F;home&#x2F;users&#x2F;dujing05&#x2F;KERNEL-4.14&#x2F;KERNEL_4.14-36&#x2F;baidu&#x2F;kernel&#x2F;linux-4-14&#x2F;usr&#x2F;include:&#x2F;usr&#x2F;include&#x2F; LIBRARY_PATH&#x3D;&#x2F;opt&#x2F;compiler&#x2F;gcc-8.2&#x2F;lib:&#x2F;usr&#x2F;lib64&#x2F; make -j install T&#x3D;x86_64-native-linuxapp-gcc</p><p>yes | cp -L &#x2F;home&#x2F;users&#x2F;dujing05&#x2F;DPDK&#x2F;dpdk-stable-19.11.5&#x2F;x86_64-native-linuxapp-gcc&#x2F;lib&#x2F;* lib&#x2F;</p><p>yes | cp -L &#x2F;home&#x2F;users&#x2F;dujing05&#x2F;DPDK&#x2F;dpdk-stable-19.11.5&#x2F;x86_64-native-linuxapp-gcc&#x2F;include&#x2F;* include&#x2F;</p><p>扩展1：<br>使能debug<br>EXTRA_CFLAGS&#x3D;”-O0 -g” make -j install T&#x3D;x86_64-native-linuxapp-gcc<br>确认debug信息添加成功：readelf -S .&#x2F;x86_64-native-linuxapp-gcc&#x2F;lib&#x2F;librte_bus_dpaa.a | grep debug</p><p>dpdk编译后库文件目录：<br>.a文件目录：x86_64-native-linuxapp-gcc&#x2F;lib&#x2F;<br>.h文件目录：x86_64-native-linuxapp-gcc&#x2F;include&#x2F;</p><p>拷贝需要用cp -L</p><p>扩展2：编译lgb_uio和kni模块：<br>编译选项不变，从config&#x2F;defconfig_x86_64-native-linux-gcc中删除相关模块，重新编译即可<br>安装模块：<br>insmod </p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> dpdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>netmap和dpdk</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/netmap%E5%92%8Cdpdk/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/netmap%E5%92%8Cdpdk/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> dpdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么dpdk的内存要设计成连续的</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/%E4%B8%BA%E4%BB%80%E4%B9%88dpdk%E7%9A%84%E5%86%85%E5%AD%98%E8%A6%81%E8%AE%BE%E8%AE%A1%E6%88%90%E8%BF%9E%E7%BB%AD%E7%9A%84/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/%E4%B8%BA%E4%BB%80%E4%B9%88dpdk%E7%9A%84%E5%86%85%E5%AD%98%E8%A6%81%E8%AE%BE%E8%AE%A1%E6%88%90%E8%BF%9E%E7%BB%AD%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>官网说明：<br><a href="http://doc.dpdk.org/guides-21.02/prog_guide/mbuf_lib.html">http://doc.dpdk.org/guides-21.02/prog_guide/mbuf_lib.html</a></p><p>首先，确定的是，dpdk的内存是元数据与data区连续的<br>关于dpdk内存设计的考虑：<br>元数据与data域连续：操作方便，例如，释放、申请内存只需要一个操作<br>分开设计：灵活<br>dpdk选择了第一种设计方案</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> dpdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>etcd交互</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/etcd%E4%BA%A4%E4%BA%92/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/etcd%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<p>grpc<br>HTTP 2.0<br>TCP</p><p>分布式锁的选择<br>如果业务使用 Go 语言编写的，国内一般使用 etcd 较多，文档、书籍、最佳实践案例丰富。Consul 在国外应用比较多，中文文档及实践案例相比 etcd 较少。ZooKeeper 一般是 Java 业务使用较多，广泛应用在大数据领域。另外 Nacos 也是个非常优秀的开源项目，支持服务发现、配置管理等，是 Java 业务的热门选择。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> etcd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>etcd存储</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/etcd%E5%AD%98%E5%82%A8/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/etcd%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>key-&gt;revision:btree实现(treeIndex 模块是基于 Google 开源的内存版 btree 库实现的)<br>revision-&gt;key+value:B+树实现，boltdb</p><p>早期 etcd 线性读使用的 Raft log read，也就是说把读请求像写请求一样走一遍 Raft 的协议，基于 Raft 的日志的有序性，实现线性读。但此方案读涉及磁盘 IO 开销，性能较差，后来实现了 ReadIndex 读机制来提升读性能，满足了 Kubernetes 等业务的诉求。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> etcd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>raft协议</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/raft%E5%8D%8F%E8%AE%AE/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/etcd/raft%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>动画：<a href="http://kailing.pub/raft/index.html">http://kailing.pub/raft/index.html</a></p><p>leader选举：<br>etcd默认的心跳超时时间是100ms，竞选超时时间是1000ms.</p><p>无效选举解决方法：<br>A 节点 crash 后，再次启动成为 Follower，假设因为网络问题无法连通 B、C 节点，这时候根据状态图，我们知道它将不停自增任期号，发起选举。等 A 节点网络异常恢复后，那么现有 Leader 收到了新的任期号，就会触发新一轮 Leader 选举，影响服务的可用性。<br>然而 A 节点的数据是远远落后 B、C 的，是无法获得集群 Leader 地位的，发起的选举无效且对集群稳定性有伤害。那如何避免以上场景中的无效的选举呢？<br>在 etcd 3.4 中，etcd 引入了一个 PreVote 参数（默认 false），可以用来启用 PreCandidate 状态解决此问题，如下图所示。Follower 在转换成 Candidate 状态前，先进入 PreCandidate 状态，不自增任期号， 发起预投票。若获得集群多数节点认可，确定有概率成为 Leader 才能进入 Candidate 状态，发起选举流程。</p><p>raft复制</p><p><img src="/images/etcd-raft.jpg" alt="image"></p><p>etcd 基于 HTTP 协议实现了 peer 节点间的网络通信</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> etcd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编译为什么需要那么多内存</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E7%BC%96%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E9%82%A3%E4%B9%88%E5%A4%9A%E5%86%85%E5%AD%98/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E7%BC%96%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E9%82%A3%E4%B9%88%E5%A4%9A%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>报错：<br>virtual memory exhausted: Cannot allocate memory</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编译优化级别</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E7%BA%A7%E5%88%AB/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>默认O0<br>为什么编译优化会影响性能</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>超线程</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E8%B6%85%E7%BA%BF%E7%A8%8B/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E8%B6%85%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>物理CPU：<br>物理CPU就是插在主机上的真实的CPU硬件，在Linux下可以数不同的physical id 来确认主机的物理CPU个数。<br>cat &#x2F;proc&#x2F;cpuinfo | grep “physical id” | sort | uniq<br>physical id    : 0<br>physical id    : 1</p><p>核心数：<br>我们常常会听说多核处理器，其中的核指的就是核心数。在Linux下可以通过cores来确认主机的物理CPU的核心数。<br>cat &#x2F;proc&#x2F;cpuinfo | grep “cores” | uniq<br>cpu cores    : 14</p><p>逻辑CPU：<br>逻辑CPU跟超线程技术有联系，假如物理CPU不支持超线程的，那么逻辑CPU的数量等于核心数的数量；<br>如果物理CPU支持超线程，那么逻辑CPU的数目是核心数数目的两倍。在Linux下可以通过 processors 的数目来确认逻辑CPU的数量。<br>cat &#x2F;proc&#x2F;cpuinfo | grep “processor” | wc -l<br>56</p><p>利用dpdk的工具可以查看cpu分布情况：<br>xxx&#x2F;dpdk-stable-19.11.5&#x2F;usertools&#x2F;cpu_layout.py</p><p><img src="/images/super-thread.jpg" alt="Image"></p><p>超线程：<br>超线程是英特尔开发出来的一项技术，使得单个处理器可以象两个逻辑处理器那样运行，这样单个处理器以并行执行线程。<br>这里的单个处理器也可以理解为CPU的一个核心；这样便可以理解为什么开启了超线程技术后，逻辑CPU的数目是核心数的两倍了。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>进程跟踪命令strace pstack</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E8%BF%9B%E7%A8%8B%E8%B7%9F%E8%B8%AA%E5%91%BD%E4%BB%A4strace%20pstack/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E8%BF%9B%E7%A8%8B%E8%B7%9F%E8%B8%AA%E5%91%BD%E4%BB%A4strace%20pstack/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>锁的设计</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E9%94%81%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E9%94%81%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>brpc源码解析：<br><a href="https://github.com/ronaldo8210/brpc_source_code_analysis/blob/master/docs/futex.md">https://github.com/ronaldo8210/brpc_source_code_analysis/blob/master/docs/futex.md</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高并发性能调试</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E9%AB%98%E5%B9%B6%E5%8F%91%E6%80%A7%E8%83%BD%E8%B0%83%E8%AF%95%E7%BB%8F%E9%AA%8C/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E9%AB%98%E5%B9%B6%E5%8F%91%E6%80%A7%E8%83%BD%E8%B0%83%E8%AF%95%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cppfans.org/2167.html">https://cppfans.org/2167.html</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>零拷贝</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>让用户空间和内核空间操作同一个地址：虚拟内存</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dpdk demo</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/dpdk%20demo/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/dpdk%20demo/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dpdk_handling.h</span><br><span class="line">#ifndef BAIDU_SNIC_CDS_TGT_DPDK_HANDLIGN_H</span><br><span class="line"></span><br><span class="line">2 </span><br><span class="line">#define BAIDU_SNIC_CDS_TGT_DPDK_HANDLIGN_H</span><br><span class="line">3 </span><br><span class="line"></span><br><span class="line">4 </span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">5 </span><br><span class="line">#include &lt;rte_mempool.h&gt;</span><br><span class="line">6 </span><br><span class="line"></span><br><span class="line">7 </span><br><span class="line">namespace baidu &#123;</span><br><span class="line">8 </span><br><span class="line">namespace snic &#123;</span><br><span class="line">9 </span><br><span class="line">namespace cds_tgt &#123;</span><br><span class="line">10 </span><br><span class="line"></span><br><span class="line">11 </span><br><span class="line">struct DpdkDeviceOptions &#123;</span><br><span class="line">12 </span><br><span class="line">const char* dev_list; // may use bonding</span><br><span class="line">13 </span><br><span class="line">uint16_t rx_rings;</span><br><span class="line">14 </span><br><span class="line">uint16_t tx_rings;</span><br><span class="line">15 </span><br><span class="line">uint16_t rx_ring_size;</span><br><span class="line">16 </span><br><span class="line">uint16_t tx_ring_size;</span><br><span class="line">17 </span><br><span class="line">unsigned mempool_mbufs_num;</span><br><span class="line">18 </span><br><span class="line">unsigned mempool_cache_size;</span><br><span class="line">19 </span><br><span class="line">&#125;;</span><br><span class="line">20 </span><br><span class="line"></span><br><span class="line">21 </span><br><span class="line">class DpdkDevice &#123;</span><br><span class="line">22 </span><br><span class="line">public:</span><br><span class="line">23 </span><br><span class="line">DpdkDevice(const char* name, DpdkDeviceOptions options)</span><br><span class="line">24 </span><br><span class="line">: _opened(false)</span><br><span class="line">25 </span><br><span class="line">, _name(name)</span><br><span class="line">26 </span><br><span class="line">, _options(options)</span><br><span class="line">27 </span><br><span class="line">, _mempool(NULL)</span><br><span class="line">28 </span><br><span class="line">, _cpu_socket_id(-1)</span><br><span class="line">29 </span><br><span class="line">, _poll_threads_num(0)</span><br><span class="line">30 </span><br><span class="line">, _ports() &#123;</span><br><span class="line">31 </span><br><span class="line">if (!_name) &#123;</span><br><span class="line">32 </span><br><span class="line">_name = &quot;default_device&quot;;</span><br><span class="line">33 </span><br><span class="line">&#125;</span><br><span class="line">34 </span><br><span class="line">&#125;</span><br><span class="line">35 </span><br><span class="line"></span><br><span class="line">36 </span><br><span class="line">~DpdkDevice();</span><br><span class="line">37 </span><br><span class="line"></span><br><span class="line">38 </span><br><span class="line">// Open the specified ethernet devices</span><br><span class="line">39 </span><br><span class="line">int open(void);</span><br><span class="line">40 </span><br><span class="line"></span><br><span class="line">41 </span><br><span class="line">// Close the specified ethernet devices</span><br><span class="line">42 </span><br><span class="line">int close(void);</span><br><span class="line">43 </span><br><span class="line">std::vector&lt;uint16_t&gt; ports() &#123; return _ports; &#125;</span><br><span class="line">44 </span><br><span class="line">uint16_t rx_rings() &#123; return _options.rx_rings; &#125;</span><br><span class="line">45 </span><br><span class="line">uint16_t tx_rings() &#123; return _options.tx_rings; &#125;</span><br><span class="line">46 </span><br><span class="line">uint16_t poll_threads_num() &#123; return _poll_threads_num; &#125;</span><br><span class="line">47 </span><br><span class="line">struct rte_ring* rx_waiting_ring(uint16_t index) &#123;</span><br><span class="line">48 </span><br><span class="line">return _rx_waiting_rings[index];</span><br><span class="line">49 </span><br><span class="line">&#125;</span><br><span class="line">50 </span><br><span class="line">struct rte_ring* tx_waiting_ring(uint16_t index) &#123;</span><br><span class="line">51 </span><br><span class="line">return _tx_waiting_rings[index];</span><br><span class="line">52 </span><br><span class="line">&#125;</span><br><span class="line">53 </span><br><span class="line"></span><br><span class="line">54 </span><br><span class="line">struct rte_mempool* mempool() &#123; return _mempool; &#125;</span><br><span class="line">55 </span><br><span class="line"></span><br><span class="line">56 </span><br><span class="line">private:</span><br><span class="line">57 </span><br><span class="line">bool _opened;</span><br><span class="line">58 </span><br><span class="line">const char* _name;</span><br><span class="line">59 </span><br><span class="line">DpdkDeviceOptions _options;</span><br><span class="line">60 </span><br><span class="line">struct rte_mempool* _mempool;</span><br><span class="line">61 </span><br><span class="line">int _cpu_socket_id;</span><br><span class="line">62 </span><br><span class="line">uint16_t _poll_threads_num;</span><br><span class="line">63 </span><br><span class="line">std::vector&lt;uint16_t&gt; _ports;</span><br><span class="line">64 </span><br><span class="line">struct rte_ring** _rx_waiting_rings;</span><br><span class="line">65 </span><br><span class="line">struct rte_ring** _tx_waiting_rings;</span><br><span class="line">66 </span><br><span class="line">&#125;;</span><br><span class="line">67 </span><br><span class="line"></span><br><span class="line">68 </span><br><span class="line">// Currently only support one DpdkDevice</span><br><span class="line">69 </span><br><span class="line">DpdkDevice* get_dpdk_device();</span><br><span class="line">70 </span><br><span class="line"></span><br><span class="line">71 </span><br><span class="line">void dpdk_ctx_destroy(void*);</span><br><span class="line">72 </span><br><span class="line">int dpdk_rx_handle(void*);</span><br><span class="line">73 </span><br><span class="line">int dpdk_tx_handle(void*);</span><br><span class="line">74 </span><br><span class="line"></span><br><span class="line">75 </span><br><span class="line">int dpdk_send();</span><br><span class="line">76 </span><br><span class="line">int dpdk_recv();</span><br><span class="line">77 </span><br><span class="line">int dpdk_forward();</span><br><span class="line">78 </span><br><span class="line"></span><br><span class="line">79 </span><br><span class="line">int create_flow_rule();</span><br><span class="line">80 </span><br><span class="line"></span><br><span class="line">81 </span><br><span class="line">void* dpdk_handle(void*);</span><br><span class="line">82 </span><br><span class="line"></span><br><span class="line">83 </span><br><span class="line">int polar_set_core_affinitize(unsigned lcore_id);</span><br><span class="line">84 </span><br><span class="line"></span><br><span class="line">85 </span><br><span class="line">&#125; // namespace cds_tgt</span><br><span class="line">86 </span><br><span class="line">&#125; // namespace snic</span><br><span class="line">87 </span><br><span class="line">&#125; // namespace cds_tgt</span><br><span class="line">88 </span><br><span class="line"></span><br><span class="line">89 </span><br><span class="line">#endif // BAIDU_SNIC_CDS_TGT_DPDK_HANDLIGN_H</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dpdk_handling.cpp</span><br><span class="line">#include &lt;new&gt;</span><br><span class="line"></span><br><span class="line">2 </span><br><span class="line">#include &lt;base/logging.h&gt;</span><br><span class="line">3 </span><br><span class="line">#include &lt;gflags/gflags.h&gt;</span><br><span class="line">4 </span><br><span class="line">#include &lt;rte_dev.h&gt;</span><br><span class="line">5 </span><br><span class="line">#include &lt;rte_eal.h&gt;</span><br><span class="line">6 </span><br><span class="line">#include &lt;rte_ethdev.h&gt;</span><br><span class="line">7 </span><br><span class="line">#include &lt;rte_errno.h&gt;</span><br><span class="line">8 </span><br><span class="line">#include &lt;rte_launch.h&gt;</span><br><span class="line">9 </span><br><span class="line">#include &lt;rte_lcore.h&gt;</span><br><span class="line">10 </span><br><span class="line">#include &lt;rte_mbuf.h&gt;</span><br><span class="line">11 </span><br><span class="line">#include &lt;rte_mempool.h&gt;</span><br><span class="line">12 </span><br><span class="line">#include &lt;rte_ring.h&gt;</span><br><span class="line">13 </span><br><span class="line">#include &lt;net/ethernet.h&gt;</span><br><span class="line">14 </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">15 </span><br><span class="line">#include &quot;polar_thread.h&quot;</span><br><span class="line">16 </span><br><span class="line">#include &quot;dpdk_handling.h&quot;</span><br><span class="line">17 </span><br><span class="line">#include &quot;debug.h&quot;</span><br><span class="line">18 </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">19 </span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">20 </span><br><span class="line"></span><br><span class="line">21 </span><br><span class="line">namespace baidu &#123;</span><br><span class="line">22 </span><br><span class="line">namespace snic &#123;</span><br><span class="line">23 </span><br><span class="line">namespace cds_tgt &#123;</span><br><span class="line">24 </span><br><span class="line"></span><br><span class="line">25 </span><br><span class="line">DECLARE_string(dev_list);</span><br><span class="line">26 </span><br><span class="line">volatile bool g_dpdk_stop = false;</span><br><span class="line">27 </span><br><span class="line"></span><br><span class="line">28 </span><br><span class="line">static uint8_t src_mac[] = &#123; 0x98, 0x03, 0x9B, 0x94, 0xF1, 0xB1 &#125;;</span><br><span class="line">29 </span><br><span class="line">static uint8_t dst_mac[] = &#123; 0x98, 0x03, 0x9B, 0x94, 0xF1, 0xB4 &#125;;</span><br><span class="line">30 </span><br><span class="line">static uint32_t src_ip[2][4] = &#123;&#123;10, 111, 111, 4&#125;, &#123;10, 222, 222, 4&#125;&#125;;</span><br><span class="line">31 </span><br><span class="line">static uint32_t dst_ip[2][4] = &#123;&#123;10, 111, 111, 2&#125;, &#123;10, 222, 222, 2&#125;&#125;;</span><br><span class="line">32 </span><br><span class="line">#define FULL_MASK 0xffffffff</span><br><span class="line">33 </span><br><span class="line"></span><br><span class="line">34 </span><br><span class="line">#define IPV4_ADDR(a, b, c, d)(((a &amp; 0xff) &lt;&lt; 24) | ((b &amp; 0xff) &lt;&lt; 16) | \</span><br><span class="line">35 </span><br><span class="line">((c &amp; 0xff) &lt;&lt; 8) | (d &amp; 0xff))</span><br><span class="line">36 </span><br><span class="line"></span><br><span class="line">37 </span><br><span class="line">static struct rte_eth_conf g_port_conf = &#123;</span><br><span class="line">38 </span><br><span class="line">.link_speeds = 0,</span><br><span class="line">39 </span><br><span class="line">.rxmode = &#123;</span><br><span class="line">40 </span><br><span class="line">.mq_mode = ETH_MQ_RX_RSS,</span><br><span class="line">41 </span><br><span class="line">.max_rx_pkt_len = RTE_ETHER_MAX_LEN,</span><br><span class="line">42 </span><br><span class="line">.offloads = (</span><br><span class="line">43 </span><br><span class="line">DEV_RX_OFFLOAD_CHECKSUM </span><br><span class="line">44 </span><br><span class="line">),</span><br><span class="line">45 </span><br><span class="line">&#125;,</span><br><span class="line">46 </span><br><span class="line">.txmode = &#123;</span><br><span class="line">47 </span><br><span class="line">.mq_mode = ETH_MQ_TX_NONE,</span><br><span class="line">48 </span><br><span class="line">.offloads = (</span><br><span class="line">49 </span><br><span class="line">DEV_TX_OFFLOAD_IPV4_CKSUM |</span><br><span class="line">50 </span><br><span class="line">DEV_TX_OFFLOAD_UDP_CKSUM |</span><br><span class="line">51 </span><br><span class="line">DEV_TX_OFFLOAD_TCP_CKSUM |</span><br><span class="line">52 </span><br><span class="line">DEV_TX_OFFLOAD_TCP_TSO </span><br><span class="line">53 </span><br><span class="line">),</span><br><span class="line">54 </span><br><span class="line">&#125;,</span><br><span class="line">55 </span><br><span class="line">&#125;;</span><br><span class="line">56 </span><br><span class="line"></span><br><span class="line">57 </span><br><span class="line">static DpdkDevice* g_device = NULL;</span><br><span class="line">58 </span><br><span class="line">struct DpdkPollerContext &#123;</span><br><span class="line">59 </span><br><span class="line">uint16_t port_id;</span><br><span class="line">60 </span><br><span class="line">uint16_t queue_id;</span><br><span class="line">61 </span><br><span class="line">struct rte_ring* mbuf_ring;</span><br><span class="line">62 </span><br><span class="line">&#125;;</span><br><span class="line">63 </span><br><span class="line"></span><br><span class="line">64 </span><br><span class="line">DpdkDevice::~DpdkDevice() &#123;</span><br><span class="line">65 </span><br><span class="line">if (_opened) &#123;</span><br><span class="line">66 </span><br><span class="line">close();</span><br><span class="line">67 </span><br><span class="line">&#125;</span><br><span class="line">68 </span><br><span class="line">&#125;</span><br><span class="line">69 </span><br><span class="line"></span><br><span class="line">70 </span><br><span class="line">int DpdkDevice::open() &#123;</span><br><span class="line">71 </span><br><span class="line">if (_opened) &#123;</span><br><span class="line">72 </span><br><span class="line">LOG(WARNING) &lt;&lt; &quot;device has been opened: &quot; &lt;&lt; _name;</span><br><span class="line">73 </span><br><span class="line">return -1;</span><br><span class="line">74 </span><br><span class="line">&#125;</span><br><span class="line">75 </span><br><span class="line">#ifdef DEBUG_DPDK_HANDLE</span><br><span class="line">76 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;DpdkDevice::open, dev_list = &quot; &lt;&lt; FLAGS_dev_list;</span><br><span class="line">77 </span><br><span class="line">#endif</span><br><span class="line">78 </span><br><span class="line">uint16_t port_id = 0;</span><br><span class="line">79 </span><br><span class="line">_cpu_socket_id = -1;</span><br><span class="line">80 </span><br><span class="line">RTE_ETH_FOREACH_DEV(port_id) &#123;</span><br><span class="line">81 </span><br><span class="line">#ifdef DEBUG_DPDK_HANDLE</span><br><span class="line">82 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;DpdkDevice::open, port_id = &quot; &lt;&lt; port_id;</span><br><span class="line">83 </span><br><span class="line">#endif</span><br><span class="line">84 </span><br><span class="line">if (!rte_eth_dev_is_valid_port(port_id)) &#123;</span><br><span class="line">85 </span><br><span class="line">#ifdef DEBUG_DPDK_HANDLE</span><br><span class="line">86 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;DpdkDevice::open, invalid port_id = &quot; &lt;&lt; port_id;</span><br><span class="line">87 </span><br><span class="line">#endif</span><br><span class="line">88 </span><br><span class="line">continue;</span><br><span class="line">89 </span><br><span class="line">&#125;</span><br><span class="line">90 </span><br><span class="line">int cpu_socket_id = rte_eth_dev_socket_id(port_id);</span><br><span class="line">91 </span><br><span class="line">if (_cpu_socket_id == -1) &#123;</span><br><span class="line">92 </span><br><span class="line">_cpu_socket_id = cpu_socket_id;</span><br><span class="line">93 </span><br><span class="line">&#125; else if (cpu_socket_id != _cpu_socket_id) &#123;</span><br><span class="line">94 </span><br><span class="line">LOG(WARNING) &lt;&lt; &quot;all ethernet devices must be associated with the same cpu socket&quot;;</span><br><span class="line">95 </span><br><span class="line">return -1;</span><br><span class="line">96 </span><br><span class="line">&#125;</span><br><span class="line">97 </span><br><span class="line">#ifdef DEBUG_DPDK_HANDLE</span><br><span class="line">98 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;DpdkDevice::open, _cpu_socket_id = &quot; &lt;&lt; _cpu_socket_id;</span><br><span class="line">99 </span><br><span class="line">#endif</span><br><span class="line">100 </span><br><span class="line">_ports.push_back(port_id);</span><br><span class="line">101 </span><br><span class="line">&#125;</span><br><span class="line">102 </span><br><span class="line"></span><br><span class="line">103 </span><br><span class="line">for (uint16_t port : _ports) &#123;</span><br><span class="line">104 </span><br><span class="line">struct rte_flow_error error;</span><br><span class="line">105 </span><br><span class="line">memset(&amp;error, 0, sizeof(error));</span><br><span class="line">106 </span><br><span class="line">if (rte_flow_isolate(port, 1, &amp;error)) &#123;</span><br><span class="line">107 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;isloate device:&quot; &lt;&lt; port </span><br><span class="line">108 </span><br><span class="line">&lt;&lt; &quot; error type:&quot; &lt;&lt; error.type &lt;&lt; &quot; msg:&quot; &lt;&lt; error.message;</span><br><span class="line">109 </span><br><span class="line">return -1;</span><br><span class="line">110 </span><br><span class="line">&#125;</span><br><span class="line">111 </span><br><span class="line">&#125;</span><br><span class="line">112 </span><br><span class="line"></span><br><span class="line">113 </span><br><span class="line">if (_ports.empty()) &#123;</span><br><span class="line">114 </span><br><span class="line">LOG(WARNING) &lt;&lt; &quot;cannot find valid ethernet devices&quot;;</span><br><span class="line">115 </span><br><span class="line">return -1;</span><br><span class="line">116 </span><br><span class="line">&#125;</span><br><span class="line">117 </span><br><span class="line"></span><br><span class="line">118 </span><br><span class="line">_mempool = rte_pktmbuf_pool_create(_name, _options.mempool_mbufs_num,</span><br><span class="line">119 </span><br><span class="line">_options.mempool_cache_size, 0, RTE_MBUF_DEFAULT_BUF_SIZE, _cpu_socket_id);</span><br><span class="line">120 </span><br><span class="line">if (!_mempool) &#123;</span><br><span class="line">121 </span><br><span class="line">LOG(WARNING) &lt;&lt; &quot;cannot allocate mempool for ethernet devices&quot;;</span><br><span class="line">122 </span><br><span class="line">return -1;</span><br><span class="line">123 </span><br><span class="line">&#125;</span><br><span class="line">124 </span><br><span class="line">#ifdef DEBUG_DPDK_HANDLE</span><br><span class="line">125 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;DpdkDevice::open, rte_pktmbuf_pool_create&quot;</span><br><span class="line">126 </span><br><span class="line">&lt;&lt; &quot;, name = &quot; &lt;&lt; _name </span><br><span class="line">127 </span><br><span class="line">&lt;&lt; &quot;, mempool_mbufs_num = &quot; &lt;&lt; _options.mempool_mbufs_num </span><br><span class="line">128 </span><br><span class="line">&lt;&lt; &quot;, mempool_cache_size = &quot; &lt;&lt; _options.mempool_cache_size </span><br><span class="line">129 </span><br><span class="line">&lt;&lt; &quot;, cpu_socket_id = &quot; &lt;&lt; _cpu_socket_id;</span><br><span class="line">130 </span><br><span class="line">#endif</span><br><span class="line">131 </span><br><span class="line">_poll_threads_num = rte_lcore_count();</span><br><span class="line">132 </span><br><span class="line">#ifdef DEBUG_DPDK_HANDLE</span><br><span class="line">133 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;DpdkDevice::open, poll_threads_num = &quot; &lt;&lt; rte_lcore_count();</span><br><span class="line">134 </span><br><span class="line">#endif</span><br><span class="line">135 </span><br><span class="line">_rx_waiting_rings = new (std::nothrow) rte_ring*[_poll_threads_num];</span><br><span class="line">136 </span><br><span class="line">if (!_rx_waiting_rings) &#123;</span><br><span class="line">137 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;fail to allocate rte_ring&quot;;</span><br><span class="line">138 </span><br><span class="line">return -1;</span><br><span class="line">139 </span><br><span class="line">&#125;</span><br><span class="line">140 </span><br><span class="line">_tx_waiting_rings = new (std::nothrow) rte_ring*[_poll_threads_num];</span><br><span class="line">141 </span><br><span class="line">if (!_tx_waiting_rings) &#123;</span><br><span class="line">142 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;fail to allocate rte_ring&quot;;</span><br><span class="line">143 </span><br><span class="line">return -1;</span><br><span class="line">144 </span><br><span class="line">&#125;</span><br><span class="line">145 </span><br><span class="line">for (uint16_t i = 0; i &lt; _poll_threads_num; ++i) &#123;</span><br><span class="line">146 </span><br><span class="line">char name[16];</span><br><span class="line">147 </span><br><span class="line">snprintf(name, 16, &quot;rx_waiting-%d&quot;, i);</span><br><span class="line">148 </span><br><span class="line">_rx_waiting_rings[i] = rte_ring_create(name, 128, _cpu_socket_id,</span><br><span class="line">149 </span><br><span class="line">RING_F_SP_ENQ | RING_F_SC_DEQ);</span><br><span class="line">150 </span><br><span class="line">if (!_rx_waiting_rings[i]) &#123;</span><br><span class="line">151 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;fail to rte_ring_create&quot;;</span><br><span class="line">152 </span><br><span class="line">return -1;</span><br><span class="line">153 </span><br><span class="line">&#125;</span><br><span class="line">154 </span><br><span class="line">memset(name, 0, sizeof(name));</span><br><span class="line">155 </span><br><span class="line">snprintf(name, 16, &quot;tx_waiting-%d&quot;, i);</span><br><span class="line">156 </span><br><span class="line">_tx_waiting_rings[i] = rte_ring_create(name, 128, _cpu_socket_id,</span><br><span class="line">157 </span><br><span class="line">RING_F_SP_ENQ | RING_F_SC_DEQ);</span><br><span class="line">158 </span><br><span class="line">if (!_tx_waiting_rings[i]) &#123;</span><br><span class="line">159 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;fail to rte_ring_create&quot;;</span><br><span class="line">160 </span><br><span class="line">return -1;</span><br><span class="line">161 </span><br><span class="line">&#125;</span><br><span class="line">162 </span><br><span class="line">&#125;</span><br><span class="line">163 </span><br><span class="line"></span><br><span class="line">164 </span><br><span class="line">for (uint16_t port : _ports) &#123;</span><br><span class="line">165 </span><br><span class="line">if (rte_eth_dev_configure(port, _options.rx_rings, _options.tx_rings, &amp;g_port_conf) != 0) &#123;</span><br><span class="line">166 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;device cannot be configured&quot;;</span><br><span class="line">167 </span><br><span class="line">return -1;</span><br><span class="line">168 </span><br><span class="line">&#125;</span><br><span class="line">169 </span><br><span class="line">for (uint16_t i = 0; i &lt; _options.rx_rings; ++i) &#123;</span><br><span class="line">170 </span><br><span class="line">if (rte_eth_rx_queue_setup(port, i, _options.rx_ring_size, _cpu_socket_id, NULL, _mempool) != 0) &#123;</span><br><span class="line">171 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;device cannot setup rx_rings&quot;;</span><br><span class="line">172 </span><br><span class="line">return -1;</span><br><span class="line">173 </span><br><span class="line">&#125;</span><br><span class="line">174 </span><br><span class="line">Poller poller;</span><br><span class="line">175 </span><br><span class="line">poller.fn = dpdk_rx_handle;</span><br><span class="line">176 </span><br><span class="line">poller.destroy = dpdk_ctx_destroy;</span><br><span class="line">177 </span><br><span class="line">DpdkPollerContext* ctx = new (std::nothrow) DpdkPollerContext;</span><br><span class="line">178 </span><br><span class="line">if (!ctx) &#123;</span><br><span class="line">179 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;fail to allocate DpdkPollerContext&quot;;</span><br><span class="line">180 </span><br><span class="line">return -1;</span><br><span class="line">181 </span><br><span class="line">&#125;</span><br><span class="line">182 </span><br><span class="line">ctx-&gt;port_id = port;</span><br><span class="line">183 </span><br><span class="line">ctx-&gt;queue_id = i;</span><br><span class="line">184 </span><br><span class="line">ctx-&gt;mbuf_ring = _rx_waiting_rings[i % _poll_threads_num];</span><br><span class="line">185 </span><br><span class="line">poller.ctx = ctx;</span><br><span class="line">186 </span><br><span class="line">poller.name = &quot;DPDK RX&quot;;</span><br><span class="line">187 </span><br><span class="line">poll_thread_add_poller(poller, i % _poll_threads_num);</span><br><span class="line">188 </span><br><span class="line">&#125;</span><br><span class="line">189 </span><br><span class="line">for (uint16_t i = 0; i &lt; _options.tx_rings; ++i) &#123;</span><br><span class="line">190 </span><br><span class="line">if (rte_eth_tx_queue_setup(port, i, _options.tx_ring_size, _cpu_socket_id, NULL) != 0) &#123;</span><br><span class="line">191 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;device cannot setup tx_rings&quot;;</span><br><span class="line">192 </span><br><span class="line">return -1;</span><br><span class="line">193 </span><br><span class="line">&#125;</span><br><span class="line">194 </span><br><span class="line">Poller poller;</span><br><span class="line">195 </span><br><span class="line">poller.fn = dpdk_tx_handle;</span><br><span class="line">196 </span><br><span class="line">poller.destroy = dpdk_ctx_destroy;</span><br><span class="line">197 </span><br><span class="line">DpdkPollerContext* ctx = new (std::nothrow) DpdkPollerContext;</span><br><span class="line">198 </span><br><span class="line">if (!ctx) &#123;</span><br><span class="line">199 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;fail to allocate DpdkPollerContext&quot;;</span><br><span class="line">200 </span><br><span class="line">return -1;</span><br><span class="line">201 </span><br><span class="line">&#125;</span><br><span class="line">202 </span><br><span class="line">ctx-&gt;port_id = port;</span><br><span class="line">203 </span><br><span class="line">ctx-&gt;queue_id = i;</span><br><span class="line">204 </span><br><span class="line">ctx-&gt;mbuf_ring = _tx_waiting_rings[i % _poll_threads_num];</span><br><span class="line">205 </span><br><span class="line">poller.ctx = ctx;</span><br><span class="line">206 </span><br><span class="line">poller.name = &quot;DPDK TX&quot;;</span><br><span class="line">207 </span><br><span class="line">poll_thread_add_poller(poller, i % _poll_threads_num);</span><br><span class="line">208 </span><br><span class="line">&#125;</span><br><span class="line">209 </span><br><span class="line">if (rte_eth_dev_start(port) != 0) &#123;</span><br><span class="line">210 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;device cannot start&quot;;</span><br><span class="line">211 </span><br><span class="line">return -1;</span><br><span class="line">212 </span><br><span class="line">&#125;</span><br><span class="line">213 </span><br><span class="line">/*</span><br><span class="line">214 </span><br><span class="line">if (rte_eth_promiscuous_enable(port)) &#123;</span><br><span class="line">215 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;device cannot be set to promiscuous&quot;;</span><br><span class="line">216 </span><br><span class="line">return -1;</span><br><span class="line">217 </span><br><span class="line">&#125;</span><br><span class="line">218 </span><br><span class="line">*/</span><br><span class="line">219 </span><br><span class="line">&#125;</span><br><span class="line">220 </span><br><span class="line">if (create_flow_rule() != 0) &#123;</span><br><span class="line">221 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;failed to create dpdk flow rule&quot;;</span><br><span class="line">222 </span><br><span class="line">return -1;</span><br><span class="line">223 </span><br><span class="line">&#125;</span><br><span class="line">224 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;dpdk device success&quot;;</span><br><span class="line">225 </span><br><span class="line">return 0;</span><br><span class="line">226 </span><br><span class="line">&#125;</span><br><span class="line">227 </span><br><span class="line"></span><br><span class="line">228 </span><br><span class="line">int DpdkDevice::close(void) &#123;</span><br><span class="line">229 </span><br><span class="line">for (uint16_t port : _ports) &#123;</span><br><span class="line">230 </span><br><span class="line">rte_eth_dev_stop(port);</span><br><span class="line">231 </span><br><span class="line">rte_eth_dev_close(port);</span><br><span class="line">232 </span><br><span class="line">&#125;</span><br><span class="line">233 </span><br><span class="line">delete g_device;</span><br><span class="line">234 </span><br><span class="line">g_device = NULL;</span><br><span class="line">235 </span><br><span class="line">if (_mempool) &#123;</span><br><span class="line">236 </span><br><span class="line">rte_mempool_free(_mempool);</span><br><span class="line">237 </span><br><span class="line">_mempool = NULL;</span><br><span class="line">238 </span><br><span class="line">&#125;</span><br><span class="line">239 </span><br><span class="line">return 0;</span><br><span class="line">240 </span><br><span class="line">&#125;</span><br><span class="line">241 </span><br><span class="line"></span><br><span class="line">242 </span><br><span class="line">DpdkDevice* get_dpdk_device() &#123;</span><br><span class="line">243 </span><br><span class="line">if (!g_device) &#123;</span><br><span class="line">244 </span><br><span class="line">DpdkDeviceOptions options = &#123;</span><br><span class="line">245 </span><br><span class="line">.dev_list = FLAGS_dev_list.c_str(),</span><br><span class="line">246 </span><br><span class="line">.rx_rings = 2,</span><br><span class="line">247 </span><br><span class="line">.tx_rings = 2,</span><br><span class="line">248 </span><br><span class="line">.rx_ring_size = 64,</span><br><span class="line">249 </span><br><span class="line">.tx_ring_size = 64,</span><br><span class="line">250 </span><br><span class="line">.mempool_mbufs_num = 1024,</span><br><span class="line">251 </span><br><span class="line">.mempool_cache_size = 128,</span><br><span class="line">252 </span><br><span class="line">&#125;;</span><br><span class="line">253 </span><br><span class="line">g_device = new (std::nothrow) DpdkDevice(&quot;device&quot;, options);</span><br><span class="line">254 </span><br><span class="line">if (!g_device) &#123;</span><br><span class="line">255 </span><br><span class="line">LOG(WARNING) &lt;&lt; &quot;cannot create DpdkDevice&quot;;</span><br><span class="line">256 </span><br><span class="line">return NULL;</span><br><span class="line">257 </span><br><span class="line">&#125;</span><br><span class="line">258 </span><br><span class="line">&#125;</span><br><span class="line">259 </span><br><span class="line">return g_device;</span><br><span class="line">260 </span><br><span class="line">&#125;</span><br><span class="line">261 </span><br><span class="line"></span><br><span class="line">262 </span><br><span class="line">void dpdk_ctx_destroy(void* arg) &#123;</span><br><span class="line">263 </span><br><span class="line">DpdkPollerContext* ctx = static_cast&lt;DpdkPollerContext*&gt;(arg);</span><br><span class="line">264 </span><br><span class="line">delete ctx;</span><br><span class="line">265 </span><br><span class="line">&#125;</span><br><span class="line">266 </span><br><span class="line"></span><br><span class="line">267 </span><br><span class="line">int dpdk_rx_handle(void* arg) &#123;</span><br><span class="line">268 </span><br><span class="line">DpdkPollerContext* ctx = static_cast&lt;DpdkPollerContext*&gt;(arg);</span><br><span class="line">269 </span><br><span class="line">struct rte_mbuf* pkt[32];</span><br><span class="line">270 </span><br><span class="line">unsigned nb_pkts = rte_eth_rx_burst(ctx-&gt;port_id, ctx-&gt;queue_id, pkt, 32);</span><br><span class="line">271 </span><br><span class="line">for (unsigned i = 0; i &lt; nb_pkts; ++i) &#123;</span><br><span class="line">272 </span><br><span class="line">// filter MAC</span><br><span class="line">273 </span><br><span class="line">struct rte_ether_hdr* eth_hdr = rte_pktmbuf_mtod(pkt[i], struct rte_ether_hdr *);</span><br><span class="line">274 </span><br><span class="line">bool mac_equal = true;</span><br><span class="line">275 </span><br><span class="line">for (size_t k = 0; k &lt; sizeof(eth_hdr-&gt;d_addr.addr_bytes); ++k) &#123;</span><br><span class="line">276 </span><br><span class="line">if (!((eth_hdr-&gt;s_addr.addr_bytes[k] == dst_mac[k] &amp;&amp;</span><br><span class="line">277 </span><br><span class="line">eth_hdr-&gt;d_addr.addr_bytes[k] == src_mac[k]) ||</span><br><span class="line">278 </span><br><span class="line">(eth_hdr-&gt;s_addr.addr_bytes[k] == src_mac[k] &amp;&amp;</span><br><span class="line">279 </span><br><span class="line">eth_hdr-&gt;d_addr.addr_bytes[k] == dst_mac[k]))) &#123;</span><br><span class="line">280 </span><br><span class="line">mac_equal = false;</span><br><span class="line">281 </span><br><span class="line">&#125;</span><br><span class="line">282 </span><br><span class="line">&#125;</span><br><span class="line">283 </span><br><span class="line">// enqueue</span><br><span class="line">284 </span><br><span class="line">if (mac_equal) &#123;</span><br><span class="line">285 </span><br><span class="line">#ifdef DEBUG_DPDK_PKT_MESSAGE</span><br><span class="line">286 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;dpdk_rx_handle, rte_ring_enqueue&quot;;</span><br><span class="line">287 </span><br><span class="line">// printf(&quot;Port MAC: %02&quot; PRIx8 &quot; %02&quot; PRIx8 &quot; %02&quot; PRIx8</span><br><span class="line">288 </span><br><span class="line">// &quot; %02&quot; PRIx8 &quot; %02&quot; PRIx8 &quot; %02&quot; PRIx8 &quot;\n&quot;,</span><br><span class="line">289 </span><br><span class="line">// eth_hdr-&gt;s_addr.addr_bytes[0], eth_hdr-&gt;s_addr.addr_bytes[1],</span><br><span class="line">290 </span><br><span class="line">// eth_hdr-&gt;s_addr.addr_bytes[2], eth_hdr-&gt;s_addr.addr_bytes[3],</span><br><span class="line">291 </span><br><span class="line">// eth_hdr-&gt;s_addr.addr_bytes[4], eth_hdr-&gt;s_addr.addr_bytes[5]);</span><br><span class="line">292 </span><br><span class="line">// printf(&quot;Port MAC: %02&quot; PRIx8 &quot; %02&quot; PRIx8 &quot; %02&quot; PRIx8</span><br><span class="line">293 </span><br><span class="line">// &quot; %02&quot; PRIx8 &quot; %02&quot; PRIx8 &quot; %02&quot; PRIx8 &quot;\n&quot;,</span><br><span class="line">294 </span><br><span class="line">// eth_hdr-&gt;d_addr.addr_bytes[0], eth_hdr-&gt;d_addr.addr_bytes[1],</span><br><span class="line">295 </span><br><span class="line">// eth_hdr-&gt;d_addr.addr_bytes[2], eth_hdr-&gt;d_addr.addr_bytes[3],</span><br><span class="line">296 </span><br><span class="line">// eth_hdr-&gt;d_addr.addr_bytes[4], eth_hdr-&gt;d_addr.addr_bytes[5]);</span><br><span class="line">297 </span><br><span class="line">#endif</span><br><span class="line">298 </span><br><span class="line">rte_ring_enqueue(ctx-&gt;mbuf_ring, pkt[i]);</span><br><span class="line">299 </span><br><span class="line">&#125;</span><br><span class="line">300 </span><br><span class="line">&#125;</span><br><span class="line">301 </span><br><span class="line">return 0;</span><br><span class="line">302 </span><br><span class="line">&#125;</span><br><span class="line">303 </span><br><span class="line"></span><br><span class="line">304 </span><br><span class="line">int dpdk_tx_handle(void* arg) &#123;</span><br><span class="line">305 </span><br><span class="line">DpdkPollerContext* ctx = static_cast&lt;DpdkPollerContext*&gt;(arg);</span><br><span class="line">306 </span><br><span class="line">struct rte_mbuf* pkt;</span><br><span class="line">307 </span><br><span class="line">while(!rte_ring_dequeue(ctx-&gt;mbuf_ring, (void**)&amp;pkt)) &#123;</span><br><span class="line">308 </span><br><span class="line">int n_pkts = rte_eth_tx_burst(ctx-&gt;port_id, ctx-&gt;queue_id, &amp;pkt, 1);</span><br><span class="line">309 </span><br><span class="line">if (n_pkts == 0) &#123;</span><br><span class="line">310 </span><br><span class="line">LOG(WARNING) &lt;&lt; &quot;dpdk transmit ring is full or has been filled up&quot;;</span><br><span class="line">311 </span><br><span class="line">&#125; else &#123;</span><br><span class="line">312 </span><br><span class="line">#ifdef DEBUG_DPDK_PKT_MESSAGE</span><br><span class="line">313 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;dpdk_tx_handle, rte_eth_tx_burst n_pkts = &quot; &lt;&lt; n_pkts;</span><br><span class="line">314 </span><br><span class="line">#endif</span><br><span class="line">315 </span><br><span class="line">&#125;</span><br><span class="line">316 </span><br><span class="line">rte_pktmbuf_free(pkt);</span><br><span class="line">317 </span><br><span class="line">&#125;</span><br><span class="line">318 </span><br><span class="line">return 0;</span><br><span class="line">319 </span><br><span class="line">&#125;</span><br><span class="line">320 </span><br><span class="line"></span><br><span class="line">321 </span><br><span class="line">int dpdk_send() &#123;</span><br><span class="line">322 </span><br><span class="line">static int send_cnt = 0;</span><br><span class="line">323 </span><br><span class="line">// construct packet</span><br><span class="line">324 </span><br><span class="line">DpdkDevice* device = get_dpdk_device();</span><br><span class="line">325 </span><br><span class="line">if (!device) &#123;</span><br><span class="line">326 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;fail to get dpdk device&quot;;</span><br><span class="line">327 </span><br><span class="line">return -1;</span><br><span class="line">328 </span><br><span class="line">&#125;</span><br><span class="line">329 </span><br><span class="line">for (size_t i = 0; i &lt; device-&gt;tx_rings(); ++i) &#123;</span><br><span class="line">330 </span><br><span class="line">send_cnt ++;</span><br><span class="line">331 </span><br><span class="line">#ifdef DEBUG_DPDK_PKT_MESSAGE</span><br><span class="line">332 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;dpdk_send, tx_rings &quot; &lt;&lt; i;</span><br><span class="line">333 </span><br><span class="line">#endif</span><br><span class="line">334 </span><br><span class="line">struct rte_ring* tx_ring = device-&gt;tx_waiting_ring(i);</span><br><span class="line">335 </span><br><span class="line">struct rte_mbuf* pkt = rte_pktmbuf_alloc(device-&gt;mempool());</span><br><span class="line">336 </span><br><span class="line"></span><br><span class="line">337 </span><br><span class="line">// init ethernet header</span><br><span class="line">338 </span><br><span class="line">struct rte_ether_hdr* eth_hdr = rte_pktmbuf_mtod(pkt, struct rte_ether_hdr *);</span><br><span class="line">339 </span><br><span class="line">memcpy(&amp;(eth_hdr-&gt;s_addr), (struct rte_ether_addr *)(src_mac), sizeof(src_mac));</span><br><span class="line">340 </span><br><span class="line">memcpy(&amp;(eth_hdr-&gt;d_addr), (struct rte_ether_addr *)(dst_mac), sizeof(dst_mac));</span><br><span class="line">341 </span><br><span class="line">eth_hdr-&gt;ether_type = rte_cpu_to_be_16(RTE_ETHER_TYPE_IPV4);</span><br><span class="line">342 </span><br><span class="line"></span><br><span class="line">343 </span><br><span class="line">// init ipv4 header</span><br><span class="line">344 </span><br><span class="line">struct rte_ipv4_hdr* pkt_ipv4_hdr = rte_pktmbuf_mtod_offset(pkt,</span><br><span class="line">345 </span><br><span class="line">struct rte_ipv4_hdr *, sizeof(struct rte_ether_hdr));</span><br><span class="line">346 </span><br><span class="line">uint32_t src_addr = IPV4_ADDR(src_ip[i][0], src_ip[i][1], src_ip[i][2], src_ip[i][3]);</span><br><span class="line">347 </span><br><span class="line">uint32_t dst_addr = IPV4_ADDR(dst_ip[i][0], dst_ip[i][1], dst_ip[i][2], dst_ip[i][3]);</span><br><span class="line">348 </span><br><span class="line">uint16_t ipv4_pkt_data_len = 0;</span><br><span class="line">349 </span><br><span class="line">uint16_t ipv4_pkt_len = (uint16_t) (ipv4_pkt_data_len + sizeof(struct rte_ipv4_hdr));</span><br><span class="line">350 </span><br><span class="line">pkt_ipv4_hdr-&gt;version_ihl = RTE_IPV4_VHL_DEF;</span><br><span class="line">351 </span><br><span class="line">pkt_ipv4_hdr-&gt;type_of_service = 0;</span><br><span class="line">352 </span><br><span class="line">pkt_ipv4_hdr-&gt;fragment_offset = 0;</span><br><span class="line">353 </span><br><span class="line">pkt_ipv4_hdr-&gt;time_to_live = 64; // #define IP_DEFTTL 64 // from RFC 1340</span><br><span class="line">354 </span><br><span class="line">pkt_ipv4_hdr-&gt;next_proto_id = IPPROTO_UDP;</span><br><span class="line">355 </span><br><span class="line">pkt_ipv4_hdr-&gt;packet_id = 0;</span><br><span class="line">356 </span><br><span class="line">pkt_ipv4_hdr-&gt;total_length = rte_cpu_to_be_16(ipv4_pkt_len);</span><br><span class="line">357 </span><br><span class="line">pkt_ipv4_hdr-&gt;src_addr = rte_cpu_to_be_32(src_addr);</span><br><span class="line">358 </span><br><span class="line">pkt_ipv4_hdr-&gt;dst_addr = rte_cpu_to_be_32(dst_addr);</span><br><span class="line">359 </span><br><span class="line">// Compute IP header checksum</span><br><span class="line">360 </span><br><span class="line">unaligned_uint16_t *ptr16 = (unaligned_uint16_t *)pkt_ipv4_hdr;</span><br><span class="line">361 </span><br><span class="line">uint32_t ip_cksum = 0;</span><br><span class="line">362 </span><br><span class="line">ip_cksum += ptr16[0]; ip_cksum += ptr16[1];</span><br><span class="line">363 </span><br><span class="line">ip_cksum += ptr16[2]; ip_cksum += ptr16[3];</span><br><span class="line">364 </span><br><span class="line">ip_cksum += ptr16[4]; ip_cksum += ptr16[5];</span><br><span class="line">365 </span><br><span class="line">ip_cksum += ptr16[6]; ip_cksum += ptr16[7];</span><br><span class="line">366 </span><br><span class="line">ip_cksum += ptr16[8]; ip_cksum += ptr16[9];</span><br><span class="line">367 </span><br><span class="line">// Reduce 32 bit checksum to 16 bits and complement it</span><br><span class="line">368 </span><br><span class="line">ip_cksum = ((ip_cksum &amp; 0xFFFF0000) &gt;&gt; 16) +</span><br><span class="line">369 </span><br><span class="line">(ip_cksum &amp; 0x0000FFFF);</span><br><span class="line">370 </span><br><span class="line">ip_cksum %= 65536;</span><br><span class="line">371 </span><br><span class="line">ip_cksum = (~ip_cksum) &amp; 0x0000FFFF;</span><br><span class="line">372 </span><br><span class="line">if (ip_cksum == 0) &#123;</span><br><span class="line">373 </span><br><span class="line">ip_cksum = 0xFFFF;</span><br><span class="line">374 </span><br><span class="line">&#125;</span><br><span class="line">375 </span><br><span class="line">pkt_ipv4_hdr-&gt;hdr_checksum = (uint16_t) ip_cksum;</span><br><span class="line">376 </span><br><span class="line"></span><br><span class="line">377 </span><br><span class="line">// init UDP header</span><br><span class="line">378 </span><br><span class="line">uint16_t src_port = 0;</span><br><span class="line">379 </span><br><span class="line">uint16_t dst_port = 0;</span><br><span class="line">380 </span><br><span class="line">uint16_t udp_pkt_data_len = 0;</span><br><span class="line">381 </span><br><span class="line">uint16_t udp_pkt_len = (uint16_t) (udp_pkt_data_len + sizeof(struct rte_udp_hdr));</span><br><span class="line">382 </span><br><span class="line">struct rte_udp_hdr *udp_hdr = rte_pktmbuf_mtod_offset(pkt, struct rte_udp_hdr *,</span><br><span class="line">383 </span><br><span class="line">sizeof(struct rte_ether_hdr)+sizeof(struct rte_ipv4_hdr));</span><br><span class="line">384 </span><br><span class="line">udp_hdr-&gt;src_port = rte_cpu_to_be_16(src_port);</span><br><span class="line">385 </span><br><span class="line">udp_hdr-&gt;dst_port = rte_cpu_to_be_16(dst_port);</span><br><span class="line">386 </span><br><span class="line">udp_hdr-&gt;dgram_len = rte_cpu_to_be_16(udp_pkt_len);</span><br><span class="line">387 </span><br><span class="line">udp_hdr-&gt;dgram_cksum = 0; // No UDP checksum.</span><br><span class="line">388 </span><br><span class="line"></span><br><span class="line">389 </span><br><span class="line">pkt-&gt;l2_len = sizeof(struct rte_ether_hdr);</span><br><span class="line">390 </span><br><span class="line">pkt-&gt;nb_segs = 1;</span><br><span class="line">391 </span><br><span class="line">pkt-&gt;vlan_tci = RTE_ETHER_TYPE_IPV4;</span><br><span class="line">392 </span><br><span class="line">pkt-&gt;l3_len = sizeof(struct rte_ipv4_hdr);</span><br><span class="line">393 </span><br><span class="line"></span><br><span class="line">394 </span><br><span class="line">size_t hdr_size = sizeof(struct rte_ether_hdr) + sizeof(struct rte_ipv4_hdr) +</span><br><span class="line">395 </span><br><span class="line">sizeof(struct rte_udp_hdr);</span><br><span class="line">396 </span><br><span class="line">hdr_size = sizeof(struct rte_ether_hdr) + ipv4_pkt_len + udp_pkt_len;</span><br><span class="line">397 </span><br><span class="line"></span><br><span class="line">398 </span><br><span class="line">void* data = rte_pktmbuf_mtod_offset(pkt, void*, hdr_size);</span><br><span class="line">399 </span><br><span class="line">std::string message = &quot;HELLO &quot; + std::to_string(send_cnt) + &quot; aaaa aaaa aaaa aaaa&quot;;</span><br><span class="line">400 </span><br><span class="line">memcpy(data, message.c_str(), message.length());</span><br><span class="line">401 </span><br><span class="line">pkt-&gt;data_len = message.length() + hdr_size;</span><br><span class="line">402 </span><br><span class="line">#ifdef DEBUG_DPDK_PKT_MESSAGE</span><br><span class="line">403 </span><br><span class="line">uint16_t len = rte_pktmbuf_data_len(pkt);</span><br><span class="line">404 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;dpdk_send, message = &quot; &lt;&lt; (char*)data &lt;&lt; &quot;, pkt len = &quot; &lt;&lt; len;</span><br><span class="line">405 </span><br><span class="line">#endif</span><br><span class="line">406 </span><br><span class="line">// enqueue</span><br><span class="line">407 </span><br><span class="line">int err = rte_ring_enqueue(tx_ring, pkt);</span><br><span class="line">408 </span><br><span class="line">if (err) &#123;</span><br><span class="line">409 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;rte_ring_enqueue error&quot;;</span><br><span class="line">410 </span><br><span class="line">return -1;</span><br><span class="line">411 </span><br><span class="line">&#125;</span><br><span class="line">412 </span><br><span class="line">&#125;</span><br><span class="line">413 </span><br><span class="line">return 0;</span><br><span class="line">414 </span><br><span class="line">&#125;</span><br><span class="line">415 </span><br><span class="line"></span><br><span class="line">416 </span><br><span class="line">int dpdk_recv() &#123;</span><br><span class="line">417 </span><br><span class="line">DpdkDevice* device = get_dpdk_device();</span><br><span class="line">418 </span><br><span class="line">if (!device) &#123;</span><br><span class="line">419 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;fail to get dpdk device&quot;;</span><br><span class="line">420 </span><br><span class="line">return -1;</span><br><span class="line">421 </span><br><span class="line">&#125;</span><br><span class="line">422 </span><br><span class="line">int recv_count = 0;</span><br><span class="line">423 </span><br><span class="line">for (size_t i = 0; i &lt; device-&gt;rx_rings(); ++i) &#123;</span><br><span class="line">424 </span><br><span class="line">struct rte_ring* rx_ring = device-&gt;rx_waiting_ring(i);</span><br><span class="line">425 </span><br><span class="line">struct rte_mbuf* pkt;</span><br><span class="line">426 </span><br><span class="line">while (!rte_ring_dequeue(rx_ring, (void**)&amp;pkt)) &#123;</span><br><span class="line">427 </span><br><span class="line">#ifdef DEBUG_DPDK_PKT_MESSAGE</span><br><span class="line">428 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;dpdk_recv, rx_rings &quot; &lt;&lt; i;</span><br><span class="line">429 </span><br><span class="line">size_t data_offset = sizeof(struct rte_ether_hdr) + sizeof(struct rte_ipv4_hdr) +</span><br><span class="line">430 </span><br><span class="line">sizeof(struct rte_udp_hdr);</span><br><span class="line">431 </span><br><span class="line"></span><br><span class="line">432 </span><br><span class="line">void* data = rte_pktmbuf_mtod_offset(pkt, void*, data_offset);</span><br><span class="line">433 </span><br><span class="line">uint16_t len = rte_pktmbuf_data_len(pkt);</span><br><span class="line">434 </span><br><span class="line">char message[50];</span><br><span class="line">435 </span><br><span class="line">memset(message, 0, sizeof(message));</span><br><span class="line">436 </span><br><span class="line">memcpy(message, data, len &lt; 50 ? len : 50);</span><br><span class="line">437 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;dpdk_recv, message = &quot; &lt;&lt; noflush;</span><br><span class="line">438 </span><br><span class="line">for (int j = 0; j &lt; (len &lt; 50 ? len : 50); ++j) &#123;</span><br><span class="line">439 </span><br><span class="line">LOG(INFO) &lt;&lt; message[j] &lt;&lt; noflush;</span><br><span class="line">440 </span><br><span class="line">&#125;</span><br><span class="line">441 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;, pkt len = &quot; &lt;&lt; len;</span><br><span class="line">442 </span><br><span class="line">#endif</span><br><span class="line">443 </span><br><span class="line">recv_count++;</span><br><span class="line">444 </span><br><span class="line">rte_pktmbuf_free(pkt);</span><br><span class="line">445 </span><br><span class="line">&#125;</span><br><span class="line">446 </span><br><span class="line">&#125;</span><br><span class="line">447 </span><br><span class="line">return recv_count;</span><br><span class="line">448 </span><br><span class="line">&#125;</span><br><span class="line">449 </span><br><span class="line"></span><br><span class="line">450 </span><br><span class="line">int dpdk_forward() &#123;</span><br><span class="line">451 </span><br><span class="line">DpdkDevice* device = get_dpdk_device();</span><br><span class="line">452 </span><br><span class="line">if (!device) &#123;</span><br><span class="line">453 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;fail to get dpdk device&quot;;</span><br><span class="line">454 </span><br><span class="line">return -1;</span><br><span class="line">455 </span><br><span class="line">&#125;</span><br><span class="line">456 </span><br><span class="line">static int forward_cnt = 0;</span><br><span class="line">457 </span><br><span class="line">for (size_t i = 0; i &lt; device-&gt;rx_rings(); ++i) &#123;</span><br><span class="line">458 </span><br><span class="line">struct rte_ring* rx_ring = device-&gt;rx_waiting_ring(i);</span><br><span class="line">459 </span><br><span class="line">struct rte_mbuf* pkt;</span><br><span class="line">460 </span><br><span class="line">// receive packets</span><br><span class="line">461 </span><br><span class="line">while (!rte_ring_dequeue(rx_ring, (void**)&amp;pkt)) &#123;</span><br><span class="line">462 </span><br><span class="line">forward_cnt ++;</span><br><span class="line">463 </span><br><span class="line">#ifdef DEBUG_DPDK_PKT_MESSAGE</span><br><span class="line">464 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;dpdk_forward, rx_rings &quot; &lt;&lt; i;</span><br><span class="line">465 </span><br><span class="line">#endif</span><br><span class="line">466 </span><br><span class="line">// swap src_mac and dst mac</span><br><span class="line">467 </span><br><span class="line">struct rte_ether_hdr* eth_hdr = rte_pktmbuf_mtod(pkt, struct rte_ether_hdr *);</span><br><span class="line">468 </span><br><span class="line">memcpy(&amp;(eth_hdr-&gt;s_addr), (struct rte_ether_addr *)(dst_mac), sizeof(dst_mac));</span><br><span class="line">469 </span><br><span class="line">memcpy(&amp;(eth_hdr-&gt;d_addr), (struct rte_ether_addr *)(src_mac), sizeof(src_mac));</span><br><span class="line">470 </span><br><span class="line"></span><br><span class="line">471 </span><br><span class="line">size_t hdr_size = sizeof(struct rte_ether_hdr) + sizeof(struct rte_ipv4_hdr) +</span><br><span class="line">472 </span><br><span class="line">sizeof(struct rte_udp_hdr);</span><br><span class="line">473 </span><br><span class="line">#ifdef DEBUG_DPDK_PKT_MESSAGE</span><br><span class="line">474 </span><br><span class="line">// check pkt</span><br><span class="line">475 </span><br><span class="line">void* data_temp = rte_pktmbuf_mtod_offset(pkt, void*, hdr_size);</span><br><span class="line">476 </span><br><span class="line">uint16_t len_temp = rte_pktmbuf_data_len(pkt) - hdr_size;</span><br><span class="line">477 </span><br><span class="line">char message_temp[50];</span><br><span class="line">478 </span><br><span class="line">memcpy(message_temp, data_temp, len_temp &lt; 50 ? len_temp : 50);</span><br><span class="line">479 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;dpdk_forward, recv, message = &quot; &lt;&lt; noflush;</span><br><span class="line">480 </span><br><span class="line">for (int j = 0; j &lt; (len_temp &lt; 50 ? len_temp : 50); ++j) &#123;</span><br><span class="line">481 </span><br><span class="line">LOG(INFO) &lt;&lt; message_temp[j] &lt;&lt; noflush;</span><br><span class="line">482 </span><br><span class="line">&#125;</span><br><span class="line">483 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;, pkt len = &quot; &lt;&lt; len_temp + hdr_size;</span><br><span class="line">484 </span><br><span class="line">#endif</span><br><span class="line">485 </span><br><span class="line">// change message</span><br><span class="line">486 </span><br><span class="line">void* data = rte_pktmbuf_mtod_offset(pkt, void*, hdr_size);</span><br><span class="line">487 </span><br><span class="line">std::string message = &quot;WORLD &quot; + std::to_string(forward_cnt) + &quot; aaaa aaaa aaaa aaaa&quot;;</span><br><span class="line">488 </span><br><span class="line">memcpy(data, message.c_str(), message.length());</span><br><span class="line">489 </span><br><span class="line">pkt-&gt;data_len = message.length() + hdr_size;</span><br><span class="line">490 </span><br><span class="line">#ifdef DEBUG_DPDK_PKT_MESSAGE</span><br><span class="line">491 </span><br><span class="line">uint16_t len = rte_pktmbuf_data_len(pkt);</span><br><span class="line">492 </span><br><span class="line">LOG(INFO) &lt;&lt; &quot;dpdk_forward, send, message = &quot; &lt;&lt; message &lt;&lt; &quot;, pkt len = &quot; &lt;&lt; len;</span><br><span class="line">493 </span><br><span class="line">#endif</span><br><span class="line">494 </span><br><span class="line">// send packets</span><br><span class="line">495 </span><br><span class="line">struct rte_ring* tx_ring = device-&gt;tx_waiting_ring(i);</span><br><span class="line">496 </span><br><span class="line">int err = rte_ring_enqueue(tx_ring, pkt);</span><br><span class="line">497 </span><br><span class="line">if (err) &#123;</span><br><span class="line">498 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;dpdk_forward, rte_ring_enqueue error&quot;;</span><br><span class="line">499 </span><br><span class="line">return -1;</span><br><span class="line">500 </span><br><span class="line">&#125;</span><br><span class="line">501 </span><br><span class="line">&#125;</span><br><span class="line">502 </span><br><span class="line">&#125;</span><br><span class="line">503 </span><br><span class="line">return 0;</span><br><span class="line">504 </span><br><span class="line">&#125;</span><br><span class="line">505 </span><br><span class="line"></span><br><span class="line">506 </span><br><span class="line">int create_flow_rule() &#123;</span><br><span class="line">507 </span><br><span class="line">DpdkDevice* device = get_dpdk_device();</span><br><span class="line">508 </span><br><span class="line">if (!device) &#123;</span><br><span class="line">509 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;fail to get dpdk device&quot;;</span><br><span class="line">510 </span><br><span class="line">return -1;</span><br><span class="line">511 </span><br><span class="line">&#125;</span><br><span class="line">512 </span><br><span class="line">for (size_t i = 0; i &lt; device-&gt;rx_rings(); ++i) &#123;</span><br><span class="line">513 </span><br><span class="line">struct rte_flow_attr attr;</span><br><span class="line">514 </span><br><span class="line">struct rte_flow_item pattern[3];</span><br><span class="line">515 </span><br><span class="line">struct rte_flow_action action[2];</span><br><span class="line">516 </span><br><span class="line">struct rte_flow *flow = NULL;</span><br><span class="line">517 </span><br><span class="line">struct rte_flow_item_ipv4 ip_spec;</span><br><span class="line">518 </span><br><span class="line">struct rte_flow_item_ipv4 ip_mask;</span><br><span class="line">519 </span><br><span class="line"></span><br><span class="line">520 </span><br><span class="line">memset(pattern, 0, sizeof(pattern));</span><br><span class="line">521 </span><br><span class="line">memset(action, 0, sizeof(action));</span><br><span class="line">522 </span><br><span class="line"></span><br><span class="line">523 </span><br><span class="line">// set rule attribute</span><br><span class="line">524 </span><br><span class="line">memset(&amp;attr, 0, sizeof(struct rte_flow_attr));</span><br><span class="line">525 </span><br><span class="line">attr.ingress = 1;</span><br><span class="line">526 </span><br><span class="line">// create action sequence</span><br><span class="line">527 </span><br><span class="line">action[0].type = RTE_FLOW_ACTION_TYPE_QUEUE;</span><br><span class="line">528 </span><br><span class="line">struct rte_flow_action_queue queue = &#123; .index = i &#125;;</span><br><span class="line">529 </span><br><span class="line">action[0].conf = &amp;queue;</span><br><span class="line">530 </span><br><span class="line">action[1].type = RTE_FLOW_ACTION_TYPE_END;</span><br><span class="line">531 </span><br><span class="line">// set pattern</span><br><span class="line">532 </span><br><span class="line">uint32_t src_ip_addr = IPV4_ADDR(src_ip[i][0], src_ip[i][1], src_ip[i][2], src_ip[i][3]);</span><br><span class="line">533 </span><br><span class="line">uint32_t src_mask = FULL_MASK;</span><br><span class="line">534 </span><br><span class="line">uint32_t dst_ip_addr = IPV4_ADDR(dst_ip[i][0], dst_ip[i][1], dst_ip[i][2], dst_ip[i][3]);</span><br><span class="line">535 </span><br><span class="line">uint32_t dst_mask = FULL_MASK;</span><br><span class="line">536 </span><br><span class="line">pattern[0].type = RTE_FLOW_ITEM_TYPE_ETH;</span><br><span class="line">537 </span><br><span class="line"></span><br><span class="line">538 </span><br><span class="line">memset(&amp;ip_spec, 0, sizeof(struct rte_flow_item_ipv4));</span><br><span class="line">539 </span><br><span class="line">memset(&amp;ip_mask, 0, sizeof(struct rte_flow_item_ipv4));</span><br><span class="line">540 </span><br><span class="line">ip_spec.hdr.dst_addr = htonl(dst_ip_addr);</span><br><span class="line">541 </span><br><span class="line">ip_mask.hdr.dst_addr = dst_mask;</span><br><span class="line">542 </span><br><span class="line">ip_spec.hdr.src_addr = htonl(src_ip_addr);</span><br><span class="line">543 </span><br><span class="line">ip_mask.hdr.src_addr = src_mask;</span><br><span class="line">544 </span><br><span class="line">pattern[1].type = RTE_FLOW_ITEM_TYPE_IPV4;</span><br><span class="line">545 </span><br><span class="line">pattern[1].spec = &amp;ip_spec;</span><br><span class="line">546 </span><br><span class="line">pattern[1].mask = &amp;ip_mask;</span><br><span class="line">547 </span><br><span class="line"></span><br><span class="line">548 </span><br><span class="line">pattern[2].type = RTE_FLOW_ITEM_TYPE_END;</span><br><span class="line">549 </span><br><span class="line"></span><br><span class="line">550 </span><br><span class="line">//</span><br><span class="line">551 </span><br><span class="line">struct rte_flow_error error;</span><br><span class="line">552 </span><br><span class="line">int res = rte_flow_validate(0, &amp;attr, pattern, action, &amp;error);</span><br><span class="line">553 </span><br><span class="line">if (!res) &#123;</span><br><span class="line">554 </span><br><span class="line">flow = rte_flow_create(0, &amp;attr, pattern, action, &amp;error);</span><br><span class="line">555 </span><br><span class="line">&#125;</span><br><span class="line">556 </span><br><span class="line">if (!flow) &#123;</span><br><span class="line">557 </span><br><span class="line">LOG(ERROR) &lt;&lt; &quot;Flow can&#x27;t be created &quot; &lt;&lt; error.type </span><br><span class="line">558 </span><br><span class="line">&lt;&lt; &quot;, message: &quot; &lt;&lt; error.message;</span><br><span class="line">559 </span><br><span class="line">return -1;</span><br><span class="line">560 </span><br><span class="line">&#125;</span><br><span class="line">561 </span><br><span class="line">&#125;</span><br><span class="line">562 </span><br><span class="line"></span><br><span class="line">563 </span><br><span class="line">return 0;</span><br><span class="line">564 </span><br><span class="line">&#125;</span><br><span class="line">565 </span><br><span class="line"></span><br><span class="line">566 </span><br><span class="line">void* dpdk_handle(void*) &#123;</span><br><span class="line">567 </span><br><span class="line">int recv_pkts = 0;</span><br><span class="line">568 </span><br><span class="line">while(!g_dpdk_stop) &#123;</span><br><span class="line">569 </span><br><span class="line">dpdk_send();</span><br><span class="line">570 </span><br><span class="line">int recv_cnt = 0;</span><br><span class="line">571 </span><br><span class="line">while(recv_cnt == 0) &#123;</span><br><span class="line">572 </span><br><span class="line">usleep(10000);</span><br><span class="line">573 </span><br><span class="line">recv_cnt += dpdk_recv();</span><br><span class="line">574 </span><br><span class="line">&#125;</span><br><span class="line">575 </span><br><span class="line">recv_pkts += recv_cnt;</span><br><span class="line">576 </span><br><span class="line">LOG(INFO) &lt;&lt; recv_pkts &lt;&lt; &quot; pkts received&quot;;</span><br><span class="line">577 </span><br><span class="line">sleep(5);</span><br><span class="line">578 </span><br><span class="line">&#125;</span><br><span class="line">579 </span><br><span class="line">return NULL;</span><br><span class="line">580 </span><br><span class="line">&#125;</span><br><span class="line">581 </span><br><span class="line"></span><br><span class="line">582 </span><br><span class="line">int polar_set_core_affinitize(unsigned lcore_id)</span><br><span class="line">583 </span><br><span class="line">&#123;</span><br><span class="line">584 </span><br><span class="line">cpu_set_t cpus;</span><br><span class="line">585 </span><br><span class="line">size_t n = sysconf(_SC_NPROCESSORS_ONLN);</span><br><span class="line">586 </span><br><span class="line">int cpu = lcore_id;</span><br><span class="line">587 </span><br><span class="line">if (cpu &lt; 0 || cpu &gt;= (int) n) &#123;</span><br><span class="line">588 </span><br><span class="line">errno = -EINVAL;</span><br><span class="line">589 </span><br><span class="line">return -1;</span><br><span class="line">590 </span><br><span class="line">&#125;</span><br><span class="line">591 </span><br><span class="line">CPU_ZERO(&amp;cpus);</span><br><span class="line">592 </span><br><span class="line">CPU_SET(lcore_id, &amp;cpus);</span><br><span class="line">593 </span><br><span class="line">RTE_PER_LCORE(_lcore_id) = lcore_id;</span><br><span class="line">594 </span><br><span class="line">return rte_thread_set_affinity(&amp;cpus);</span><br><span class="line">595 </span><br><span class="line">&#125;</span><br><span class="line">596 </span><br><span class="line"></span><br><span class="line">597 </span><br><span class="line">&#125; // namespace cds_tgt</span><br><span class="line">598 </span><br><span class="line">&#125; // namespace snic</span><br><span class="line">599 </span><br><span class="line">&#125; // namespace baidu</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> dpdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dpdk介绍</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/dpdk%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/dpdk/dpdk%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>dpdk：高速数据包收发引擎，不带协议栈，需要自己实现<br>在X86结构中，处理数据包的传统方式是CPU中断方式，即网卡驱动接收到数据包后通过中断通知CPU处理，然后由CPU拷贝数据并交给协议栈。在数据量大时，这种方式会产生大量CPU中断，导致CPU无法运行其他程序。<br>而DPDK则采用轮询方式实现数据包处理过程：DPDK重载了网卡驱动，该驱动在收到数据包后不中断通知CPU，而是将数据包通过零拷贝技术存入内存，这时应用层程序就可以通过DPDK提供的接口，直接从内存读取数据包。<br>核心技术：<br>1）将协议栈上移到用户态，利用UIO技术直接将设备数据映射拷贝到用户态<br>2）利用大页技术，降低TLB cache miss，提高TLB访问命中率<br>3）通过CPU亲和性，绑定网卡和线程到固定的core，减少cpu任务切换<br>4）通过无锁队列，减少资源的竞争<br>优势：<br>1）减少中断次数；<br>2）减少内存拷贝次数<br>3）绕过linux的协议栈，用户获得协议栈的控制权，能够定制化协议栈以降低复杂度；<br>劣势：<br>1）内核栈转移至用户层增加了开发成本<br>2）低负荷服务器不实用，会造成cpu空转</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> dpdk </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程并发读写</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E8%AF%BB%E5%86%99/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>store buffer<br>cpu线程要写一个变量，要让其它cpu上这个变量的cache失效。知道这个操作很慢，所以先写到一个store buffer里面去，然后去执行其他的指令。等让其它cpu上这个变量的cache失效成功后，一下子将变量写入。<br>这样做如果多线程的写不互相依赖的话，也就是我的写和你的写没有关系，这样可以解决force share的问题。force share，也就是不慎将两个本无竞争的数据，放置在一个缓存行内，导致因为体系结构的原因，引入了『本不存在的竞争』。<br>但是CAS会清空store buffer，它必须保证我读到的是别人写的最新的数据。</p><p>brpc中使用写rpc队列是用exchange，没有使用CAS，它是想避免引入什么开销？</p><p><img src="/images/cas.png" alt="image"></p><p>CAS是比exchange慢很多的，原因是虽然CAS和exchange都面临着许多读写的问题。但是，CAS，brpc在给大家讲的时候，会说，它是一个lock free的算法。虽然大家都在做lock free的算法，但是假设有4个人竞争，只有一个人拿到锁，其它3个人都要重试；3个人再次竞争，1个人拿到锁，2个人重试…，这样本来只需要进行4次的操作，实际执行了8次或者更多次，次数增加主要是因为退避重试。</p><p>CAS compare_exchange如果每次都成功，它的效果和exchange其实没有什么区别。但是CAS会带来lock free算法，这种算法天生的，在某些场景下是弱于wait free的。</p><p>所以brpc是wait free？</p><p>cacheline对齐的缺点：本来可以写到一个cacheline，现在必须写到两个cacheline，强制对齐所有并发写服务，性能可能会恶化。</p><p>如果每次写完，需要一个全局序的强竞争的话，对齐是有效果的</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程日志的不交叉输出是如何实现的</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%97%A5%E5%BF%97%E7%9A%84%E4%B8%8D%E4%BA%A4%E5%8F%89%E8%BE%93%E5%87%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%97%A5%E5%BF%97%E7%9A%84%E4%B8%8D%E4%BA%A4%E5%8F%89%E8%BE%93%E5%87%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大页内存实现原理</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%A4%A7%E9%A1%B5%E5%86%85%E5%AD%98%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%A4%A7%E9%A1%B5%E5%86%85%E5%AD%98%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如果有bthread阻塞怎么调度呢</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%A6%82%E6%9E%9C%E6%9C%89bthread%E9%98%BB%E5%A1%9E%E6%80%8E%E4%B9%88%E8%B0%83%E5%BA%A6%E5%91%A2/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%A6%82%E6%9E%9C%E6%9C%89bthread%E9%98%BB%E5%A1%9E%E6%80%8E%E4%B9%88%E8%B0%83%E5%BA%A6%E5%91%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用户态锁和内核锁</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E7%94%A8%E6%88%B7%E6%80%81%E9%94%81%E5%92%8C%E5%86%85%E6%A0%B8%E9%94%81/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E7%94%A8%E6%88%B7%E6%80%81%E9%94%81%E5%92%8C%E5%86%85%E6%A0%B8%E9%94%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用库文件所在目录</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%B8%B8%E7%94%A8%E5%BA%93%E6%96%87%E4%BB%B6%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%B8%B8%E7%94%A8%E5%BA%93%E6%96%87%E4%BB%B6%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>libibverbs.so<br>&#x2F;usr&#x2F;lib64&#x2F;libibverbs.so</p><p>libmlx5.so<br>&#x2F;usr&#x2F;lib64&#x2F;libmlx5.so</p><p>libnl.so</p><p>libnuma.so<br>&#x2F;usr&#x2F;lib64&#x2F;libnuma.so</p><p>这类问题解决办法，替换原有机器的相应库</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>火焰图解读</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E7%81%AB%E7%84%B0%E5%9B%BE%E8%A7%A3%E8%AF%BB/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E7%81%AB%E7%84%B0%E5%9B%BE%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gperftools.github.io/gperftools/cpuprofile.html">https://gperftools.github.io/gperftools/cpuprofile.html</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统如何调度线程</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E8%B0%83%E5%BA%A6%E7%BA%BF%E7%A8%8B/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E8%B0%83%E5%BA%A6%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>操作系统<br>线程<br>cpu，core</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>既然HTTP已经可以了，为什么还需要用RPC</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E6%97%A2%E7%84%B6HTTP%E5%B7%B2%E7%BB%8F%E5%8F%AF%E4%BB%A5%E4%BA%86%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E9%9C%80%E8%A6%81%E7%94%A8RPC/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E6%97%A2%E7%84%B6HTTP%E5%B7%B2%E7%BB%8F%E5%8F%AF%E4%BB%A5%E4%BA%86%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E9%9C%80%E8%A6%81%E7%94%A8RPC/</url>
      
        <content type="html"><![CDATA[<p>HTTP和RPC都是应用层协议。<br>不用HTTP的原因：</p><ol><li>消息体太大，RPC通信对性能有要求</li><li>HTTP无状态，同步短连接<br>那HTTP2呢？<br>既然基于TCP优于HTTP，gRPC为什么选择基于HTTP2？<br>http2使用了二进制协议，两边都维护了头字段的对应表，所以头已经很小了。同时http2也会保证长连接，不用每次都建立新的连接。<br>http2不是采用字符串的协议，总体大小会小很多<br>在设计rpc的时候，是为了高性能和大吞吐量场景，基于tcp性能更快。压力不大场景，http可以满足。grpc做的也很好。</li></ol><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4OTA3NDQ0Nw==&mid=2455544244&idx=1&sn=8b64cb748898b4af6668c47ef978c6bb&chksm=fb9cbdd4cceb34c2e086e2e6bedc1c8138dd2733228808d7b7b71f1aa679a5de0a5ea352fa07&scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzI4OTA3NDQ0Nw==&amp;mid=2455544244&amp;idx=1&amp;sn=8b64cb748898b4af6668c47ef978c6bb&amp;chksm=fb9cbdd4cceb34c2e086e2e6bedc1c8138dd2733228808d7b7b71f1aa679a5de0a5ea352fa07&amp;scene=21#wechat_redirect</a></p><p><img src="/images/http-protocol.png" alt="Image"></p><p>RPC(Remote Procedure Call，远程过程调用)是一种计算机通信协议，允许调用不同进程空间的程序。RPC 的客户端和服务器可以在一台机器上，也可以在不同的机器上。程序员使用时，就像调用本地程序一样，无需关注内部的实现细节。<br>不同的应用程序之间的通信方式有很多，比如浏览器和服务器之间广泛使用的基于 HTTP 协议的 Restful API。与 RPC 相比，Restful API 有相对统一的标准，因而更通用，兼容性更好，支持不同的语言。HTTP 协议是基于文本的，一般具备更好的可读性。但是缺点也很明显：</p><ul><li>Restful 接口需要额外的定义，无论是客户端还是服务端，都需要额外的代码来处理，而 RPC 调用则更接近于直接调用。</li><li>基于 HTTP 协议的 Restful 报文冗余，承载了过多的无效信息，而 RPC 通常使用自定义的协议格式，减少冗余报文。</li><li>RPC 可以采用更高效的序列化协议，将文本转为二进制传输，获得更高的性能。</li><li>因为 RPC 的灵活性，所以更容易扩展和集成诸如注册中心、负载均衡等功能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flatmap和hashmap</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/flatmap%E5%92%8Chashmap/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/flatmap%E5%92%8Chashmap/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gdb原理，为什么有的段错误用gdb就不能复现了</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/gdb%E5%8E%9F%E7%90%86%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E7%9A%84%E6%AE%B5%E9%94%99%E8%AF%AF%E7%94%A8gdb%E5%B0%B1%E4%B8%8D%E8%83%BD%E5%A4%8D%E7%8E%B0%E4%BA%86/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/gdb%E5%8E%9F%E7%90%86%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E7%9A%84%E6%AE%B5%E9%94%99%E8%AF%AF%E7%94%A8gdb%E5%B0%B1%E4%B8%8D%E8%83%BD%E5%A4%8D%E7%8E%B0%E4%BA%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>taskset的使用</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/taskset%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/taskset%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>taskset (util-linux-ng 2.17.2)<br>usage: taskset [options] [mask | cpu-list] [pid | cmd [args…]]<br>set or get the affinity of a process</p><p>  -p, –pid                  operate on existing given pid<br>  -c, –cpu-list             display and specify cpus in list format<br>  -h, –help                 display this help<br>  -V, –version              output version information</p><p>The default behavior is to run a new command:<br>  taskset 03 sshd -b 1024<br>You can retrieve the mask of an existing task:<br>  taskset -p 700<br>Or set it:<br>  taskset -p 03 700<br>List format uses a comma-separated list instead of a mask:<br>  taskset -pc 0,3,7-11 700<br>Ranges in list format can take a stride argument:<br>  e.g. 0-31:2 is equivalent to mask 0x55555555</p><p>举例：taskset -cp 0,3 9726</p><p>如何用taskset启动一个程序呢<br>下面的使用不生效：<br>taskset [options] mask command [arg]…<br>taskset 0×00000003 google-chrome</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>socket是如何实现的</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/socket%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/socket%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>先说一下对于 socket fd的理解<br>socket fd和文件的fd相同，只是提供给上层用户的一个标识，上层用户通过这个标识，用户通过这个标识进行一系列的操作。<br>更新：上面的理解有问题，文件的fd对应的是一个文件，实体；socket的fd只是一个结构体实例。</p><p>除了一些通用的接口，如果一个接口，比如write既可以用于文件写入，也可以用于socket写入，那如何区分呢？<br>函数指针（由驱动程序提供，注册到内核里面），类似于spdk transport类型的判断，会调用对应类型的函数<br>也就是，应用程序调用write， write调用到内核提供的sys_write ,在sys_write里面，根据要操作的fd找到对应的file, 通过file可以获取到操作此file的write函数指针，即为驱动程序提供的write函数。<br>Linux Kernel 2.2.14中sys_write中的源代码：<br>asmlinkage ssize_t sys_write(unsigned int fd, const char * buf, size_t count)<br>{<br>ssize_t ret;<br>struct file * file;<br>struct inode * inode;<br>ssize_t (*write)(struct file <em>, const char <em>, size_t, loff_t <em>); &#x2F;</em> 指向<br>驱动程序中的wirte函数的指针</em>&#x2F;<br>lock_kernel();<br>ret &#x3D; -EBADF;<br>file &#x3D; fget(fd); &#x2F;</em> 通过文件描述符得到文件指针 <em>&#x2F;<br>if (!file)<br>goto bad_file;<br>if (!(file-&gt;f_mode &amp; FMODE_WRITE))<br>goto out;<br>inode &#x3D; file-&gt;f_dentry-&gt;d_inode; &#x2F;</em> 得到inode信息 <em>&#x2F;<br>ret &#x3D; locks_verify_area(FLOCK_VERIFY_WRITE, inode, file, file-&gt;f_pos,<br>count);<br>if (ret)<br>goto out;<br>ret &#x3D; -EINVAL;<br>if (!file-&gt;f_op || !(write &#x3D; file-&gt;f_op-&gt;write)) &#x2F;</em> 将函数开始时声明的<br>write函数指针指向fops方法中对应的write函数 <em>&#x2F;<br>goto out;<br>down(&amp;inode-&gt;i_sem);<br>ret &#x3D; write(file, buf, count, &amp;file-&gt;f_pos); &#x2F;</em> 使用驱动程序中的write函数<br>将数据输入设备，注意看，这里就是四个参数了 *&#x2F;<br>up(&amp;inode-&gt;i_sem);<br>out:<br>fput(file);<br>bad_file:<br>unlock_kernel();<br>return ret;<br>}<br>用户使用write函数将数据写到设备里面这个过程到底是怎么实现的：<br>1，insmod驱动程序。驱动程序申请设备名和主设备号，这些可以在&#x2F;proc&#x2F;devIEces中获得。<br>2，从&#x2F;proc&#x2F;devices中获得主设备号，并使用mknod命令建立设备节点文件。这是通过主<br>设备号将设备节点文件和设备驱动程序联系在一起。设备节点文件中的file属性中指明了<br>驱动程序中fops方法实现的函数指针。<br>3，用户程序使用open打开设备节点文件，这时操作系统内核知道该驱动程序工作了，就<br>调用fops方法中的open函数进行相应的工作。open方法一般返回的是文件标示符，实际<br>上并不是直接对它进行操作的，而是有操作系统的系统调用在背后工作。<br>4，当用户使用write函数操作设备文件时，操作系统调用sys_write函数，该函数首先通<br>过文件标示符得到设备节点文件对应的inode指针和flip指针。inode指针中有设备号信<br>息，能够告诉操作系统应该使用哪一个设备驱动程序，flip指针中有fops信息，可以告诉<br>操作系统相应的fops方法函数在那里可以找到。<br>5，然后这时sys_write才会调用驱动程序中的write方法来对设备进行写的操作。<br>其中1-3都是在用户空间进行的，4-5是在核心空间进行的。用户的write函数和操作系统<br>的write函数通过系统调用sys_write联系在了一起。<br>那么对于绕过内核的应用呢？<br>那么驱动里面的函数，及怎么调用到这些函数都应该去重新实现一遍。</p><p>问题：RDMA的接口怎么实现的呢？</p><p>结合实际：<br>polar不会去区分，因为它只有socket写入。<br>那么如果fd和内核选择的fd重合会怎么样呢？依照目前的理解，不会怎么样，fd只是一个标识<br>猜测：根据fd获取file的操作使用的是统一的接口？应该不是<br>那我们为什么一定要去拿file呢？polar没有拿file<br>linux一切皆文件，那么网卡设备也是了？不懂了，应该是，我们在dpdk调用中打开了网卡，并且发送数据的时候会以port_id作为参数。那这样一讲，polar的fd更没有意义了</p><p>一个设备可以对应多个fd，通过这些fd获取的是同一个file吗？<br>应该是，内核在真正write的时候加锁了</p><p>参考链接：<a href="https://blog.csdn.net/fjt19900921/article/details/8292685">https://blog.csdn.net/fjt19900921/article/details/8292685</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>threadlocal变量</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/threadlocal%E5%8F%98%E9%87%8F/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/threadlocal%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>threadlocal变量是否需要定义为static，有何区别？<br>threadlocal变量的销毁？<br>threadlocal变量一般用于需要保证线程线程安全的函数中？需要保证？</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些操作的常见用时</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%97%B6/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<ul><li>epoll_wait的超时精度是毫秒，较差。pthread_cond_timedwait的超时使用timespec，精度到纳秒，一般是60微秒左右的延时。</li><li>出于性能考虑，TimerThread使用wall-time，而不是单调时间，可能受到系统时间调整的影响。具体来说，如果在测试中把系统时间往前或往后调一个小时，程序行为将完全undefined。未来可能会让用户选择单调时间。</li><li>在cpu支持nonstop_tsc和constant_tsc的机器上，baidu-rpc和bthread会优先使用基于rdtsc的cpuwide_time_us。那两个flag表示rdtsc可作为wall-time使用，不支持的机器上会转而使用较慢的内核时间。我们的机器（Intel Xeon系列）大都有那两个flag。rdtsc作为wall-time使用时是否会受到系统调整时间的影响，未测试不清楚。</li></ul>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么attachment不序列化.md</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E4%B8%BA%E4%BB%80%E4%B9%88attachment%E4%B8%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E4%B8%BA%E4%BB%80%E4%B9%88attachment%E4%B8%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>理解：序列化的目的是什么？<br>对象无法作为字符流传输</p><p><a href="https://segmentfault.com/a/1190000039369372">https://segmentfault.com/a/1190000039369372</a></p><ol><li>序列化的处理要素<ul><li>解析效率：序列化协议应该首要考虑的因素，像xml&#x2F;json解析起来比较耗时，需要解析doom树，二进制自定义协议解析起来效率要快很多。</li><li>压缩率：同样一个对象，xml&#x2F;json传输起来有大量的标签冗余信息，信息有效性低，二进制自定义协议占用的空间相对来说会小很多。</li><li>扩展性与兼容性：是否能够利于信息的扩展，并且增加字段后旧版客户端是否需要强制升级，这都是需要考虑的问题，在自定义二进制协议时候，要做好充分考虑设计。</li><li>可读性与可调试性：xml&#x2F;json的可读性会比二进制协议好很多，并且通过网络抓包是可以直接读取，二进制则需要反序列化才能查看其内容。</li><li>跨语言：有些序列化协议是与开发语言紧密相关的，例如dubbo的Hessian序列化协议就只能支持Java的RPC调用。</li><li>通用性：xml&#x2F;json非常通用，都有很好的第三方解析库，各个语言解析起来都十分方便，二进制数据的处理方面也有Protobuf和Hessian等插件，在做设计的时候尽量做到较好的通用性。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>同步和异步RPC</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5RPC/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5RPC/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原子变量为什么比锁要快一些</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E9%94%81%E8%A6%81%E5%BF%AB%E4%B8%80%E4%BA%9B/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94%E9%94%81%E8%A6%81%E5%BF%AB%E4%B8%80%E4%BA%9B/</url>
      
        <content type="html"><![CDATA[<p>原子变量<br>互斥锁<br>自旋锁</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>brpc定时器</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/brpc%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/brpc%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>bucket+最小堆+墙上时钟</p><p>add timer的时候，通过线程id%bucket，存入一个bucket中（链表），加锁；<br>存入bucket的时候，会判断新加入的定时器的超时时间是否小于bucket的最小时间；<br>如果小于，则更新此bucket的最小时间，并将此最小时间与全局最小时间进行对比，如果小于全局最小时间，唤醒定时器线程</p><p>删除的时候只需要根据id，即地址，找到timer，将其标志位置为失效；</p><p>定时器线程的逻辑：<br>遍历所有的bucket，将目前没有失效的定时器用最小堆的形式组织；<br>取出最小堆的第一个元素，判断时间是否到，如果没有，则更新全局最小时间（加锁），并睡眠；如果时间已经到了，则判断是否已经失效，如果失效（在定时器线程执行期间，另外一个线程删除了定时器），则从最小堆中将其删除，并重新选择第一个元素；如果没有失效，判断选择的第一个元素的超时时间是否小于最小超时时间（加锁），如果小于，则说明在此期间有新的定时器加入，需要重新组织最小堆；如果不小于，则执行最小堆第一个元素的回调函数，并将其从最小堆中删除；<br>再次执行上面逻辑；</p><p>bucket+链表+小顶堆<br>有一个TimerThread线程，轮询所有的buckets，将其压入栈。栈顶即为最小的元素。如果栈顶的时间小于当前时间，则执行栈顶的事件；然后pop_back。一直循环。直到当前时间小于栈顶的时间，然后开始睡眠。<br>那TimerThread什么时候唤醒呢？当有事件插入时，会对比插入事件的时间点和全局最小时间的大小，如果小于全局最小时间，则唤醒TimerThread并重新进行压栈。</p><p>libevent定时器<br>最小堆的添加与删除</p><p>时间轮定时器</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>bthread</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/bthread/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/bthread/</url>
      
        <content type="html"><![CDATA[<p>bthread的栈：mmap从操作系统申请，object pool，thread local</p><p>bthread切换：<br>boost.context，通过汇编修改寄存器的信息</p><p>bthread锁：bthread级别的锁</p><p>无锁队列，多生产者单消费者队列：execute queue<br>基本原理也是依赖操作系统提供CAS语义，主要使用原子的exchange语义-结合bthread的未完全连接情况下的yeild特性完成。</p><ul><li>多生产者</li></ul><ol><li>使用原子的头插方法将要执行的任务发送插入到队列（ _head.exchange(node, butil::memory_order_release);）</li><li>但是由于原子设置头节点和设置该节点的Next无法形成原子性</li><li>所以会发生头插入完了，但是完成指向前一个节点的操作还未完成（即处于UNCONNECT状态）<br>下图为未完全connect情况下示例图</li></ol><ul><li>消费者</li></ul><ol><li>插入第一个节点的情况下（发现前一个节点为nullptr）的情况下会启动bthread进行消费</li><li>但是在遍历过程中会发现由于多生产者的并发未连接完成的链表，这个时候会执行bthread_yeild方式切出一会儿（等到连接上的时候再进行便利）直到遍历完成</li><li>获取到的任务顺序为FILO，所以使用FIFO的方式执行请求</li><li>完成之后，使用原子的CAS接口判断是否当前的head还是之前取下来的head。如果是，说明没有更多的task，原子调用会将head设置为nullptr，该bthread退出。否则取下接下来的请求知道之前的head，继续进行处理（_head.compare_exchange_strong(old_head（expected）, desired&#x3D;NULL)）</li><li>PS：如果如上第4步的是发现没有更多待处理的请求下，当前bthread会退出，下一次插入请求的时候发现当前的head为nullptr会新生成一个bthread进行执行（也就是为了彻底避免生产者和消费者的等待，生产者其实是消费者进行创建的）</li></ol>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>bthread栈大小</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/bthread%E6%A0%88%E5%A4%A7%E5%B0%8F/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/bthread%E6%A0%88%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://aandds.com/blog/go-stack.html">https://aandds.com/blog/go-stack.html</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>bthread_id锁机制分析</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/bthread_id%E9%94%81%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/bthread_id%E9%94%81%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cacheline</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/cacheline/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/cacheline/</url>
      
        <content type="html"><![CDATA[<p>cache与内存，OK<br>cacheline对齐：建议，只读数据与可读可写数据分开</p><ul><li>每个高速缓存行完全是在一个突发读操作周期中进行填充或者下载的。即使处理器只存取一个字节的存储器，高速缓存控制器也启动整个存取器访问周期并请求整个数据块。</li><li>共享内存的并行计算，有可能会出现＂伪共享＂问题．比如，两个处理器各要访问一个word，这两个word却存在于同一个cache line大小的区域里，这时，从应用逻辑层面说，这两个处理器并没有共享内存，因为他们访问的是不同的内容（不同的word）。但是因为cache line的存在和限制，这两个CPU要访问这两个不同的word时，却一定要访问同一个cache line块，产生了事实上的“共享”。显然，由于cache line大小限制带来的这种“伪共享”是我们不想要的，会浪费系统资源。</li></ul><p>cache同步：当一个 CPU 修改高速缓存行中的字节时，计算机中的其它 CPU会被通知，它们的高速缓存将视为无效。</p><ul><li>MESI协议：Modifyied exclusive share invalid</li><li><a href="https://cloud.tencent.com/developer/article/1548942">https://cloud.tencent.com/developer/article/1548942</a></li></ul><p>既然缓存一致性已经由硬件完成了，那为什么多个线程操作同一个变量仍然会有问题？<br>原因：不是原子操作导致的？</p><p>下面的例子：<br>increase一个变量，CPU微观指令级别分成3步操作。1) 先read变量的值到CPU内存寄存器；2) 对寄存器的值递增；3) 将寄存器的值写回变量。例如不使用原子指令的情况下在多个CPU上执行以下increase函数。<br>int counter &#x3D; 0;</p><p>void increase(void)<br>{<br>        counter++;<br>}</p><p>例如2个CPU得系统，初始值counter为0。在两个CPU上同时执行以上increase函数。可能出现如下操作序列：</p><ul><li>+———————-+———————-+</li></ul><p>   |    |    CPU0 operation    |    CPU1 operation    |<br>   |    +———————-+———————-+<br>   |    | read counter (&#x3D;&#x3D; 0)  |                      |<br>   |    +———————-+———————-+<br>   |    |       increase       | read counter (&#x3D;&#x3D; 0)  |<br>   |    +———————-+———————-+<br>   |    | write counter (&#x3D;&#x3D; 1) |       increase       |<br>   |    +———————-+———————-+<br>   |    |                      | write counter (&#x3D;&#x3D; 1) |<br>   |    +———————-+———————-+<br>   V<br>timeline<br>我们可以清晰地看到，当CPU0读取counter的值位0后，在执行increase操作的同时，CPU1也读取counter变量，同样counter的值依然是0。随后CPU0和CPU1先后将1的值写入内存。实际上，我们想执行两次increase操作，我应该得到counter值为2。但是实际上得到的是1。这不是我们想要的结果。</p><p>既然有cache一致性算法，为什么会出现这种情况呢？</p><p>后续表述：<br>为了解决这个问题，硬件引入原子自增指令。保证CPU0递增原子变量counter之间，不被其他CPU执行自增指令导致不想要的结果。硬件是如何实现原子操作期间不被打断呢？</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cpu profile对性能测试的影响</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/cpu%20profile%E5%AF%B9%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/cpu%20profile%E5%AF%B9%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cache伪共享</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/cache%E4%BC%AA%E5%85%B1%E4%BA%AB/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/cache%E4%BC%AA%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cpu调度流水线</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/cpu%E8%B0%83%E5%BA%A6%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/cpu%E8%B0%83%E5%BA%A6%E6%B5%81%E6%B0%B4%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>对于一个cpu来说，执行一条指令需要进行如下步骤：</p><ol><li>取指令；</li><li>读寄存器和译码；</li><li>执行ALU和地址计算；</li><li>存储器访问；</li><li>写结果到寄存器。<br>执行不同的步骤经过的电路路径不同，因此，可以同时执行多条指令，提高吞吐。<br>这样做有如下问题：<br>流水线“冒险”<br>“冒险”指的是指令并行执行带来的各种硬件资源冲突，数据的读写顺序等等问题，下面分别讲一下这几个“冒险”。<br>结构冒险：所需的硬件正在为之前的指令工作；<br>数据冒险：需要等待之前的指令完成数据写入；<br>控制冒险：需要根据之前的指令决定接下来的行为；</li></ol><p>有一个万能的解决方案，就是执行“空泡指令”，也就是空指令，这样能使冒险的指令执行时间往后延迟。</p><p>这也是指令重排的原因。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>core和cpu的区别</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/core%E5%92%8Ccpu%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/core%E5%92%8Ccpu%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>core是物理核，cpu是逻辑核</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BRPC的负载均衡</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/BRPC%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/BRPC%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<p>线程池思路：在Socket map Insert的时候为每一个polling thread创建一个与之对应的Socket，每一个Socket map中的Socket对应一个vector。这个vector中的Socket不出现在Socket map中。</p><p>负载均衡时候的Socket是什么时候创建的呢？<br>已经找到了，会在负载均衡的ResetServers函数里面创建</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OOM进程</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/OOM%E8%BF%9B%E7%A8%8B/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/OOM%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>如果发生了OOM，系统会记录下是哪个（些）进程被杀掉吗？<br>dmesg |grep -E ‘kill|oom|out of memory’</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JEMALLOC TCMALLOC</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/JEMALLOC%20TCMALLOC/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/JEMALLOC%20TCMALLOC/</url>
      
        <content type="html"><![CDATA[<p>JEMALLOC</p><ol><li>线程局部缓存</li><li>多个内存池，多个线程争同一个锁的机会少。但是要整合多个内存池</li><li>倾向于分配地址空间较小的内存，地址连续，局部性好</li></ol><p>TCMALLOC</p><ol><li>线程局部缓存</li><li>一个总内存池</li><li>随机分配<br>总之就是简单</li></ol><p>实验：如果仅仅通过多次new和delete测试，TCMALLOC的性能好于JEMALLOC，原因是TCMALLOC简单；但是在实际业务中，JEMALLOC更好</p><p>内存分配器模型：多线程，持续且随机地申请和释放<br>实际业务并不是：持续且随机地申请和释放，job粒度，申请，操作，释放。一个job申请的内存永远不会被另一个job释放<br>优化方向：<br>短生命周期→运行时只分配，不释放，整体消亡→统一释放，碎片重整合并<br>渐进饱和实例→实例级别重用（brpc object pool）<br>可重建的实例→碎片内存重整</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RPC 实战与核心原理</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/RPC%20%E5%AE%9E%E6%88%98%E4%B8%8E%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/RPC%20%E5%AE%9E%E6%88%98%E4%B8%8E%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://time.geekbang.org/column/article/199649">https://time.geekbang.org/column/article/199649</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>brpc中Socket的关闭逻辑</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/brpc%E4%B8%ADSocket%E7%9A%84%E5%85%B3%E9%97%AD%E9%80%BB%E8%BE%91/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/brpc%E4%B8%ADSocket%E7%9A%84%E5%85%B3%E9%97%AD%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p>主要函数：<br>SetFailed<br>Address<br>Dereferencce</p><p>SetFailed函数：<br>检查version是否相等，<br>如果不相等，说明已经在其它地方被SetFailed了，直接返回；<br>如果相等，则首先将version+1，然后尝试回收（调用Dereferencce函数）</p><p>Address函数：<br>将引用计数+1<br>判断version是否相等：<br>如果相等，说明此Socket正常，直接返回；<br>如果不相等，说明此Socket有问题：<br>先将之前的+1减去<br>判断引用计数的值：</p><blockquote><p>1，有其他地方正在使用，直接返回；<br>&lt;1，已经被回收，输出错误日志，返回；（这种情况一般不会发生）<br>&#x3D;1，尝试回收：<br>再次获取version<br>如果为偶数，加上上面版本不一致判断，说明已经被其它地方销毁归还了，直接返回<br>如果为奇数，判断在此函数中前后两次获取的version是否相等，或者前面获取的version+1是否等于后面获取的version（这种条件成立的场景：说明前面获取的version为偶数，偶数并且版本号不一致，只有一种情况，就是第一次获取version在Dereferencce给版本号+2之后，但是return_resource之前；然后在第一次获取version和第二次获取version之间又发生了SetFailed+1），这两种情况都要尝试return_source<br>上面的分析有问题</p></blockquote><p>Dereferencce函数：<br>获取Sokcet的引用计数，如果&gt;1，说明有其它地方在使用，直接返回；<br>获取version，然后进行下面的判断：<br>如果version相等或者Socket的version等于id获得的version+1（这种情况是SetFailed），将Socket的version设置为id的version+2，偶数，尝试回收和归还。</p><p>那么有一个问题是，id对应的version什么时候再次和Socket对应的version一致呢？<br>在Socket::Create里面，再次使用此Socket时，会将id对应的version设置为Socket的version的值。<br>fetch_add返回的是之前的</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>accept和epoll_wait的惊群效应</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/accept%E5%92%8Cepoll_wait%E7%9A%84%E6%83%8A%E7%BE%A4%E6%95%88%E5%BA%94/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/accept%E5%92%8Cepoll_wait%E7%9A%84%E6%83%8A%E7%BE%A4%E6%95%88%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p>惊群现象（thundering herd）就是当多个进程和线程在同时阻塞等待同一个事件时，如果这个事件发生，会唤醒所有的进程，但最终只可能有一个进程&#x2F;线程对该事件进行处理，其他进程&#x2F;线程会在失败后重新休眠，这种性能浪费就是惊群。</p><p>accept 惊群<br>考虑如下场景：<br>主进程创建 socket、bind、 listen 之后，fork 出多个子进程，每个子进程都开始循环处理（accept)这个 socket。每个进程都阻塞在 accpet 上，当一个新的连接到来时，所有的进程都会被唤醒，但其中只有一个进程会 accept 成功，其余皆失败，重新休眠。这就是 accept 惊群。<br>那么这个问题真的存在吗？<br>事实上，历史上，Linux 的 accpet 确实存在惊群问题，但现在的内核都解决该问题了。即，当多个进程&#x2F;线程都阻塞在对同一个 socket 的 accept 调用上时，当有一个新的连接到来，内核只会唤醒一个进程，其他进程保持休眠，压根就不会被唤醒。</p><p>epoll 惊群<br>如上所述，accept 已经不存在惊群问题，但 epoll 上还是存在惊群问题。即，如果多个进程&#x2F;线程阻塞在监听同一个 listening socket fd 的 epoll_wait 上，当有一个新的连接到来时，所有的进程都会被唤醒。<br>考虑如下场景：<br>主进程创建 socket、bind、 listen 后，将该 socket 加入到 epoll 中，然后 fork 出多个子进程，每个进程都阻塞在 epoll_wait 上，如果有事件到来，则判断该事件是否是该 socket 上的事件，如果是，说明有新的连接到来了，则进行 accept 操作。为了简化处理，忽略后续的读写以及对 accept 返回的新的套接字的处理，直接断开连接。<br>那么，当新的连接到来时，是否每个阻塞在 epoll_wait 上的进程都会被唤醒呢？<br>很多博客中提到，测试表明虽然 epoll_wait 不会像 accept 那样只唤醒一个进程&#x2F;线程，但也不会把所有的进程&#x2F;线程都唤醒。<br>发现确实如上面那篇博客里所说，当我模拟发起一个请求时，只有一个或少数几个进程被唤醒了。<br>也就是说，到目前为止，还没有得到一个确定的答案。但后来，在下面这篇博客中看到这样一个评论：<a href="http://blog.csdn.net/spch2008/article/details/18301357">http://blog.csdn.net/spch2008/article/details/18301357</a><br>这个总结，需要进一步阐述，你的实验，看上去是只有 4 个进程唤醒了，而事实上，其余进程没有被唤醒的原因是你的某个进程已经处理完这个 accept，内核队列上已经没有这个事件，无需唤醒其他进程。你可以在 epoll 获知这个 accept 事件的时候，不要立即去处理，而是 sleep 下，这样所有的进程都会被唤起。<br>看到这个评论后，我顿时如醍醐灌顶，重新修改了上面的测试程序，即在 epoll_wait 返回后，加了个 sleep 语句，这时再测试，果然发现所有的进程都被唤醒了。<br>所以，epoll_wait 上的惊群确实是存在的。</p><p>为什么内核对 accept 的惊群做了处理，而现在仍然存在 epoll 的惊群现象呢？<br>我想，应该是这样的：<br>accept 确实应该只能被一个进程调用成功，内核很清楚这一点。但 epoll 不一样，他监听的文件描述符，除了可能后续被 accept 调用外，还有可能是其他网络 IO 事件的，而其他 IO 事件是否只能由一个进程处理，是不一定的，内核不能保证这一点，这是一个由用户决定的事情，例如可能一个文件会由多个进程来读写。所以，对 epoll 的惊群，内核则不予处理。</p><p>参考:<a href="https://pureage.info/2015/12/22/thundering-herd.html">https://pureage.info/2015/12/22/thundering-herd.html</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>brpc内存管理</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/brpc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/brpc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>内存管理总是程序中的重要一环，在多线程时代，一个好的内存分配大都在如下两点间权衡：</p><ul><li>线程间竞争少。内存分配的粒度大都比较小，对性能敏感，如果不同的线程在大多数分配时会竞争同一份资源或同一把锁，性能将会非常糟糕，原因无外乎和cache一致性有关，已被大量的malloc方案证明。</li><li>浪费的空间少。如果每个线程各申请各的，速度也许不错，但万一一个线程总是申请，另一个线程总是释放，内存就爆炸了。线程之间总是要共享内存的，如何共享就是方案的关键了。<br>一般的应用可以使用tcmalloc、jemalloc等成熟的内存分配方案，但这对于较为底层，关注性能长尾的应用是不够的。多线程框架广泛地通过传递对象的ownership来让问题异步化，如何让分配这些小对象的开销变的更小是值得研究的问题。其中的一个特点较为显著：</li><li>大多数结构是等长的。<br>这个属性可以大幅简化内存分配的过程，获得比通用malloc更稳定、快速的性能。brpc中的ResourcePool和ObjectPool即提供这类分配。</li></ul><p>这篇文章不鼓励用户使用ResourcePool或ObjectPool，事实上我们反对用户在程序中使用这两个类。因为”等长“的副作用是某个类型独占了一部分内存，这些内存无法再被其他类型使用，如果不加控制的滥用，反而会在程序中产生大量彼此隔离的内存分配体系，既浪费内存也不见得会有更好的性能。</p><p>resource pool使用block和block group来管理内存，对象都是在block里分配的，新建对象会根据块容量等算出一个resourceId，后续的获取和归还都用根据这个Id算出便宜量来定位到具体的资源位置。</p><p>resource pool全局只有一个单例，blockgroup和block都是resource pool单例层面的，而每个pthread会有一个thread local 的local pool，local pool有一个FreeChunk类型的_cur_free变量，保存着局部的空闲资源的id，resource pool里还有一个全局的_free_chunks变量，保存着全局空闲资源的id，Localpool还有一个Block*类型的_cur_block变量，一个指向resource pool某个block的指针。</p><p>对于获取资源，如果_cur_free还有空闲的对象资源Id，那么直接找到对应资源返回，否则看_free_chunks里有没有FreeChunk，有的话拷贝到_cur_free，然后取出空闲的对象资源Id，找到对应资源返回。如果局部和全局都没有已有空闲资源则优先在_cur_block上新创建，如果这个指针为null或者指向的block已经满了，则调用resource pool的add_block新建一个block并赋值给_cur_block，并在上创建对象。这里提到的创建对象都是在已有内存上创建，没有分配内存的过程，所以比较快。</p><p>对于归还资源，则是优先将id存在_cur_free，如果_cur_free满了则把_cur_free push到_free_chunks里，空_cur_free后再将当前id放入_cur_free里。</p><p>无论是获取还是归还都会有在局部空闲id列表和全局空闲id列表之间进行memcpy的情况，是比较耗性能的，但是因为仅仅是很小的resourceId数据的拷贝，消耗还是可接受的。总的来说，就是利用提前的块内存分配以及对象的重复利用，实现了高性能的资源分配。<br>————————————————<br>版权声明：本文为CSDN博主「wxj1992」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/wxj1992/article/details/100128333">https://blog.csdn.net/wxj1992/article/details/100128333</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>brpc cache bouncing</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/brpc%20cache%20bouncing/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/brpc/brpc%20cache%20bouncing/</url>
      
        <content type="html"><![CDATA[<p>cache bouncing</p><p>当event dispatcher把任务递给worker时，用户逻辑不得不从一个核跳到另一个核，相关的cpu cache必须同步过来，这是微秒级的操作，并不很快。如果worker能直接在event dispatcher所在的核上运行就更好了，因为大部分系统（在这个时间尺度下）并没有密集的事件流，尽快运行已有的任务的优先级高于event dispatcher获取新事件。另一个例子是收到response后最好在当前cpu core唤醒发起request的阻塞线程。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> brpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>unique_ptr的get和*</title>
      <link href="/2024/03/31/work/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/unique_ptr/"/>
      <url>/2024/03/31/work/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/unique_ptr/</url>
      
        <content type="html"><![CDATA[<p>官网地址：<a href="https://en.cppreference.com/w/cpp/memory/unique_ptr">https://en.cppreference.com/w/cpp/memory/unique_ptr</a><br>unique_ptr成员函数：</p><p>release<br>returns a pointer to the managed object and releases the ownership<br>函数定义：<br>pointer release() noexcept;    (since C++11)</p><p>Releases the ownership of the managed object if any. get() returns nullptr after the call.<br>The caller is responsible for deleting the object.</p><p>说明：没有输入参数，返回当前unique_ptr指向的对象<br>返回的是裸指针<br>这里需要注意的是，release后要手动释放对象。举例：</p><p>#include <memory><br>#include <iostream><br>#include <cassert></p><p>struct Foo {<br>    Foo() { std::cout &lt;&lt; “Foo\n”; }<br>    <del>Foo() { std::cout &lt;&lt; “</del>Foo\n”; }<br>};</p><p>int main()<br>{<br>    std::cout &lt;&lt; “Creating new Foo…\n”;<br>    std::unique_ptr<Foo> up(new Foo());</p><pre><code>std::cout &lt;&lt; &quot;About to release Foo...\n&quot;;Foo* fp = up.release();assert (up.get() == nullptr);assert (up == nullptr);std::cout &lt;&lt; &quot;Foo is no longer owned by unique_ptr...\n&quot;;// delete fp;Foo fp1 = Foo();std::unique_ptr&lt;Foo&gt; up1(&amp;fp1);up1.release();std::cout &lt;&lt; &quot;After call release&quot; &lt;&lt; std::endl;</code></pre><p>}</p><p>输出为：<br>Creating new Foo…<br>Foo<br>About to release Foo…<br>Foo is no longer owned by unique_ptr…<br>Foo<br>After call release<br>~Foo</p><p>注意：<br>fp没有在函数结束时释放，因为是用new创建的；<br>fp1在函数结束时释放</p><p>reset<br>函数定义：</p><ol><li><p>members of the primary template, unique_ptr<T><br>void reset( pointer ptr &#x3D; pointer() ) noexcept;    (1)</p></li><li><p>members of the specialization unique_ptr&lt;T[]&gt;<br>template&lt; class U &gt;<br>void reset( U ) noexcept;    (2)<br>void reset( std::nullptr_t p &#x3D; nullptr ) noexcept;    (3)</p></li></ol><p>如果有参数：将当前unique_ptr指向参数表示的新对象，当前unique_ptr指向的对象将会被释放<br>如果没有参数：释放当前unique_ptr指向的对象</p><p>get<br>函数定义：<br>pointer get() const noexcept;    (since C++11)</p><p>Returns a pointer to the managed object or nullptr if no object is owned.<br>返回的是裸指针</p><p>swap<br>函数定义：<br>void swap(unique_ptr&amp; other) noexcept;    (since C++11)</p><p>Swaps the managed objects and associated deleters of *this and another unique_ptr object other.</p><p>交换两个unique_ptr</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 编程语言 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nullptr和NULL</title>
      <link href="/2024/03/31/work/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/nullptr%E5%92%8CNULL/"/>
      <url>/2024/03/31/work/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/nullptr%E5%92%8CNULL/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void func(void* t)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;func1&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void func(int i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;func2&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">func(NULL);    // func2</span><br><span class="line">func(nullptr);    // func1</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来NULL和nullptr都是代表空指针，但是NULL在重载函数的时候却匹配到了参数为int的那个版本。<br>这是因为在C++中，NULL的定义一般是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ifdef __cplusplus</span><br><span class="line">#define NULL 0</span><br><span class="line">#else</span><br><span class="line">#define NULL ((void*)0)</span><br><span class="line">#endif // __cplusplus</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 编程语言 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vector深拷贝还是浅拷贝</title>
      <link href="/2024/03/31/work/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/vector%E6%B7%B1%E6%8B%B7%E8%B4%9D%E8%BF%98%E6%98%AF%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2024/03/31/work/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/vector%E6%B7%B1%E6%8B%B7%E8%B4%9D%E8%BF%98%E6%98%AF%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>如果我们没有提供拷贝构造函数,没有重载&#x3D;操作符，vector 对我们的 mc 对象进行的简单的浅拷贝，将拷贝的对象插入到容器中，导致我们的 mc 对象的 data 指针和容器中mc 对象的拷贝对象中的 data 指针都指向了我们在堆区分配的内存，当函数结束，两个对象都调用了析构函数，先调用析构函数的对象成功释放了堆区内存，后调用析构函数的对象一释放，程序挂掉了。<br>原因在于两个指针指向了同一块堆区内存，这样会导致不可预知的结果，函数结束其中一个调用析构函数，销毁了 data 指向的内存空间，而另一个对象析构的时候就会挂掉。<br>问题的解决办法就是，给我们的对象提供一个拷贝构造函数，并且重载&#x3D;操作符,两个指针分别指向自己的那一块内存，互不影响。</p><p>实现拷贝构造函数就可以了</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 编程语言 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cpu虚拟化</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/QUMU/cpu%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/QUMU/cpu%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>虚拟机里面的一个 vcpu 对应物理机上的一个线程，然后这个线程被调度到某个物理 CPU 上</p><p>虚拟机的多个核是多个线程。但是线程在物理机上能不能分到物理核，是物理机的操作系统定的。</p><p>问题：虚拟机上的一个vcpu是一个物理机上的线程；那么虚拟机上的线程如何在虚拟机的cpu上面调度呢？是虚拟机负责调度的还是物理机负责调度的？<br>答案：虚拟机负责</p><p>多核环境下虚拟机系统的两级调度框架。客户操作系统负责第2 级调度,即线程或进程在vCPU 上的调度（将核心线程映射到相应的VCPU上）。虚拟机监视器负责第1 级调度, 即vCPU在物理处理单元上的调度。</p><p>虚拟机只有在实例化cpu的时候才会真正创建物理线程吗？<br>应该是的<br>在主机看来，它只能看到虚拟机的CPU，即vCPU被调度执行，但是vCPU具体执行什么东西，它是看不见的。vCPU对主机系统来说，只是一个普通的线程，主机系统可以对其进行调度。而当执行vCPU线程时，CPU切换到VMX non-root operation，进入到虚拟机的世界，这个时候，vCPU的执行就像是物理主机上物理CPU的执行，也是正常地对虚拟机内的线程进行调度，只是对于一个物理CPU来说，它要么执行主机的程序，要么执行vCPU所需要执行的程序，两者在时间上是错开的。</p><p>例如，有一个qemu进程（其中包括一个vCPU线程）和一个vim进程，而在qemu虚拟机中存在一个word进程和一个IE进程。对于物理CPU而言，它可能会调度并执行vCPU线程，在它执行vCPU线程期间，它会切换到VMX non-root operation模式，这个时候，物理CPU看到的资源，包括地址空间，I&#x2F;O设备是对应到虚拟机的。在vCPU线程执行期间，它可能会调度并执行word进程或者IE进程。所以物理CPU在时间的维度上，是在主机和虚拟机之间不停切换的。</p><p>作者：河马<br>链接：<a href="https://www.zhihu.com/question/284712870/answer/726486082">https://www.zhihu.com/question/284712870/answer/726486082</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> QUMU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QEMU KVM</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/QUMU/QEMU%20KVM/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/QUMU/QEMU%20KVM/</url>
      
        <content type="html"><![CDATA[<p>Qemu 将 KVM 整合进来，将有关 CPU 指令的部分交由内核模块来做，就是 qemu-kvm (qemu-system-XXX)。<br>qemu 和 kvm 整合之后，CPU 的性能问题解决了。另外 Qemu 还会模拟其他的硬件，如网络和硬盘。同样，全虚拟化的方式也会影响这些设备的性能。于是，qemu 采取半虚拟化的方式，让 Guest OS 加载特殊的驱动来做这件事情。例如，网络需要加载 virtio_net，存储需要加载 virtio_blk，Guest 需要安装这些半虚拟化驱动，GuestOS 知道自己是虚拟机，所以数据会直接发送给半虚拟化设备，经过特殊处理（例如排队、缓存、批量处理等性能优化方式），最终发送给真正的硬件。这在一定程度上提高了性能。至此，整个关系如下图所示。</p><p><img src="/images/qumu-kvm.jpg" alt="Image"></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> QUMU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>attribute__((packed))</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/QUMU/attribute__((packed))/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/QUMU/attribute__((packed))/</url>
      
        <content type="html"><![CDATA[<p> <strong>attribute</strong> ((packed))的作用就是告诉编译器取消结构在编译过程中的优化对齐,按照实际占用字节数进行对齐，是GCC特有的语法。<br><strong>attribute</strong> ((aligned(n)))的作用就是告诉编译器在编译过程中按照n字节对齐。常常用来在结构体后面进行修饰。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> QUMU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vhost-user协议</title>
      <link href="/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/QUMU/vhost-user%E5%8D%8F%E8%AE%AE/"/>
      <url>/2024/03/31/work/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/QUMU/vhost-user%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 项目相关 </category>
          
          <category> QUMU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数组越界死循环</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E6%AD%BB%E5%BE%AA%E7%8E%AF/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E6%AD%BB%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char* argv[])&#123;</span><br><span class="line">    int i = 0;</span><br><span class="line">    int arr[3] = &#123;0&#125;;</span><br><span class="line">    for(; i&lt;=3; i++)&#123;</span><br><span class="line">        arr[i] = 0;</span><br><span class="line">        printf(&quot;hello world\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>这段代码的运行结果并非是打印三行“hello word”，而是会无限打印“hello world”</li><li>另外，对于数组访问越界造成无限循环，我理解是编译器的问题，对于不同的编译器，在内存分配时，会按照内存地址递增或递减的方式进行分配。老师的程序，如果是内存地址递减的方式，就会造成无限循环。</li><li>函数体内的局部变量存在栈上，且是连续压栈。在Linux进程的内存布局中，栈区在高地址空间，从高向低增长。变量i和arr在相邻地址，且i比arr的地址大，所以arr越界正好访问到i。当然，前提是i和arr元素同类型，否则那段代码仍是未决行为。</li><li>例子中死循环的问题跟编译器分配内存和字节对齐有关 数组3个元素 加上一个变量a 。4个整数刚好能满足8字节对齐 所以i的地址恰好跟着a2后面 导致死循环。。如果数组本身有4个元素 则这里不会出现死循环。。因为编译器64位操作系统下 默认会进行8字节对齐 变量i的地址就不紧跟着数组后面了。</li><li>关于数组越界访问导致死循环的问题，我也动手实践了一下，发现结果和编译器的实现有关，gcc有一个编译选项（-fno-stack-protector）用于关闭堆栈保护功能。默认情况下启动了堆栈保护，不管i声明在前还是在后，i都会在数组之后压栈，只会循环4次；如果关闭堆栈保护功能，则会出现死循环。请参考：<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gccstack/index.html">https://www.ibm.com/developerworks/cn/linux/l-cn-gccstack/index.html</a></li><li>举例的内存越界的循环应该限制在x86架构的小端模式，在别的架构平台上的大端模式应该不是这样的！</li></ol>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>红黑树起源</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%B5%B7%E6%BA%90/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%B5%B7%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/tiancai/p/9072813.html">https://www.cnblogs.com/tiancai/p/9072813.html</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法可视</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E5%8F%AF%E8%A7%86/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E5%8F%AF%E8%A7%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a><br>此网站可以将指定算法可视化，能方便理解。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>知识结构</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/algrithm.jpg" alt="Image"></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>memory order</title>
      <link href="/2024/03/31/work/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/memory%20order/"/>
      <url>/2024/03/31/work/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/memory%20order/</url>
      
        <content type="html"><![CDATA[<p>acquire: after is after<br>release: before is before</p><p>说明：</p><p><img src="/images/cplusplus-memory-order.jpg" alt="Image"></p><p>常用函数：<br>fetch_add，返回修改之前的值<br>fetch_sub，返回修改之前的值<br>exchange，返回交换之前的值</p><p><a href="https://www.jianshu.com/p/8c4952e9edec">https://www.jianshu.com/p/8c4952e9edec</a></p><p>原子变量：<br><a href="https://www.jianshu.com/p/a25e0754e2b9">https://www.jianshu.com/p/a25e0754e2b9</a></p><p><img src="/images/cplusplus-memory-order-atomic.jpg" alt="Image"></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 编程语言 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C/C++的一些不太常见的关键字</title>
      <link href="/2024/03/31/work/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%A4%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2024/03/31/work/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%A4%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">__restrict</span><br><span class="line">在C语言中，restrict关键字用于修饰指针(C99标准)。通过加上restrict关键字，编程者可提示编译器：在该指针的生命周期内，其指向的对象不会被别的指针所引用。</span><br><span class="line">需要注意的是，在C++中，并无明确统一的标准支持restrict关键字。但是很多编译器实现了功能相同的关键字，例如gcc和clang中的__restrict关键字。</span><br><span class="line">那么restrict关键字能给程序的实际运行带来哪些好处呢？下面举例说明</span><br><span class="line">int add1(int* a, int* b)</span><br><span class="line">&#123;</span><br><span class="line">    *a = 10;</span><br><span class="line">    *b = 12;</span><br><span class="line">    return *a + *b;</span><br><span class="line">&#125;</span><br><span class="line">大家猜猜add1函数的返回值是多少？是10 + 12 = 22吗？</span><br><span class="line">答案是不一定。在指针a和b的地址不同时，返回22没有问题。但是当指针a与b指向的是同一个int对象时，该对象先被赋值为10，后被赋值为12，因此a和b都返回12,因此add1函数最终返回24</span><br><span class="line">使用-O3优化, add1对应的汇编代码如下。可以看到，在计算返回值时，为了得到*a的值访问了1次内存，而不管在何种条件下(a == b or a != b)，*b的值都是12。因此聪明的编译器将*a的值载入eax寄存器后，直接加上立即数12，而无需再访问内存获取*b的值。在无法确定指针a和b是否相同的情况下，编译器只能帮你到这里了.</span><br><span class="line">0000000000400a10 &lt;_Z4add1PiS_&gt;:</span><br><span class="line">  400a10:   c7 07 0a 00 00 00       movl   $0xa,(%rdi) ; *a = 10</span><br><span class="line">  400a16:   c7 06 0c 00 00 00       movl   $0xc,(%rsi) ; *b = 10</span><br><span class="line">  400a1c:   8b 07                   mov    (%rdi),%eax ; 结果 = *a</span><br><span class="line">  400a1e:   83 c0 0c                add    $0xc,%eax   ; 结果 += 12 </span><br><span class="line">  400a21:   c3                      retq</span><br><span class="line">但是如果加上了restrict关键字，情况便大不相同。C/C++和经过-O3优化的汇编代码如下。通过restrict关键字，编译器依然确认指针a和b不可能指向同一个内存地址，因此在求*a + *b时，无需访问内存，因为*a必然等于立即数10，*b必然等于立即数12。</span><br><span class="line">int add2(int* __restrict  a, int* __restrict b) </span><br><span class="line">&#123;</span><br><span class="line">    *a = 10;</span><br><span class="line">    *b = 12;</span><br><span class="line">    return *a + *b ;</span><br><span class="line">&#125;</span><br><span class="line">0000000000400a30 &lt;_Z4add2PiS_&gt;:</span><br><span class="line">  400a30:   c7 07 0a 00 00 00       movl   $0xa,(%rdi) ; *a = 10</span><br><span class="line">  400a36:   b8 16 00 00 00          mov    $0x16,%eax  ; 结果 = 22</span><br><span class="line">  400a3b:   c7 06 0c 00 00 00       movl   $0xc,(%rsi) ; *b = 12</span><br><span class="line">  400a41:   c3                      retq</span><br><span class="line"></span><br><span class="line">通过无restrict和有restrict两种情况下的汇编指令可看到，后者比前者少访问一次内存，且少执行一条指令。因此我们预期有restrict的版本能够获得可观的性能提升：</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">    int * a = new int;</span><br><span class="line">    int * b = new int;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();</span><br><span class="line">        for (size_t i=0; i&lt;100000000; i++)</span><br><span class="line">            add1(a, b);</span><br><span class="line">        std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();</span><br><span class="line">        std::cout &lt;&lt; &quot;Time difference = &quot; &lt;&lt; std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt; (end - begin).count() &lt;&lt; &quot;[ns]&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line">        std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();</span><br><span class="line">        for (size_t i=0; i&lt;100000000; i++)</span><br><span class="line">            add2(a, b);</span><br><span class="line">        std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();</span><br><span class="line">        std::cout &lt;&lt; &quot;Time difference = &quot; &lt;&lt; std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt; (end - begin).count() &lt;&lt; &quot;[ns]&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">以上代码分别执行add1和add2函数各一亿次，计算二者耗时，结果如下。</span><br><span class="line">Time difference = 146[ns]</span><br><span class="line">Time difference = 56[ns]</span><br><span class="line">在这个case里，使用restrict能够获得2+倍的性能提升！注意使用restrict的时候，编程者必须确保不会出现pointer aliasing, 即同一块内存无法通过两个或以上的指针变量名访问。不满足这个条件而强行指定restrict, 将会出现undefined behavior</span><br><span class="line">PS: 此篇文章有感于clickhouse近期一个与restrict有关的性能优化(https://github.com/ClickHouse/ClickHouse/pull/19946)，只是因为在聚合相关的函数中加上restrict关键字，便能使聚合性能提升1.6倍！所以对于我辈码农来说，多了解一些底层原理永远不亏，说不定哪天你就用上了~</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/349726808">https://zhuanlan.zhihu.com/p/349726808</a></p><p>PS：里面还有一些C++容器相关的链接，应该不错</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 编程语言 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何探测虚拟环境是物理机虚拟机还是容器</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E5%A6%82%E4%BD%95%E6%8E%A2%E6%B5%8B%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%98%AF%E7%89%A9%E7%90%86%E6%9C%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%98%E6%98%AF%E5%AE%B9%E5%99%A8/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E5%A6%82%E4%BD%95%E6%8E%A2%E6%B5%8B%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%98%AF%E7%89%A9%E7%90%86%E6%9C%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%98%E6%98%AF%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>systemd-detect-virt</p><h1 id="docker-容器"><a href="#docker-容器" class="headerlink" title="docker 容器"></a>docker 容器</h1><h1 id="kvm-虚拟机"><a href="#kvm-虚拟机" class="headerlink" title="kvm 虚拟机"></a>kvm 虚拟机</h1><h1 id="物理机"><a href="#物理机" class="headerlink" title="物理机"></a>物理机</h1><p><a href="https://www.infoq.cn/article/536l*xprudowckitdgm4">https://www.infoq.cn/article/536l*xprudowckitdgm4</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GLIBC编译</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/GLIBC%E7%BC%96%E8%AF%91/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/GLIBC%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>strings &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 | grep GLIBC_</p><p>目前最新的版本，可以看到没有2.27</p><p>apt-cache policy libc6</p><p>误删libc<br>LD_PRELOAD&#x3D;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6.bak ln -sf &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.24.so &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6</p><p>2.27版本报错无法解决，最后编译2.28版本<br>2.27报错是：multiple definitions of _<em>nss</em>*</p><p>如何编译glibc:<br><a href="https://www.gnu.org/software/libc/manual/html_node/Configuring-and-compiling.html">https://www.gnu.org/software/libc/manual/html_node/Configuring-and-compiling.html</a></p><p>wget <a href="https://mirrors.tuna.tsinghua.edu.cn/gnu/libc/glibc-2.28.tar.gz">https://mirrors.tuna.tsinghua.edu.cn/gnu/libc/glibc-2.28.tar.gz</a><br>tar -zxvf glibc-2.28.tar.gz</p><p>make build; cd build<br>..&#x2F;configure –prefix&#x3D;&#x2F;opt&#x2F;glibc-2.27 CFLAGS&#x3D;”-O3 -Wno-zero-length-bounds -Wno-missing-attributes -Wno-array-bounds -Wno-maybe-uninitialized”<br>make<br>make install</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LLVM Clang GCC</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/LLVM%20Clang%20GCC/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/LLVM%20Clang%20GCC/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<br><a href="https://www.cnblogs.com/qoakzmxncb/archive/2013/04/18/3029105.html">https://www.cnblogs.com/qoakzmxncb/archive/2013/04/18/3029105.html</a><br><a href="https://www.huaweicloud.com/articles/c377af2c0a8a91e49edf113039dd6867.html">https://www.huaweicloud.com/articles/c377af2c0a8a91e49edf113039dd6867.html</a><br>简史，讲的不错：<a href="http://yuxiaopeng.com/2016/08/compiler/">http://yuxiaopeng.com/2016/08/compiler/</a><br><a href="http://history.programmer.com.cn/9436/">http://history.programmer.com.cn/9436/</a></p><p>Clang 是一个 C、C++、Objective-C 和 Objective-C++ 编程语言的编译器前端，采用底层虚拟机（LLVM）作为后端。至于为什么有了 GCC 还要开发 Clang？Clang 相比 GCC 又有什么优势呢？网上有很多信息可以参考，这里只简单提两点：（1）Clang 采用的是 BSD 协议的许可证，而 GCC 采用的是 GPL 协议，显然前者更为宽松；（2）Clang 是一个高度模块化开发的轻量级编译器，编译速度快、占用内存小、有着友好的出错提示。</p><p>然后说下 Clang 背后的 LLVM（Low Level Virtual Machine）。LLVM 是以 BSD 许可来开发的开源的编译器框架系统，基于 C++ 编写而成，利用虚拟技术来优化以任意程序语言编写的程序的编译时间、链接时间、运行时间以及空闲时间，最早以 C&#x2F;C++ 为实现对象，对开发者保持开放，并兼容已有脚本。LLVM 计划启动于 2000 年，最初由 University of Illinois at Urbana-Champaign 的 Chris Lattner 主持开展，2006 年 Chris Lattner 加盟苹果公司并致力于 LLVM 在苹果公司开发体系中的应用，所以苹果公司也是 LLVM 计划的主要资助者。目前 LLVM 因其宽松的许可协议，更好的模块化、更清晰的架构，成为很多厂商或者组织的选择，已经被苹果 IOS 开发工具、Facebook、Google 等各大公司采用，像 Swift、Rust 等语言都选择了以 LLVM 为后端。<br>在理解 LLVM 之前，先说下传统编译器的工作原理，基本上都是三段式的，可以分为前端、优化器和后端。前端负责解析源代码，检查语法错误，并将其翻译为抽象的语法树；优化器对这一中间代码进行优化，试图使代码更高效；后端则负责将优化器优化后的中间代码转换为目标机器的代码，这一过程后端会最大化的利用目标机器的特殊指令，以提高代码的性能。基于这个认知，我们可以认为 LLVM 包括了两个概念：一个广义的 LLVM 和一个狭义的 LLVM 。广义的 LLVM 指的是一个完整的 LLVM 编译器框架系统，包括了前端、优化器、后端、众多的库函数以及很多的模块；而狭义的 LLVM 则是聚焦于编译器后端功能的一系列模块和库，包括代码优化、代码生成、JIT 等。<br>下面大概讲一讲 LLVM 和 Clang 的关系。我们将它们对应于传统的编译器当中的几个独立的部分，这样能够更加方便明确的表述出它们之前的关系。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cpu忙是什么意思</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/cpu%E5%BF%99%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/cpu%E5%BF%99%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<p>sleep(2);</p><p>上述语句cpu做了什么。</p><p>cpu空闲的时候在做什么？<br>看休眠到什么程度，拿英特尔来说话，4代以前，休眠后时钟是1&#x2F;4频率工作的，从4代的haswell架构，彻底休眠时候底层时钟降低至1&#x2F;12，比待机功耗降低至上代的1&#x2F;20，基本算是真正的达到了S2的状态。</p><p>之后便是在干什么，三代以前，休眠了就是将倍频降至最低，时钟降至1&#x2F;4负责计时和处理其他设备发回的部分信号，只能说是部分，因为太大的数据处理不了，也没有指令让它启用倍频，它只能默默的转存，这就是为什么休眠了有的时候内存还在工作。即str模式，理解为处理器在半死不活的咪觉。<br>四代之后，从时间点上讲，201❌年之后，就开始了，倍频降至0，也就是主频不工作了，时钟降至1&#x2F;12，功率大多在2-5W，就已经很节能了。理解为处理器已经睡了，但是没脱衣服。<br>最新的硬件，没太了解过，但是听别人讲，可以做到所有设备关闭只有极低的电压维持内存供电，在按下开机的时候，执行开机程序，将内存中暂存的数据写入处理器，当然，要比正常开机快很多，因为大多数应用已经转存进了内存，不需要重新在硬盘中调取。这种休眠状态下，处理器就是不工作的。</p><p>cpu频率降低，就会省电。<br>因为在电子技术中,脉冲信号是一个按一定电压幅度,一定时间间隔连续发出的脉冲信号.脉冲信号之间的时间间隔称为周期;而将在单位时间(如1秒)内所产生的脉冲个数称为频率.</p><p>作者：匿名用户<br>链接：<a href="https://www.zhihu.com/question/391904496/answer/1193985842">https://www.zhihu.com/question/391904496/answer/1193985842</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么atomic比mutex性能更高？</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E4%B8%BA%E4%BB%80%E4%B9%88atomic%E6%AF%94mutex%E6%80%A7%E8%83%BD%E6%9B%B4%E9%AB%98/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E4%B8%BA%E4%BB%80%E4%B9%88atomic%E6%AF%94mutex%E6%80%A7%E8%83%BD%E6%9B%B4%E9%AB%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/302472384">https://www.zhihu.com/question/302472384</a></p><p>简单点理解，atomic 是在 cpu 指令级别上实现的锁。所以，除了必不可少的内存栅栏带来流水线效率损失外，几乎可以认为没什么额外的开销了。<br>而 mutex 的话，光是在内核里睡眠&#x2F;唤醒一下，就至少是微秒级的时间开销，更别说各种额外的调用、封装、判断了。</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见编译错误</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%B8%B8%E8%A7%81%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%B8%B8%E8%A7%81%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. /tmp/ccRlf0hE.o:(.eh_frame+0x12): undefined reference to `__gxx_personality_v0&#x27;</span><br><span class="line">collect2: ld returned 1 exit status</span><br><span class="line"></span><br><span class="line">gcc -o hello test_bcloud.cpp 出现上述错误</span><br><span class="line">使用g++编译就OK了</span><br><span class="line">g++ -o hello test_bcloud.cpp</span><br><span class="line"></span><br><span class="line">原因：</span><br><span class="line">gcc是c语言编辑器，你可以用g++编译*.c或*.cpp但是不能用gcc编译*.cpp文件，因为c++向上完全兼容c</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>硬件是如何实现原子操作的</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%A1%AC%E4%BB%B6%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%9A%84/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%A1%AC%E4%BB%B6%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>MESI协议状态</p><p>MESI</p><p>原子操作的底层实现：</p><ol><li>总线加锁</li><li>缓存加锁，cacheline<br>但是有两种情况下处理器不会使用缓存锁定。<br>第一种情况是：当操作的数据不能被缓存在处理器内部，或操作的数据跨多个缓存行（cache line）时，则处理器会调用总线锁定。<br>第二种情况是：有些处理器不支持缓存锁定。对于Intel 486和Pentium处理器，就算锁定的内存区域在处理器的缓存行中也会调用总线锁定。</li></ol>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>锁是如何实现的</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%94%81%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%94%81%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>内核态锁？用户态锁？（没有绝对的用户态锁，futex在没有竞争的情况下，运行在用户态，有竞争才会到内核）<br>cache清空？（MESI协议，不清空cache）<br>流水线呢？（可能会影响）</p><p>一个优秀的文章：<a href="https://www.infoq.com/presentations/go-locks/">https://www.infoq.com/presentations/go-locks/</a><br>自己实现锁<br>标志位：flag，问题是，对flag的读和写不是原子的；指令重排；写延迟<br>对于指令重排：1. 编译器有其解决方法；2. 硬件</p><p>硬件提供了指令，用于支持原子操作。可用其实现锁。自旋锁。<br>可是有什么问题呢？<br>原子变量的效率：<br>We see that with one thread, so when there’s no contention, it takes about 10 nanoseconds. This about 10 times as much as a regular operation.In the contended case, when we have 12 threads, it takes about 12 times as much, which is exactly what we’d expect, because these atomic operations effectively serialize our threads. </p><p>自旋锁缺点：cpu一直在忙。<br>改进：锁唤醒机制<br>但是锁唤醒机制的效率很低：<br>Our question again is, this is nice and all, but what is this upgrade going to cost us? We measure it, here is our microbenchmark. This is again in C, we’re measuring the cost of a lock-unlock pair for a pthread Mutex. We see that in the uncontended case with one thread - again, it’s about 10 nanoseconds, which is the cost of an atomic compare-and-swap, which is what we’d expect, it’s that atomic compare-and-swap that succeeded. In the contended case though, with 12 threads, the cost goes up to one microsecond, and this comes from the context switching cost, from that syscall, from switching into the kernel from the waiting, that’s why it goes up to a whole microsecond.</p><p>解决方法：折中<br>This insight, this tradeoff is captured in hybrid futexes. The way hybrid futexes work is, the thread does that compare and swap, if it fails, it first spins a small fixed number of times, and if it still doesn’t get flagged, only then is the thread suspended. These hybrid futexes are pretty clever, and this is a variant of the pthread Mutex, uses the hybrid futex. Go has an internal futex implementation, and this is a hybrid futex.</p><p>At this point, we’ve evolved from spinlocks to futexes to hybrid futexes. </p><p>原子操作不是系统调用<br>原子变量实现自旋锁<br>futex锁等待队列<br>混合futex，尝试几次再等待</p><p><a href="https://zhuanlan.zhihu.com/p/264848910">https://zhuanlan.zhihu.com/p/264848910</a><br>在常见的linux和glibc版本中，无竞争使用互斥锁并不会带来额外的系统调用。因为Futex技术，使得在线程能直接获取到锁得情况下无需使用系统调用，直接利用CPU原子指令进行加锁或解锁，故互斥锁在竞争小得场合并不会因为频繁进行系统调用而损耗性能。</p><p>linux下互斥锁的加锁和解锁尽可能在用户态完成，如果涉及到等待和唤醒操作，才会进行系统调用</p><p>应用层自旋锁的实现：<br>C++11提供了原子能力，此处可直接使用std::atomic_flag实现自旋锁。<br>注意：由于用户态不能关闭调度，使临界区内任务尽快做完。故系统可能会在临界区调度到其他线程，最坏的情况是其他线程不停的尝试获取这个锁，但因为获取到这个锁的线程还在等待下一次调度，导致白白浪费宝贵的CPU时间，故我们可以在lock()函数中插入一条std::this_thread::yield()防止这种情况。<br>虽然在无竞争情况下，互斥锁和自旋锁都不会进行系统调用，但自旋锁的实现更简单，性能更高<br>有竞争，自旋锁性能好于互斥锁<br>为何自旋锁性能好于互斥锁<br>很多人说互斥锁会频繁进行系统调用，我认为这个说法是不正确的。<br>在竞争小的情况下，自旋锁和互斥锁均不会过多的进行系统调用。<br>而竞争大的情况下，自旋锁需要调用sched_yield，互斥锁需要调用futex。<br>互斥锁更慢的原因时其本身实现更复杂，除了要在用户态进行原子操作外，还要维护一个等待队列，记录哪些线程需要申请锁，以便于实现让权等待。<br>但如果临界区内的任务非常轻量，甚至轻量到比加锁解锁的开销还小的情况下，再去维护这个队列的话，从开销上来看就不那么划算，反而直接使用自旋锁这种简单的机制能获得更高的效率。</p><p>怎么选择使用互斥锁还是自旋锁<br>通常情况下推荐使用互斥锁，在不追求极致性能的情况下，使用互斥锁往往就足够了。<br>在追求极致性能情况下，若临界区内任务很轻，能够很迅速的完成。在这种情况下可以考虑使用自旋锁，若不满足这个条件，使用自旋锁只会降低程序性能。 </p><p>补充：<br>自旋锁只能用于多核cpu，如果是单核将无限制处于自旋状态。<br>互斥锁lock变量必须由操作系统来定义，自旋锁可以用户程序定义。（<a href="https://zhuanlan.zhihu.com/p/110123628%EF%BC%89">https://zhuanlan.zhihu.com/p/110123628）</a><br>Linux中对于锁的实现都是通过futex系统调用。futex由一块能够被多个进程共享的内存空间组成，保存在用户空间的共享内存中，这样对于futex的操作可以放到用户态来执行而不是在内核态，实际上futex的作用就是减少系统调用的次数来提高系统的性能。</p><p>futex的解决思路是：在无竞争的情况下操作完全在user space进行，不需要系统调用，仅在发生竞争的时候进入内核去完成相应的处理(wait 或者 wake up)。所以说，futex是一种user mode和kernel mode混合的同步机制，需要两种模式合作才能完成，futex变量必须位于user space，而不是内核对象，futex的代码也分为user mode和kernel mode两部分，无竞争的情况下在user mode，发生竞争时则通过sys_futex系统调用进入kernel mode进行处理。（<a href="https://www.jianshu.com/p/d17a6152740c%EF%BC%89">https://www.jianshu.com/p/d17a6152740c）</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>什么是XDP</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E4%BB%80%E4%B9%88%E6%98%AFXDP/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E4%BB%80%E4%B9%88%E6%98%AFXDP/</url>
      
        <content type="html"><![CDATA[<p>内核自带的 XDP 技术，在网络包进入内核协议栈前，就对其进行处理。这样，也可以达到目的，获得很好的性能</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为啥 redis 单线程模型也能效率这么高？</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E4%B8%BA%E5%95%A5%20redis%20%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B9%9F%E8%83%BD%E6%95%88%E7%8E%87%E8%BF%99%E4%B9%88%E9%AB%98/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E4%B8%BA%E5%95%A5%20redis%20%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B9%9F%E8%83%BD%E6%95%88%E7%8E%87%E8%BF%99%E4%B9%88%E9%AB%98/</url>
      
        <content type="html"><![CDATA[<p>为啥 redis 单线程模型也能效率这么高？</p><ul><li>纯内存操作。</li><li>核心是基于非阻塞的 IO 多路复用机制。</li><li>C 语言实现，一般来说，C 语言实现的程序“距离”操作系统更近，执行速度相对会更快。</li><li>单线程反而避免了多线程的频繁上下文切换问题，预防了多线程可能产生的竞争问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>回忆题目</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E5%9B%9E%E5%BF%86%E9%A2%98%E7%9B%AE/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E5%9B%9E%E5%BF%86%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password" data-whm="wrong check result">  <script id="hbeData" type="hbeData" data-hmacdigest="fabf9771112dffb493efe0482ee0301e8c26aad8acb1c3a173ae8f7b2e86456b">1c4f476f3e7125f5cf24ac6b2eb45793316064cb25336fd2d143259941de98bf420e4c8eb84ec5c85b573b0b3b1ee05fed7d88a19755c2d7d4010a983b081631737c67537f179e618524dc4bc550dd9cc576c9f83a3f7ef0b0513af2bd6ff60f6af545e44db3c4d714b05d8dffd0f7d3d7811540222d86446b89493899628d7a3e911c3baf6efd3d0946b5f1e9bf51e155879452af425b77aeaaf512290e8b3de147e3b4363c69c517d1bc4ce350646731c21f62752a45b8f40e296a38f52c1a80129e1a931726ff25148a7211ffde4518fe2a62b371b389421a031fa84676db8c29f8ed2510ff53b5db5af896dbff13048658593bbd8a83b45ee9cf1214a80b485e7d6ca0bfe900fe40feca5363495755655c9e6b6cb43f42548874c4c87ce72fde395fe9110ca8c3c6276c1e457b90230c62334750fe397cb2235c924bb7635abf2b3121eed11b65b913da17e61411824607e6604b4007887b98c516a06ccd0b2962858fc41eca619df27924ef06c375987179120feb796cb72f19b674f3747ff00b01a93dc2091d0a991ab212e05960aea6e39c054bffc860d61cde051288342941e767d2854e464f88112f7e2a15e35a7e0d68d4e0797c78a93ed47af4f10480e93e740f1366b53fd82126487b3a28579bc2148da71246e0f44a4bf50d8de5b20c66bfdeb063f2466d9227981b03d13414d563563514ecbca1685e756f170c9c951d007eb0f4b6d4d28caeba99910c8c18b588e855485a060cb0fc26303f80bc5b2d906cccdafd83ac0efc31c493</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">The blog is private</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>35 网络C10K问题</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/35%20%E7%BD%91%E7%BB%9CC10K%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/35%20%E7%BD%91%E7%BB%9CC10K%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>C10K 问题的根源，一方面在于系统有限的资源；另一方面，也是更重要的因素，是同步阻塞的 I&#x2F;O 模型以及轮询的套接字接口，限制了网络事件的处理效率。Linux 2.6 中引入的 epoll ，完美解决了 C10K 的问题，现在的高性能网络方案都基于 epoll。<br>从 C10K 到 C100K ，可能只需要增加系统的物理资源就可以满足；<br>但从 C100K 到 C1000K ，就不仅仅是增加物理资源就能解决的问题了。这时，就需要多方面的优化工作了，从硬件的中断处理和网络功能卸载、到网络协议栈的文件描述符数量、连接状态跟踪、缓存队列等内核的优化，再到应用程序的工作模型优化，都是考虑的重点。<br>再进一步，要实现 C10M ，就不只是增加物理资源，或者优化内核和应用程序可以解决的问题了。这时候，就需要用 XDP 的方式，在内核协议栈之前处理网络包；或者用 DPDK 直接跳过网络协议栈，在用户空间通过轮询的方式直接处理网络包。<br>当然了，实际上，在大多数场景中，我们并不需要单机并发 1000 万的请求。通过调整系统架构，把这些请求分发到多台服务器中来处理，通常是更简单和更容易扩展的方案。</p><p>网络性能测试<br>性能评估是优化网络性能的前提，只有在你发现网络性能瓶颈时，才需要进行网络性能优化。根据 TCP&#x2F;IP 协议栈的原理，不同协议层关注的性能重点不完全一样，也就对应不同的性能测试方法。比如，<br>在应用层，你可以使用 wrk、Jmeter 等模拟用户的负载，测试应用程序的每秒请求数、处理延迟、错误数等；<br>而在传输层，则可以使用 iperf 等工具，测试 TCP 的吞吐情况；<br>再向下，你还可以用 Linux 内核自带的 pktgen ，测试服务器的 PPS。<br>由于低层协议是高层协议的基础。所以，一般情况下，我们需要从上到下，对每个协议层进行性能测试，然后根据性能测试的结果，结合 Linux 网络协议栈的原理，找出导致性能瓶颈的根源，进而优化网络性能。</p><p><img src="/images/network-metrics-tools.png" alt="Image"><br><img src="/images/network-tools-metrics.png" alt="Image"></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> linux性能优化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tcpdump</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Tools/tcpdump/tcpdump/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Tools/tcpdump/tcpdump/</url>
      
        <content type="html"><![CDATA[<p>抓本地回环包：<br>tcpdump -i lo port 8888 -w tcpdump_ssl.cap<br>tcpdump -i eth0 “src host ip”</p><p> tcpdump host ip -w tcpdump_hertz_http.cap </p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> Tools </category>
          
          <category> tcpdump </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高屋建瓴</title>
      <link href="/2024/03/31/work/Thinking/%E9%AB%98%E5%B1%8B%E5%BB%BA%E7%93%B4/"/>
      <url>/2024/03/31/work/Thinking/%E9%AB%98%E5%B1%8B%E5%BB%BA%E7%93%B4/</url>
      
        <content type="html"><![CDATA[<p>网络是艺术，是科学和工程的结合。</p><p>智能网卡：释放CPU，增加竞争力<br>可编程交换机网关：解决带宽瓶颈，降低转发成本<br>高性能网络：支持存算分离，降低TCO</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> Thinking </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>三次握手</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/TCP/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/TCP/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>mtls握手<br>9次握手：<a href="https://draveness.me/whys-the-design-https-latency/">https://draveness.me/whys-the-design-https-latency/</a><br><a href="https://jinbaotang.cn/2021/05/05/tls-socket/">https://jinbaotang.cn/2021/05/05/tls-socket/</a></p><p><a href="https://www.cnblogs.com/wujing-hubei/p/5699773.html">https://www.cnblogs.com/wujing-hubei/p/5699773.html</a><br><img src="/images/tcp-shake.jpg" alt="Image"></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> TCP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sed</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Tools/sed/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Tools/sed/</url>
      
        <content type="html"><![CDATA[<p>sed -i ‘s&#x2F;ervicePath&#x2F;erviceId&#x2F;g’ <code>grep ervicePath -rl ./</code></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>coredump文件</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Tools/gdb/coredump%E6%96%87%E4%BB%B6/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Tools/gdb/coredump%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>如何产生core文件<br>ulimit -c unlimited</p><p>echo ‘&#x2F;home&#x2F;user&#x2F;cores&#x2F;core.%e.%p’ | tee &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;core_pattern</p><p>cat &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;core_pattern<br>&#x2F;home&#x2F;user&#x2F;cores&#x2F;core.%e.%p</p><p>vim &#x2F;etc&#x2F;sysctl.conf<br>kernel.core_pattern &#x3D; &#x2F;home&#x2F;user&#x2F;cores&#x2F;core.%e.%p</p><p>sysctl -p<br>&#x2F;sbin&#x2F;sysctl -p</p><p>kill -s SIGKILL 3826557<br>kill -s SIGSEGV 3823936</p><p>sudo tail -f &#x2F;var&#x2F;log&#x2F;messages</p><p>注意事项：1. 要在运行进程的终端保证unlimited；2. 生成core文件的目录要可写</p><p><a href="https://www.jianshu.com/p/e38a3f1cf7f7">https://www.jianshu.com/p/e38a3f1cf7f7</a></p><ol><li>如果进程在docker里面运行，docker里面同样要设置ulimit -c unlimited</li><li>生成的core文件在主机目录，但是core后面带的进程号是进程在docker里面的进程号</li></ol><p>gdb调试core文件<br>gdb —args .&#x2F;a.out —conf ..<br>core-file core.xxxx</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> Tools </category>
          
          <category> gdb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git基本原理</title>
      <link href="/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Tools/git/git%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/2024/03/31/work/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Tools/git/git%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>图说git：<a href="https://gitmap.novenn.com/">https://gitmap.novenn.com/</a><br>两个讲的比较好的链接：<br>git原理：<a href="http://www.ruanyifeng.com/blog/2018/10/git-internals.html">http://www.ruanyifeng.com/blog/2018/10/git-internals.html</a><br>git常用命令：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p><p>菜鸟教程：<a href="https://www.runoob.com/git/git-workspace-index-repo.html">https://www.runoob.com/git/git-workspace-index-repo.html</a></p><p>常见情况处理：<a href="https://juejin.cn/post/6844903782451511303">https://juejin.cn/post/6844903782451511303</a></p><p>icode git<br><a href="http://wiki.baidu.com/pages/viewpage.action?pageId=708362906">http://wiki.baidu.com/pages/viewpage.action?pageId=708362906</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> 技术学习 </category>
          
          <category> Tools </category>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>推荐资料</title>
      <link href="/2024/03/31/work/Thinking/%E6%8E%A8%E8%8D%90%E8%B5%84%E6%96%99/"/>
      <url>/2024/03/31/work/Thinking/%E6%8E%A8%E8%8D%90%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<p><a href="https://geektutu.com/post/geerpc.html">https://geektutu.com/post/geerpc.html</a></p><p><a href="https://www.byteisland.com/nvme-%E8%AE%BE%E8%AE%A1%E9%80%BB%E8%BE%91%E4%B8%8E%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/">https://www.byteisland.com/nvme-%E8%AE%BE%E8%AE%A1%E9%80%BB%E8%BE%91%E4%B8%8E%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</a></p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> Thinking </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021.01.30工作总结</title>
      <link href="/2024/03/31/work/Thinking/2021.01.30%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
      <url>/2024/03/31/work/Thinking/2021.01.30%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>2020年主要工作内容</p><p>bignat控制面</p><ol><li><p>bignat控制面开发</p></li><li><p>bignat控制面二期</p></li><li><p>bignat控制面QA测试<br>遇到了两个难解的问题：<br>3.1 bignat-api-server毫无痕迹地挂掉，目前原因未知<br>3.2 etcd stm操作bug，已定位，未解决，绕过<br>3.3 bignat-rs-manager内存泄露，已解决</p></li><li><p>bignat控制面上线</p></li><li><p>NGW初期方案支持</p></li><li><p>XX项目juju部署</p></li><li><p>bignat控制面运维</p></li></ol><p>从此项目应该掌握的东西：<br>etcd<br>成熟完善的代码框架，规范<br>问题追查，常用监控命令<br>一个项目从方案设计、开发、测试、上线、运维的整个流程</p><p>用户态协议栈</p><ol><li>mtcp<br>RSS<br>编译优化等级对性能的影响</li><li>brpc<br>brpc为什么性能高</li><li>线程模型<br>BGW vs polling thread</li><li>grp tso</li><li>RSS FlowDirector</li><li>性能测试</li><li>tcp</li><li>IOBuf</li><li>编译原理</li><li>性能调优</li><li>epoll</li><li>多线程编程</li></ol><p>POC</p><ol><li>spdk</li><li>dpdk</li><li>如何升级代码库</li><li>cds前端后端</li></ol>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
          <category> Thinking </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>澳大利亚攻略</title>
      <link href="/2024/03/31/Life/Trip/%E6%BE%B3%E5%A4%A7%E5%88%A9%E4%BA%9A%E6%94%BB%E7%95%A5/"/>
      <url>/2024/03/31/Life/Trip/%E6%BE%B3%E5%A4%A7%E5%88%A9%E4%BA%9A%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>澳大利亚<br><a href="https://online.immi.gov.au/">https://online.immi.gov.au/</a><br>PASS: 长的，大小写，特殊字符</p><p>2023.01.18 - 203.01.28</p><p>行前准备：<br>驱蚊水，晕船药<br>换钱<br>签证<br>转换插头<br>一次性浴巾<br>一次性underwear</p><p>2023.01.19  12.00到达凯恩斯<br>2023.01.28   17.00从墨尔本出发</p><p>19-21，凯恩斯<br>22-24，悉尼<br>25-28， 墨尔本</p><p>overlight<br><a href="https://www.sleepinginairports.net/sleep-guide/sleeping-in-melbourne-tullamarine-airport.htm">https://www.sleepinginairports.net/sleep-guide/sleeping-in-melbourne-tullamarine-airport.htm</a></p><p>19-21，酒店：Trip.com<br>19号到达，市区，美术馆，langoon游泳<br>20号：跳伞</p><p>大堡礁</p><ol><li>sunlover游船出海，<br>买票：<a href="https://www.sunlover.com.au/plan-your-trip/getting-here">https://www.sunlover.com.au/plan-your-trip/getting-here</a></li></ol><ul><li>直升机<br>249+199🔪<br>淘宝是1650人民币，更便宜<br>21号，热带雨林<br>可以不跟团，缆车去火车回；缆车的终点是库兰达小镇。<br>天空之城没有什么玩的，就不去了，淘宝可买<br>跳伞呢？</li></ul><p>21号早上出发去悉尼<br>21-24 悉尼，酒店：Trip.com</p><ol><li>悉尼歌剧院</li><li>博物馆</li></ol><p>24号晚上去墨尔本<br>25-28 墨尔本，酒店：booking.com<br><a href="https://secure.booking.com/confirmation.en-gb.html?aid=304142&sid=6491cb62a28512ec206d3dfc0b99f16e&auth_key=B7xkPy0un0BCd4yy&source=mytrips&label=gen173bo-1DCA8oggI46AdICVgDaMkBiAEBmAEJuAEHyAEM2AED6AEB-AEGiAIBmAIhqAIDuALe3YqeBsACAdICJDY2NDVjYzI3LTk2MTMtNGZjMC04OTA4LWE5YWY1Nzg2NmRmONgCBOACAQ">https://secure.booking.com/confirmation.en-gb.html?aid=304142&amp;sid=6491cb62a28512ec206d3dfc0b99f16e&amp;auth_key=B7xkPy0un0BCd4yy&amp;source=mytrips&amp;label=gen173bo-1DCA8oggI46AdICVgDaMkBiAEBmAEJuAEHyAEM2AED6AEB-AEGiAIBmAIhqAIDuALe3YqeBsACAdICJDY2NDVjYzI3LTk2MTMtNGZjMC04OTA4LWE5YWY1Nzg2NmRmONgCBOACAQ</a></p><ol><li>大洋路一日游</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> Trip </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>出生证明</title>
      <link href="/2024/03/31/odnwo/ME/%E5%87%BA%E7%94%9F%E8%AF%81%E6%98%8E/"/>
      <url>/2024/03/31/odnwo/ME/%E5%87%BA%E7%94%9F%E8%AF%81%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password" data-whm="wrong check result">  <script id="hbeData" type="hbeData" data-hmacdigest="6cbfd0dc4652837641949b3294fb95fae3b72d41a9544c2a0206ba93d2158ede">1c4f476f3e7125f5cf24ac6b2eb457933a5bb4f7d252ba284b0d54879506ee64640cfb914ff51c115507e5ad2fd7d742bdc9c652e6bb9e1347a035e8f67a339603efe64c6aefeca57d0e72ed904b115e38d62750880779bb3b9bac21600b262aefc0dddd8cfc0a2e7df4825cb1b5339aa5e81039af0f74a10eafde7a7d4067ee551cdeaa49301c7a8dcf9242d725d6ce7e221df22c7c2a3a6c49fae46b675de83384f82dbde06d0fc43b2965fe410f9e9d5b1aecc7b27b5d5432de557a4c3e8871f811dddf32f8bd1a3851af6919b5ef05cb2cff81b820b066ae3ce5a825c99f295bcceba72c90a929732322605b31e0a14205092b558de1741a51c32fda0b5c3293ea0f35d5ac458c2a83418d7921ec4b045e04dd24afb9f5e3a115547d6f5023353215665da24a0b24e867be1351bb29611694cc6af2651f51b97a1417f32e638b17e1577bee798fca4d45b57c018c86187311d462efcb1511e560529fbd4f8f46d902f9863b0a8be3592e98bf618807154da1567709057d445b32e42eadc57464569ef515e3444a66d1d2e76fb5591f150cc6718c5fafe850beb61a8fd732c9997825e2e609387a705b14f6d98b7412bc0a578408979141637f6a3ee8fbff9d76e59457a0dc96e42b238ced14e79b5db8c966f3f4485bdadda4932aa4f07560086e6d50de744f5931718a455eebdfc682c997a3f6e28f4c7a6705f0ba24bcdbac400a52287a4e9e47ad7d3bebb1815ff41aa000c655122e5b31cf653fefa1a800b3c5b5da2c1057e6f625774f53e3b449bade6039d2a6960ba3895e7880753b3382482bc47f051374aa56438ae0d43cd399cfba5e2717ff6e3ddee042e9fc6f32a3ed3fe4cae61de61769186abf1932e82f51de7ccbe9f71c79c76619f3acef589691b933d052804701f2876c4a5c8f6a736cfee4ed6689fc13608599c42005709a8047f65b15cf23c6340c604ab9881497504cf9fa1d850567882664e43861c7ca2b497fce96d480fa977acb3fb6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">The blog is private</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> ME </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英文名</title>
      <link href="/2024/03/31/odnwo/ME/%E8%8B%B1%E6%96%87%E5%90%8D/"/>
      <url>/2024/03/31/odnwo/ME/%E8%8B%B1%E6%96%87%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password" data-whm="wrong check result">  <script id="hbeData" type="hbeData" data-hmacdigest="336dab37a3d26379c2640489adcb5ed9de9b203973875d14bde7ed8a9b9f2f0a">1c4f476f3e7125f5cf24ac6b2eb45793b48b5add7bde1a3184e037d1e4e8813b87cf7c0a8e5f4ebf41e92641e8eb2f7aa8bb0d8564ee06ca8cfec0ff7ab0b6b542ad5e9321e0ffc2aaa25e5d954c133fd70d3a8bd07d4dc3da2d27f7c2ac5e4a308eeab5c923edbc464dc9ec8d002a1c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">The blog is private</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> odnwo </category>
          
          <category> ME </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>English</title>
      <link href="/2024/03/31/Language/English/"/>
      <url>/2024/03/31/Language/English/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Japanese</title>
      <link href="/2024/03/31/Language/Japanese/"/>
      <url>/2024/03/31/Language/Japanese/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>权利密码</title>
      <link href="/2024/03/31/Life/Thinking/%E6%9D%83%E5%88%A9%E5%AF%86%E7%A0%81/"/>
      <url>/2024/03/31/Life/Thinking/%E6%9D%83%E5%88%A9%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>一套成功的组织体系正常运转的大前提，不应该是假设多数成员都能经得起各种诱惑的考验，相反，要尽可能避免去考验任性。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> Thinking </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>提问的智慧</title>
      <link href="/2024/03/31/Life/Thinking/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/"/>
      <url>/2024/03/31/Life/Thinking/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md">https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md</a></p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> Thinking </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
